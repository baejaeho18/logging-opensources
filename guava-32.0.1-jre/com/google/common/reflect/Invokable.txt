Compiled from "Invokable.java"
public abstract class com.google.common.reflect.Invokable<T, R> implements java.lang.reflect.AnnotatedElement, java.lang.reflect.Member {
  private final java.lang.reflect.AccessibleObject accessibleObject;

  private final java.lang.reflect.Member member;

  private static final boolean ANNOTATED_TYPE_EXISTS;

  <M extends java.lang.reflect.AccessibleObject & java.lang.reflect.Member> com.google.common.reflect.Invokable(M);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: invokestatic  #2                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       8: pop
       9: aload_0
      10: aload_1
      11: putfield      #3                  // Field accessibleObject:Ljava/lang/reflect/AccessibleObject;
      14: aload_0
      15: aload_1
      16: checkcast     #4                  // class java/lang/reflect/Member
      19: putfield      #5                  // Field member:Ljava/lang/reflect/Member;
      22: return

  public static com.google.common.reflect.Invokable<?, java.lang.Object> from(java.lang.reflect.Method);
    Code:
       0: new           #6                  // class com/google/common/reflect/Invokable$MethodInvokable
       3: dup
       4: aload_0
       5: invokespecial #7                  // Method com/google/common/reflect/Invokable$MethodInvokable."<init>":(Ljava/lang/reflect/Method;)V
       8: areturn

  public static <T> com.google.common.reflect.Invokable<T, T> from(java.lang.reflect.Constructor<T>);
    Code:
       0: new           #8                  // class com/google/common/reflect/Invokable$ConstructorInvokable
       3: dup
       4: aload_0
       5: invokespecial #9                  // Method com/google/common/reflect/Invokable$ConstructorInvokable."<init>":(Ljava/lang/reflect/Constructor;)V
       8: areturn

  public final boolean isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field accessibleObject:Ljava/lang/reflect/AccessibleObject;
       4: aload_1
       5: invokevirtual #10                 // Method java/lang/reflect/AccessibleObject.isAnnotationPresent:(Ljava/lang/Class;)Z
       8: ireturn

  public final <A extends java.lang.annotation.Annotation> A getAnnotation(java.lang.Class<A>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field accessibleObject:Ljava/lang/reflect/AccessibleObject;
       4: aload_1
       5: invokevirtual #11                 // Method java/lang/reflect/AccessibleObject.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;
       8: areturn

  public final java.lang.annotation.Annotation[] getAnnotations();
    Code:
       0: aload_0
       1: getfield      #3                  // Field accessibleObject:Ljava/lang/reflect/AccessibleObject;
       4: invokevirtual #12                 // Method java/lang/reflect/AccessibleObject.getAnnotations:()[Ljava/lang/annotation/Annotation;
       7: areturn

  public final java.lang.annotation.Annotation[] getDeclaredAnnotations();
    Code:
       0: aload_0
       1: getfield      #3                  // Field accessibleObject:Ljava/lang/reflect/AccessibleObject;
       4: invokevirtual #13                 // Method java/lang/reflect/AccessibleObject.getDeclaredAnnotations:()[Ljava/lang/annotation/Annotation;
       7: areturn

  public abstract java.lang.reflect.TypeVariable<?>[] getTypeParameters();

  public final void setAccessible(boolean);
    Code:
       0: aload_0
       1: getfield      #3                  // Field accessibleObject:Ljava/lang/reflect/AccessibleObject;
       4: iload_1
       5: invokevirtual #14                 // Method java/lang/reflect/AccessibleObject.setAccessible:(Z)V
       8: return

  public final boolean trySetAccessible();
    Code:
       0: aload_0
       1: getfield      #3                  // Field accessibleObject:Ljava/lang/reflect/AccessibleObject;
       4: iconst_1
       5: invokevirtual #14                 // Method java/lang/reflect/AccessibleObject.setAccessible:(Z)V
       8: iconst_1
       9: ireturn
      10: astore_1
      11: iconst_0
      12: ireturn
    Exception table:
       from    to  target type
           0     9    10   Class java/lang/RuntimeException

  public final boolean isAccessible();
    Code:
       0: aload_0
       1: getfield      #3                  // Field accessibleObject:Ljava/lang/reflect/AccessibleObject;
       4: invokevirtual #16                 // Method java/lang/reflect/AccessibleObject.isAccessible:()Z
       7: ireturn

  public final java.lang.String getName();
    Code:
       0: aload_0
       1: getfield      #5                  // Field member:Ljava/lang/reflect/Member;
       4: invokeinterface #17,  1           // InterfaceMethod java/lang/reflect/Member.getName:()Ljava/lang/String;
       9: areturn

  public final int getModifiers();
    Code:
       0: aload_0
       1: getfield      #5                  // Field member:Ljava/lang/reflect/Member;
       4: invokeinterface #18,  1           // InterfaceMethod java/lang/reflect/Member.getModifiers:()I
       9: ireturn

  public final boolean isSynthetic();
    Code:
       0: aload_0
       1: getfield      #5                  // Field member:Ljava/lang/reflect/Member;
       4: invokeinterface #19,  1           // InterfaceMethod java/lang/reflect/Member.isSynthetic:()Z
       9: ireturn

  public final boolean isPublic();
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method getModifiers:()I
       4: invokestatic  #21                 // Method java/lang/reflect/Modifier.isPublic:(I)Z
       7: ireturn

  public final boolean isProtected();
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method getModifiers:()I
       4: invokestatic  #22                 // Method java/lang/reflect/Modifier.isProtected:(I)Z
       7: ireturn

  public final boolean isPackagePrivate();
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method isPrivate:()Z
       4: ifne          25
       7: aload_0
       8: invokevirtual #24                 // Method isPublic:()Z
      11: ifne          25
      14: aload_0
      15: invokevirtual #25                 // Method isProtected:()Z
      18: ifne          25
      21: iconst_1
      22: goto          26
      25: iconst_0
      26: ireturn

  public final boolean isPrivate();
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method getModifiers:()I
       4: invokestatic  #26                 // Method java/lang/reflect/Modifier.isPrivate:(I)Z
       7: ireturn

  public final boolean isStatic();
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method getModifiers:()I
       4: invokestatic  #27                 // Method java/lang/reflect/Modifier.isStatic:(I)Z
       7: ireturn

  public final boolean isFinal();
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method getModifiers:()I
       4: invokestatic  #28                 // Method java/lang/reflect/Modifier.isFinal:(I)Z
       7: ireturn

  public final boolean isAbstract();
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method getModifiers:()I
       4: invokestatic  #29                 // Method java/lang/reflect/Modifier.isAbstract:(I)Z
       7: ireturn

  public final boolean isNative();
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method getModifiers:()I
       4: invokestatic  #30                 // Method java/lang/reflect/Modifier.isNative:(I)Z
       7: ireturn

  public final boolean isSynchronized();
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method getModifiers:()I
       4: invokestatic  #31                 // Method java/lang/reflect/Modifier.isSynchronized:(I)Z
       7: ireturn

  final boolean isVolatile();
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method getModifiers:()I
       4: invokestatic  #32                 // Method java/lang/reflect/Modifier.isVolatile:(I)Z
       7: ireturn

  final boolean isTransient();
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method getModifiers:()I
       4: invokestatic  #33                 // Method java/lang/reflect/Modifier.isTransient:(I)Z
       7: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #34                 // class com/google/common/reflect/Invokable
       4: ifeq          46
       7: aload_1
       8: checkcast     #34                 // class com/google/common/reflect/Invokable
      11: astore_2
      12: aload_0
      13: invokevirtual #35                 // Method getOwnerType:()Lcom/google/common/reflect/TypeToken;
      16: aload_2
      17: invokevirtual #35                 // Method getOwnerType:()Lcom/google/common/reflect/TypeToken;
      20: invokevirtual #36                 // Method com/google/common/reflect/TypeToken.equals:(Ljava/lang/Object;)Z
      23: ifeq          44
      26: aload_0
      27: getfield      #5                  // Field member:Ljava/lang/reflect/Member;
      30: aload_2
      31: getfield      #5                  // Field member:Ljava/lang/reflect/Member;
      34: invokevirtual #37                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      37: ifeq          44
      40: iconst_1
      41: goto          45
      44: iconst_0
      45: ireturn
      46: iconst_0
      47: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #5                  // Field member:Ljava/lang/reflect/Member;
       4: invokevirtual #38                 // Method java/lang/Object.hashCode:()I
       7: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #5                  // Field member:Ljava/lang/reflect/Member;
       4: invokevirtual #39                 // Method java/lang/Object.toString:()Ljava/lang/String;
       7: areturn

  public abstract boolean isOverridable();

  public abstract boolean isVarArgs();

  public final R invoke(T, java.lang.Object...) throws java.lang.reflect.InvocationTargetException, java.lang.IllegalAccessException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #2                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       6: checkcast     #40                 // class "[Ljava/lang/Object;"
       9: invokevirtual #41                 // Method invokeInternal:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
      12: areturn

  public final com.google.common.reflect.TypeToken<? extends R> getReturnType();
    Code:
       0: aload_0
       1: invokevirtual #42                 // Method getGenericReturnType:()Ljava/lang/reflect/Type;
       4: invokestatic  #43                 // Method com/google/common/reflect/TypeToken.of:(Ljava/lang/reflect/Type;)Lcom/google/common/reflect/TypeToken;
       7: areturn

  public final com.google.common.collect.ImmutableList<com.google.common.reflect.Parameter> getParameters();
    Code:
       0: aload_0
       1: invokevirtual #44                 // Method getGenericParameterTypes:()[Ljava/lang/reflect/Type;
       4: astore_1
       5: aload_0
       6: invokevirtual #45                 // Method getParameterAnnotations:()[[Ljava/lang/annotation/Annotation;
       9: astore_2
      10: getstatic     #46                 // Field ANNOTATED_TYPE_EXISTS:Z
      13: ifeq          23
      16: aload_0
      17: invokevirtual #47                 // Method getAnnotatedParameterTypes:()[Ljava/lang/reflect/AnnotatedType;
      20: goto          28
      23: aload_1
      24: arraylength
      25: anewarray     #48                 // class java/lang/Object
      28: astore_3
      29: invokestatic  #49                 // Method com/google/common/collect/ImmutableList.builder:()Lcom/google/common/collect/ImmutableList$Builder;
      32: astore        4
      34: iconst_0
      35: istore        5
      37: iload         5
      39: aload_1
      40: arraylength
      41: if_icmpge     81
      44: aload         4
      46: new           #50                 // class com/google/common/reflect/Parameter
      49: dup
      50: aload_0
      51: iload         5
      53: aload_1
      54: iload         5
      56: aaload
      57: invokestatic  #43                 // Method com/google/common/reflect/TypeToken.of:(Ljava/lang/reflect/Type;)Lcom/google/common/reflect/TypeToken;
      60: aload_2
      61: iload         5
      63: aaload
      64: aload_3
      65: iload         5
      67: aaload
      68: invokespecial #51                 // Method com/google/common/reflect/Parameter."<init>":(Lcom/google/common/reflect/Invokable;ILcom/google/common/reflect/TypeToken;[Ljava/lang/annotation/Annotation;Ljava/lang/Object;)V
      71: invokevirtual #52                 // Method com/google/common/collect/ImmutableList$Builder.add:(Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList$Builder;
      74: pop
      75: iinc          5, 1
      78: goto          37
      81: aload         4
      83: invokevirtual #53                 // Method com/google/common/collect/ImmutableList$Builder.build:()Lcom/google/common/collect/ImmutableList;
      86: areturn

  public final com.google.common.collect.ImmutableList<com.google.common.reflect.TypeToken<? extends java.lang.Throwable>> getExceptionTypes();
    Code:
       0: invokestatic  #49                 // Method com/google/common/collect/ImmutableList.builder:()Lcom/google/common/collect/ImmutableList$Builder;
       3: astore_1
       4: aload_0
       5: invokevirtual #54                 // Method getGenericExceptionTypes:()[Ljava/lang/reflect/Type;
       8: astore_2
       9: aload_2
      10: arraylength
      11: istore_3
      12: iconst_0
      13: istore        4
      15: iload         4
      17: iload_3
      18: if_icmpge     47
      21: aload_2
      22: iload         4
      24: aaload
      25: astore        5
      27: aload         5
      29: invokestatic  #43                 // Method com/google/common/reflect/TypeToken.of:(Ljava/lang/reflect/Type;)Lcom/google/common/reflect/TypeToken;
      32: astore        6
      34: aload_1
      35: aload         6
      37: invokevirtual #52                 // Method com/google/common/collect/ImmutableList$Builder.add:(Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList$Builder;
      40: pop
      41: iinc          4, 1
      44: goto          15
      47: aload_1
      48: invokevirtual #53                 // Method com/google/common/collect/ImmutableList$Builder.build:()Lcom/google/common/collect/ImmutableList;
      51: areturn

  public final <R1 extends R> com.google.common.reflect.Invokable<T, R1> returning(java.lang.Class<R1>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #55                 // Method com/google/common/reflect/TypeToken.of:(Ljava/lang/Class;)Lcom/google/common/reflect/TypeToken;
       5: invokevirtual #56                 // Method returning:(Lcom/google/common/reflect/TypeToken;)Lcom/google/common/reflect/Invokable;
       8: areturn

  public final <R1 extends R> com.google.common.reflect.Invokable<T, R1> returning(com.google.common.reflect.TypeToken<R1>);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #57                 // Method getReturnType:()Lcom/google/common/reflect/TypeToken;
       5: invokevirtual #58                 // Method com/google/common/reflect/TypeToken.isSupertypeOf:(Lcom/google/common/reflect/TypeToken;)Z
       8: ifne          50
      11: new           #59                 // class java/lang/IllegalArgumentException
      14: dup
      15: new           #60                 // class java/lang/StringBuilder
      18: dup
      19: invokespecial #61                 // Method java/lang/StringBuilder."<init>":()V
      22: ldc           #62                 // String Invokable is known to return
      24: invokevirtual #63                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: aload_0
      28: invokevirtual #57                 // Method getReturnType:()Lcom/google/common/reflect/TypeToken;
      31: invokevirtual #64                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      34: ldc           #65                 // String , not
      36: invokevirtual #63                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: aload_1
      40: invokevirtual #64                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      43: invokevirtual #66                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      46: invokespecial #67                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      49: athrow
      50: aload_0
      51: astore_2
      52: aload_2
      53: areturn

  public final java.lang.Class<? super T> getDeclaringClass();
    Code:
       0: aload_0
       1: getfield      #5                  // Field member:Ljava/lang/reflect/Member;
       4: invokeinterface #68,  1           // InterfaceMethod java/lang/reflect/Member.getDeclaringClass:()Ljava/lang/Class;
       9: areturn

  public com.google.common.reflect.TypeToken<T> getOwnerType();
    Code:
       0: aload_0
       1: invokevirtual #69                 // Method getDeclaringClass:()Ljava/lang/Class;
       4: invokestatic  #55                 // Method com/google/common/reflect/TypeToken.of:(Ljava/lang/Class;)Lcom/google/common/reflect/TypeToken;
       7: areturn

  abstract java.lang.Object invokeInternal(java.lang.Object, java.lang.Object[]) throws java.lang.reflect.InvocationTargetException, java.lang.IllegalAccessException;

  abstract java.lang.reflect.Type[] getGenericParameterTypes();

  abstract java.lang.reflect.AnnotatedType[] getAnnotatedParameterTypes();

  abstract java.lang.reflect.Type[] getGenericExceptionTypes();

  abstract java.lang.annotation.Annotation[][] getParameterAnnotations();

  abstract java.lang.reflect.Type getGenericReturnType();

  public abstract java.lang.reflect.AnnotatedType getAnnotatedReturnType();

  private static boolean initAnnotatedTypeExists();
    Code:
       0: ldc           #70                 // String java.lang.reflect.AnnotatedType
       2: invokestatic  #71                 // Method java/lang/Class.forName:(Ljava/lang/String;)Ljava/lang/Class;
       5: pop
       6: goto          12
       9: astore_0
      10: iconst_0
      11: ireturn
      12: iconst_1
      13: ireturn
    Exception table:
       from    to  target type
           0     6     9   Class java/lang/ClassNotFoundException

  static {};
    Code:
       0: invokestatic  #73                 // Method initAnnotatedTypeExists:()Z
       3: putstatic     #46                 // Field ANNOTATED_TYPE_EXISTS:Z
       6: return
}

Compiled from "Files.java"
public final class com.google.common.io.Files {
  private static final com.google.common.graph.SuccessorsFunction<java.io.File> FILE_TREE;

  private com.google.common.io.Files();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static java.io.BufferedReader newReader(java.io.File, java.nio.charset.Charset) throws java.io.FileNotFoundException;
    Code:
       0: aload_0
       1: invokestatic  #2                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_1
       6: invokestatic  #2                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       9: pop
      10: new           #3                  // class java/io/BufferedReader
      13: dup
      14: new           #4                  // class java/io/InputStreamReader
      17: dup
      18: new           #5                  // class java/io/FileInputStream
      21: dup
      22: aload_0
      23: invokespecial #6                  // Method java/io/FileInputStream."<init>":(Ljava/io/File;)V
      26: aload_1
      27: invokespecial #7                  // Method java/io/InputStreamReader."<init>":(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V
      30: invokespecial #8                  // Method java/io/BufferedReader."<init>":(Ljava/io/Reader;)V
      33: areturn

  public static java.io.BufferedWriter newWriter(java.io.File, java.nio.charset.Charset) throws java.io.FileNotFoundException;
    Code:
       0: aload_0
       1: invokestatic  #2                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_1
       6: invokestatic  #2                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       9: pop
      10: new           #9                  // class java/io/BufferedWriter
      13: dup
      14: new           #10                 // class java/io/OutputStreamWriter
      17: dup
      18: new           #11                 // class java/io/FileOutputStream
      21: dup
      22: aload_0
      23: invokespecial #12                 // Method java/io/FileOutputStream."<init>":(Ljava/io/File;)V
      26: aload_1
      27: invokespecial #13                 // Method java/io/OutputStreamWriter."<init>":(Ljava/io/OutputStream;Ljava/nio/charset/Charset;)V
      30: invokespecial #14                 // Method java/io/BufferedWriter."<init>":(Ljava/io/Writer;)V
      33: areturn

  public static com.google.common.io.ByteSource asByteSource(java.io.File);
    Code:
       0: new           #15                 // class com/google/common/io/Files$FileByteSource
       3: dup
       4: aload_0
       5: aconst_null
       6: invokespecial #16                 // Method com/google/common/io/Files$FileByteSource."<init>":(Ljava/io/File;Lcom/google/common/io/Files$1;)V
       9: areturn

  public static com.google.common.io.ByteSink asByteSink(java.io.File, com.google.common.io.FileWriteMode...);
    Code:
       0: new           #17                 // class com/google/common/io/Files$FileByteSink
       3: dup
       4: aload_0
       5: aload_1
       6: aconst_null
       7: invokespecial #18                 // Method com/google/common/io/Files$FileByteSink."<init>":(Ljava/io/File;[Lcom/google/common/io/FileWriteMode;Lcom/google/common/io/Files$1;)V
      10: areturn

  public static com.google.common.io.CharSource asCharSource(java.io.File, java.nio.charset.Charset);
    Code:
       0: aload_0
       1: invokestatic  #19                 // Method asByteSource:(Ljava/io/File;)Lcom/google/common/io/ByteSource;
       4: aload_1
       5: invokevirtual #20                 // Method com/google/common/io/ByteSource.asCharSource:(Ljava/nio/charset/Charset;)Lcom/google/common/io/CharSource;
       8: areturn

  public static com.google.common.io.CharSink asCharSink(java.io.File, java.nio.charset.Charset, com.google.common.io.FileWriteMode...);
    Code:
       0: aload_0
       1: aload_2
       2: invokestatic  #21                 // Method asByteSink:(Ljava/io/File;[Lcom/google/common/io/FileWriteMode;)Lcom/google/common/io/ByteSink;
       5: aload_1
       6: invokevirtual #22                 // Method com/google/common/io/ByteSink.asCharSink:(Ljava/nio/charset/Charset;)Lcom/google/common/io/CharSink;
       9: areturn

  public static byte[] toByteArray(java.io.File) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokestatic  #19                 // Method asByteSource:(Ljava/io/File;)Lcom/google/common/io/ByteSource;
       4: invokevirtual #23                 // Method com/google/common/io/ByteSource.read:()[B
       7: areturn

  public static java.lang.String toString(java.io.File, java.nio.charset.Charset) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #24                 // Method asCharSource:(Ljava/io/File;Ljava/nio/charset/Charset;)Lcom/google/common/io/CharSource;
       5: invokevirtual #25                 // Method com/google/common/io/CharSource.read:()Ljava/lang/String;
       8: areturn

  public static void write(byte[], java.io.File) throws java.io.IOException;
    Code:
       0: aload_1
       1: iconst_0
       2: anewarray     #26                 // class com/google/common/io/FileWriteMode
       5: invokestatic  #21                 // Method asByteSink:(Ljava/io/File;[Lcom/google/common/io/FileWriteMode;)Lcom/google/common/io/ByteSink;
       8: aload_0
       9: invokevirtual #27                 // Method com/google/common/io/ByteSink.write:([B)V
      12: return

  public static void write(java.lang.CharSequence, java.io.File, java.nio.charset.Charset) throws java.io.IOException;
    Code:
       0: aload_1
       1: aload_2
       2: iconst_0
       3: anewarray     #26                 // class com/google/common/io/FileWriteMode
       6: invokestatic  #28                 // Method asCharSink:(Ljava/io/File;Ljava/nio/charset/Charset;[Lcom/google/common/io/FileWriteMode;)Lcom/google/common/io/CharSink;
       9: aload_0
      10: invokevirtual #29                 // Method com/google/common/io/CharSink.write:(Ljava/lang/CharSequence;)V
      13: return

  public static void copy(java.io.File, java.io.OutputStream) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokestatic  #19                 // Method asByteSource:(Ljava/io/File;)Lcom/google/common/io/ByteSource;
       4: aload_1
       5: invokevirtual #30                 // Method com/google/common/io/ByteSource.copyTo:(Ljava/io/OutputStream;)J
       8: pop2
       9: return

  public static void copy(java.io.File, java.io.File) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #31                 // Method java/io/File.equals:(Ljava/lang/Object;)Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ldc           #32                 // String Source %s and destination %s must be different
      15: aload_0
      16: aload_1
      17: invokestatic  #33                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      20: aload_0
      21: invokestatic  #19                 // Method asByteSource:(Ljava/io/File;)Lcom/google/common/io/ByteSource;
      24: aload_1
      25: iconst_0
      26: anewarray     #26                 // class com/google/common/io/FileWriteMode
      29: invokestatic  #21                 // Method asByteSink:(Ljava/io/File;[Lcom/google/common/io/FileWriteMode;)Lcom/google/common/io/ByteSink;
      32: invokevirtual #34                 // Method com/google/common/io/ByteSource.copyTo:(Lcom/google/common/io/ByteSink;)J
      35: pop2
      36: return

  public static void copy(java.io.File, java.nio.charset.Charset, java.lang.Appendable) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #24                 // Method asCharSource:(Ljava/io/File;Ljava/nio/charset/Charset;)Lcom/google/common/io/CharSource;
       5: aload_2
       6: invokevirtual #35                 // Method com/google/common/io/CharSource.copyTo:(Ljava/lang/Appendable;)J
       9: pop2
      10: return

  public static void append(java.lang.CharSequence, java.io.File, java.nio.charset.Charset) throws java.io.IOException;
    Code:
       0: aload_1
       1: aload_2
       2: iconst_1
       3: anewarray     #26                 // class com/google/common/io/FileWriteMode
       6: dup
       7: iconst_0
       8: getstatic     #36                 // Field com/google/common/io/FileWriteMode.APPEND:Lcom/google/common/io/FileWriteMode;
      11: aastore
      12: invokestatic  #28                 // Method asCharSink:(Ljava/io/File;Ljava/nio/charset/Charset;[Lcom/google/common/io/FileWriteMode;)Lcom/google/common/io/CharSink;
      15: aload_0
      16: invokevirtual #29                 // Method com/google/common/io/CharSink.write:(Ljava/lang/CharSequence;)V
      19: return

  public static boolean equal(java.io.File, java.io.File) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokestatic  #2                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_1
       6: invokestatic  #2                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       9: pop
      10: aload_0
      11: aload_1
      12: if_acmpeq     23
      15: aload_0
      16: aload_1
      17: invokevirtual #31                 // Method java/io/File.equals:(Ljava/lang/Object;)Z
      20: ifeq          25
      23: iconst_1
      24: ireturn
      25: aload_0
      26: invokevirtual #37                 // Method java/io/File.length:()J
      29: lstore_2
      30: aload_1
      31: invokevirtual #37                 // Method java/io/File.length:()J
      34: lstore        4
      36: lload_2
      37: lconst_0
      38: lcmp
      39: ifeq          58
      42: lload         4
      44: lconst_0
      45: lcmp
      46: ifeq          58
      49: lload_2
      50: lload         4
      52: lcmp
      53: ifeq          58
      56: iconst_0
      57: ireturn
      58: aload_0
      59: invokestatic  #19                 // Method asByteSource:(Ljava/io/File;)Lcom/google/common/io/ByteSource;
      62: aload_1
      63: invokestatic  #19                 // Method asByteSource:(Ljava/io/File;)Lcom/google/common/io/ByteSource;
      66: invokevirtual #38                 // Method com/google/common/io/ByteSource.contentEquals:(Lcom/google/common/io/ByteSource;)Z
      69: ireturn

  public static java.io.File createTempDir();
    Code:
       0: getstatic     #39                 // Field com/google/common/io/TempFileCreator.INSTANCE:Lcom/google/common/io/TempFileCreator;
       3: invokevirtual #40                 // Method com/google/common/io/TempFileCreator.createTempDir:()Ljava/io/File;
       6: areturn

  public static void touch(java.io.File) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokestatic  #2                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_0
       6: invokevirtual #41                 // Method java/io/File.createNewFile:()Z
       9: ifne          49
      12: aload_0
      13: invokestatic  #42                 // Method java/lang/System.currentTimeMillis:()J
      16: invokevirtual #43                 // Method java/io/File.setLastModified:(J)Z
      19: ifne          49
      22: new           #44                 // class java/io/IOException
      25: dup
      26: new           #45                 // class java/lang/StringBuilder
      29: dup
      30: invokespecial #46                 // Method java/lang/StringBuilder."<init>":()V
      33: ldc           #47                 // String Unable to update modification time of
      35: invokevirtual #48                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: aload_0
      39: invokevirtual #49                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      42: invokevirtual #50                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      45: invokespecial #51                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      48: athrow
      49: return

  public static void createParentDirs(java.io.File) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokestatic  #2                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_0
       6: invokevirtual #52                 // Method java/io/File.getCanonicalFile:()Ljava/io/File;
       9: invokevirtual #53                 // Method java/io/File.getParentFile:()Ljava/io/File;
      12: astore_1
      13: aload_1
      14: ifnonnull     18
      17: return
      18: aload_1
      19: invokevirtual #54                 // Method java/io/File.mkdirs:()Z
      22: pop
      23: aload_1
      24: invokevirtual #55                 // Method java/io/File.isDirectory:()Z
      27: ifne          57
      30: new           #44                 // class java/io/IOException
      33: dup
      34: new           #45                 // class java/lang/StringBuilder
      37: dup
      38: invokespecial #46                 // Method java/lang/StringBuilder."<init>":()V
      41: ldc           #56                 // String Unable to create parent directories of
      43: invokevirtual #48                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: aload_0
      47: invokevirtual #49                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      50: invokevirtual #50                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      53: invokespecial #51                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      56: athrow
      57: return

  public static void move(java.io.File, java.io.File) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokestatic  #2                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_1
       6: invokestatic  #2                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       9: pop
      10: aload_0
      11: aload_1
      12: invokevirtual #31                 // Method java/io/File.equals:(Ljava/lang/Object;)Z
      15: ifne          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ldc           #32                 // String Source %s and destination %s must be different
      25: aload_0
      26: aload_1
      27: invokestatic  #33                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      30: aload_0
      31: aload_1
      32: invokevirtual #57                 // Method java/io/File.renameTo:(Ljava/io/File;)Z
      35: ifne          111
      38: aload_0
      39: aload_1
      40: invokestatic  #58                 // Method copy:(Ljava/io/File;Ljava/io/File;)V
      43: aload_0
      44: invokevirtual #59                 // Method java/io/File.delete:()Z
      47: ifne          111
      50: aload_1
      51: invokevirtual #59                 // Method java/io/File.delete:()Z
      54: ifne          84
      57: new           #44                 // class java/io/IOException
      60: dup
      61: new           #45                 // class java/lang/StringBuilder
      64: dup
      65: invokespecial #46                 // Method java/lang/StringBuilder."<init>":()V
      68: ldc           #60                 // String Unable to delete
      70: invokevirtual #48                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      73: aload_1
      74: invokevirtual #49                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      77: invokevirtual #50                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      80: invokespecial #51                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      83: athrow
      84: new           #44                 // class java/io/IOException
      87: dup
      88: new           #45                 // class java/lang/StringBuilder
      91: dup
      92: invokespecial #46                 // Method java/lang/StringBuilder."<init>":()V
      95: ldc           #60                 // String Unable to delete
      97: invokevirtual #48                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     100: aload_0
     101: invokevirtual #49                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     104: invokevirtual #50                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     107: invokespecial #51                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     110: athrow
     111: return

  public static java.lang.String readFirstLine(java.io.File, java.nio.charset.Charset) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #24                 // Method asCharSource:(Ljava/io/File;Ljava/nio/charset/Charset;)Lcom/google/common/io/CharSource;
       5: invokevirtual #61                 // Method com/google/common/io/CharSource.readFirstLine:()Ljava/lang/String;
       8: areturn

  public static java.util.List<java.lang.String> readLines(java.io.File, java.nio.charset.Charset) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #24                 // Method asCharSource:(Ljava/io/File;Ljava/nio/charset/Charset;)Lcom/google/common/io/CharSource;
       5: new           #62                 // class com/google/common/io/Files$1
       8: dup
       9: invokespecial #63                 // Method com/google/common/io/Files$1."<init>":()V
      12: invokevirtual #64                 // Method com/google/common/io/CharSource.readLines:(Lcom/google/common/io/LineProcessor;)Ljava/lang/Object;
      15: checkcast     #65                 // class java/util/List
      18: areturn

  public static <T> T readLines(java.io.File, java.nio.charset.Charset, com.google.common.io.LineProcessor<T>) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #24                 // Method asCharSource:(Ljava/io/File;Ljava/nio/charset/Charset;)Lcom/google/common/io/CharSource;
       5: aload_2
       6: invokevirtual #64                 // Method com/google/common/io/CharSource.readLines:(Lcom/google/common/io/LineProcessor;)Ljava/lang/Object;
       9: areturn

  public static <T> T readBytes(java.io.File, com.google.common.io.ByteProcessor<T>) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokestatic  #19                 // Method asByteSource:(Ljava/io/File;)Lcom/google/common/io/ByteSource;
       4: aload_1
       5: invokevirtual #66                 // Method com/google/common/io/ByteSource.read:(Lcom/google/common/io/ByteProcessor;)Ljava/lang/Object;
       8: areturn

  public static com.google.common.hash.HashCode hash(java.io.File, com.google.common.hash.HashFunction) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokestatic  #19                 // Method asByteSource:(Ljava/io/File;)Lcom/google/common/io/ByteSource;
       4: aload_1
       5: invokevirtual #67                 // Method com/google/common/io/ByteSource.hash:(Lcom/google/common/hash/HashFunction;)Lcom/google/common/hash/HashCode;
       8: areturn

  public static java.nio.MappedByteBuffer map(java.io.File) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokestatic  #2                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_0
       6: getstatic     #68                 // Field java/nio/channels/FileChannel$MapMode.READ_ONLY:Ljava/nio/channels/FileChannel$MapMode;
       9: invokestatic  #69                 // Method map:(Ljava/io/File;Ljava/nio/channels/FileChannel$MapMode;)Ljava/nio/MappedByteBuffer;
      12: areturn

  public static java.nio.MappedByteBuffer map(java.io.File, java.nio.channels.FileChannel$MapMode) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: ldc2_w        #70                 // long -1l
       5: invokestatic  #72                 // Method mapInternal:(Ljava/io/File;Ljava/nio/channels/FileChannel$MapMode;J)Ljava/nio/MappedByteBuffer;
       8: areturn

  public static java.nio.MappedByteBuffer map(java.io.File, java.nio.channels.FileChannel$MapMode, long) throws java.io.IOException;
    Code:
       0: lload_2
       1: lconst_0
       2: lcmp
       3: iflt          10
       6: iconst_1
       7: goto          11
      10: iconst_0
      11: ldc           #73                 // String size (%s) may not be negative
      13: lload_2
      14: invokestatic  #74                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/String;J)V
      17: aload_0
      18: aload_1
      19: lload_2
      20: invokestatic  #72                 // Method mapInternal:(Ljava/io/File;Ljava/nio/channels/FileChannel$MapMode;J)Ljava/nio/MappedByteBuffer;
      23: areturn

  private static java.nio.MappedByteBuffer mapInternal(java.io.File, java.nio.channels.FileChannel$MapMode, long) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokestatic  #2                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_1
       6: invokestatic  #2                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       9: pop
      10: invokestatic  #75                 // Method com/google/common/io/Closer.create:()Lcom/google/common/io/Closer;
      13: astore        4
      15: aload         4
      17: new           #76                 // class java/io/RandomAccessFile
      20: dup
      21: aload_0
      22: aload_1
      23: getstatic     #68                 // Field java/nio/channels/FileChannel$MapMode.READ_ONLY:Ljava/nio/channels/FileChannel$MapMode;
      26: if_acmpne     34
      29: ldc           #77                 // String r
      31: goto          36
      34: ldc           #78                 // String rw
      36: invokespecial #79                 // Method java/io/RandomAccessFile."<init>":(Ljava/io/File;Ljava/lang/String;)V
      39: invokevirtual #80                 // Method com/google/common/io/Closer.register:(Ljava/io/Closeable;)Ljava/io/Closeable;
      42: checkcast     #76                 // class java/io/RandomAccessFile
      45: astore        5
      47: aload         4
      49: aload         5
      51: invokevirtual #81                 // Method java/io/RandomAccessFile.getChannel:()Ljava/nio/channels/FileChannel;
      54: invokevirtual #80                 // Method com/google/common/io/Closer.register:(Ljava/io/Closeable;)Ljava/io/Closeable;
      57: checkcast     #82                 // class java/nio/channels/FileChannel
      60: astore        6
      62: aload         6
      64: aload_1
      65: lconst_0
      66: lload_2
      67: ldc2_w        #70                 // long -1l
      70: lcmp
      71: ifne          82
      74: aload         6
      76: invokevirtual #83                 // Method java/nio/channels/FileChannel.size:()J
      79: goto          83
      82: lload_2
      83: invokevirtual #84                 // Method java/nio/channels/FileChannel.map:(Ljava/nio/channels/FileChannel$MapMode;JJ)Ljava/nio/MappedByteBuffer;
      86: astore        7
      88: aload         4
      90: invokevirtual #85                 // Method com/google/common/io/Closer.close:()V
      93: aload         7
      95: areturn
      96: astore        5
      98: aload         4
     100: aload         5
     102: invokevirtual #87                 // Method com/google/common/io/Closer.rethrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
     105: athrow
     106: astore        8
     108: aload         4
     110: invokevirtual #85                 // Method com/google/common/io/Closer.close:()V
     113: aload         8
     115: athrow
    Exception table:
       from    to  target type
          15    88    96   Class java/lang/Throwable
          15    88   106   any
          96   108   106   any

  public static java.lang.String simplifyPath(java.lang.String);
    Code:
       0: aload_0
       1: invokestatic  #2                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_0
       6: invokevirtual #88                 // Method java/lang/String.length:()I
       9: ifne          15
      12: ldc           #89                 // String .
      14: areturn
      15: bipush        47
      17: invokestatic  #90                 // Method com/google/common/base/Splitter.on:(C)Lcom/google/common/base/Splitter;
      20: invokevirtual #91                 // Method com/google/common/base/Splitter.omitEmptyStrings:()Lcom/google/common/base/Splitter;
      23: aload_0
      24: invokevirtual #92                 // Method com/google/common/base/Splitter.split:(Ljava/lang/CharSequence;)Ljava/lang/Iterable;
      27: astore_1
      28: new           #93                 // class java/util/ArrayList
      31: dup
      32: invokespecial #94                 // Method java/util/ArrayList."<init>":()V
      35: astore_2
      36: aload_1
      37: invokeinterface #95,  1           // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;
      42: astore_3
      43: aload_3
      44: invokeinterface #96,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      49: ifeq          235
      52: aload_3
      53: invokeinterface #97,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      58: checkcast     #98                 // class java/lang/String
      61: astore        4
      63: aload         4
      65: astore        5
      67: iconst_m1
      68: istore        6
      70: aload         5
      72: invokevirtual #99                 // Method java/lang/String.hashCode:()I
      75: lookupswitch  { // 2
                    46: 100
                  1472: 116
               default: 129
          }
     100: aload         5
     102: ldc           #89                 // String .
     104: invokevirtual #100                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     107: ifeq          129
     110: iconst_0
     111: istore        6
     113: goto          129
     116: aload         5
     118: ldc           #101                // String ..
     120: invokevirtual #100                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     123: ifeq          129
     126: iconst_1
     127: istore        6
     129: iload         6
     131: lookupswitch  { // 2
                     0: 156
                     1: 159
               default: 223
          }
     156: goto          43
     159: aload_2
     160: invokeinterface #102,  1          // InterfaceMethod java/util/List.size:()I
     165: ifle          211
     168: aload_2
     169: aload_2
     170: invokeinterface #102,  1          // InterfaceMethod java/util/List.size:()I
     175: iconst_1
     176: isub
     177: invokeinterface #103,  2          // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
     182: checkcast     #98                 // class java/lang/String
     185: ldc           #101                // String ..
     187: invokevirtual #100                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     190: ifne          211
     193: aload_2
     194: aload_2
     195: invokeinterface #102,  1          // InterfaceMethod java/util/List.size:()I
     200: iconst_1
     201: isub
     202: invokeinterface #104,  2          // InterfaceMethod java/util/List.remove:(I)Ljava/lang/Object;
     207: pop
     208: goto          232
     211: aload_2
     212: ldc           #101                // String ..
     214: invokeinterface #105,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     219: pop
     220: goto          232
     223: aload_2
     224: aload         4
     226: invokeinterface #105,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     231: pop
     232: goto          43
     235: bipush        47
     237: invokestatic  #106                // Method com/google/common/base/Joiner.on:(C)Lcom/google/common/base/Joiner;
     240: aload_2
     241: invokevirtual #107                // Method com/google/common/base/Joiner.join:(Ljava/lang/Iterable;)Ljava/lang/String;
     244: astore_3
     245: aload_0
     246: iconst_0
     247: invokevirtual #108                // Method java/lang/String.charAt:(I)C
     250: bipush        47
     252: if_icmpne     275
     255: new           #45                 // class java/lang/StringBuilder
     258: dup
     259: invokespecial #46                 // Method java/lang/StringBuilder."<init>":()V
     262: ldc           #109                // String /
     264: invokevirtual #48                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     267: aload_3
     268: invokevirtual #48                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     271: invokevirtual #50                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     274: astore_3
     275: aload_3
     276: ldc           #110                // String /../
     278: invokevirtual #111                // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
     281: ifeq          293
     284: aload_3
     285: iconst_3
     286: invokevirtual #112                // Method java/lang/String.substring:(I)Ljava/lang/String;
     289: astore_3
     290: goto          275
     293: aload_3
     294: ldc           #113                // String /..
     296: invokevirtual #100                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     299: ifeq          308
     302: ldc           #109                // String /
     304: astore_3
     305: goto          320
     308: ldc           #114                // String
     310: aload_3
     311: invokevirtual #100                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     314: ifeq          320
     317: ldc           #89                 // String .
     319: astore_3
     320: aload_3
     321: areturn

  public static java.lang.String getFileExtension(java.lang.String);
    Code:
       0: aload_0
       1: invokestatic  #2                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: new           #115                // class java/io/File
       8: dup
       9: aload_0
      10: invokespecial #116                // Method java/io/File."<init>":(Ljava/lang/String;)V
      13: invokevirtual #117                // Method java/io/File.getName:()Ljava/lang/String;
      16: astore_1
      17: aload_1
      18: bipush        46
      20: invokevirtual #118                // Method java/lang/String.lastIndexOf:(I)I
      23: istore_2
      24: iload_2
      25: iconst_m1
      26: if_icmpne     34
      29: ldc           #114                // String
      31: goto          41
      34: aload_1
      35: iload_2
      36: iconst_1
      37: iadd
      38: invokevirtual #112                // Method java/lang/String.substring:(I)Ljava/lang/String;
      41: areturn

  public static java.lang.String getNameWithoutExtension(java.lang.String);
    Code:
       0: aload_0
       1: invokestatic  #2                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: new           #115                // class java/io/File
       8: dup
       9: aload_0
      10: invokespecial #116                // Method java/io/File."<init>":(Ljava/lang/String;)V
      13: invokevirtual #117                // Method java/io/File.getName:()Ljava/lang/String;
      16: astore_1
      17: aload_1
      18: bipush        46
      20: invokevirtual #118                // Method java/lang/String.lastIndexOf:(I)I
      23: istore_2
      24: iload_2
      25: iconst_m1
      26: if_icmpne     33
      29: aload_1
      30: goto          39
      33: aload_1
      34: iconst_0
      35: iload_2
      36: invokevirtual #119                // Method java/lang/String.substring:(II)Ljava/lang/String;
      39: areturn

  public static com.google.common.graph.Traverser<java.io.File> fileTraverser();
    Code:
       0: getstatic     #120                // Field FILE_TREE:Lcom/google/common/graph/SuccessorsFunction;
       3: invokestatic  #121                // Method com/google/common/graph/Traverser.forTree:(Lcom/google/common/graph/SuccessorsFunction;)Lcom/google/common/graph/Traverser;
       6: areturn

  public static com.google.common.base.Predicate<java.io.File> isDirectory();
    Code:
       0: getstatic     #122                // Field com/google/common/io/Files$FilePredicate.IS_DIRECTORY:Lcom/google/common/io/Files$FilePredicate;
       3: areturn

  public static com.google.common.base.Predicate<java.io.File> isFile();
    Code:
       0: getstatic     #123                // Field com/google/common/io/Files$FilePredicate.IS_FILE:Lcom/google/common/io/Files$FilePredicate;
       3: areturn

  static {};
    Code:
       0: new           #124                // class com/google/common/io/Files$2
       3: dup
       4: invokespecial #125                // Method com/google/common/io/Files$2."<init>":()V
       7: putstatic     #120                // Field FILE_TREE:Lcom/google/common/graph/SuccessorsFunction;
      10: return
}

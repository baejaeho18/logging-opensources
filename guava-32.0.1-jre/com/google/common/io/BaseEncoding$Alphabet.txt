Compiled from "BaseEncoding.java"
final class com.google.common.io.BaseEncoding$Alphabet {
  private final java.lang.String name;

  private final char[] chars;

  final int mask;

  final int bitsPerChar;

  final int charsPerChunk;

  final int bytesPerChunk;

  private final byte[] decodabet;

  private final boolean[] validPadding;

  private final boolean ignoreCase;

  com.google.common.io.BaseEncoding$Alphabet(java.lang.String, char[]);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_2
       4: invokestatic  #2                  // Method decodabetFor:([C)[B
       7: iconst_0
       8: invokespecial #3                  // Method "<init>":(Ljava/lang/String;[C[BZ)V
      11: return

  private com.google.common.io.BaseEncoding$Alphabet(java.lang.String, char[], byte[], boolean);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: invokestatic  #5                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       9: checkcast     #6                  // class java/lang/String
      12: putfield      #7                  // Field name:Ljava/lang/String;
      15: aload_0
      16: aload_2
      17: invokestatic  #5                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
      20: checkcast     #8                  // class "[C"
      23: putfield      #1                  // Field chars:[C
      26: aload_0
      27: aload_2
      28: arraylength
      29: getstatic     #9                  // Field java/math/RoundingMode.UNNECESSARY:Ljava/math/RoundingMode;
      32: invokestatic  #10                 // Method com/google/common/math/IntMath.log2:(ILjava/math/RoundingMode;)I
      35: putfield      #11                 // Field bitsPerChar:I
      38: goto          73
      41: astore        5
      43: new           #13                 // class java/lang/IllegalArgumentException
      46: dup
      47: new           #14                 // class java/lang/StringBuilder
      50: dup
      51: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
      54: ldc           #16                 // String Illegal alphabet length
      56: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      59: aload_2
      60: arraylength
      61: invokevirtual #18                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      64: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      67: aload         5
      69: invokespecial #20                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      72: athrow
      73: aload_0
      74: getfield      #11                 // Field bitsPerChar:I
      77: invokestatic  #21                 // Method java/lang/Integer.numberOfTrailingZeros:(I)I
      80: istore        5
      82: aload_0
      83: iconst_1
      84: iconst_3
      85: iload         5
      87: isub
      88: ishl
      89: putfield      #22                 // Field charsPerChunk:I
      92: aload_0
      93: aload_0
      94: getfield      #11                 // Field bitsPerChar:I
      97: iload         5
      99: ishr
     100: putfield      #23                 // Field bytesPerChunk:I
     103: aload_0
     104: aload_2
     105: arraylength
     106: iconst_1
     107: isub
     108: putfield      #24                 // Field mask:I
     111: aload_0
     112: aload_3
     113: putfield      #25                 // Field decodabet:[B
     116: aload_0
     117: getfield      #22                 // Field charsPerChunk:I
     120: newarray       boolean
     122: astore        6
     124: iconst_0
     125: istore        7
     127: iload         7
     129: aload_0
     130: getfield      #23                 // Field bytesPerChunk:I
     133: if_icmpge     161
     136: aload         6
     138: iload         7
     140: bipush        8
     142: imul
     143: aload_0
     144: getfield      #11                 // Field bitsPerChar:I
     147: getstatic     #26                 // Field java/math/RoundingMode.CEILING:Ljava/math/RoundingMode;
     150: invokestatic  #27                 // Method com/google/common/math/IntMath.divide:(IILjava/math/RoundingMode;)I
     153: iconst_1
     154: bastore
     155: iinc          7, 1
     158: goto          127
     161: aload_0
     162: aload         6
     164: putfield      #28                 // Field validPadding:[Z
     167: aload_0
     168: iload         4
     170: putfield      #29                 // Field ignoreCase:Z
     173: return
    Exception table:
       from    to  target type
          26    38    41   Class java/lang/ArithmeticException

  private static byte[] decodabetFor(char[]);
    Code:
       0: sipush        128
       3: newarray       byte
       5: astore_1
       6: aload_1
       7: iconst_m1
       8: invokestatic  #31                 // Method java/util/Arrays.fill:([BB)V
      11: iconst_0
      12: istore_2
      13: iload_2
      14: aload_0
      15: arraylength
      16: if_icmpge     69
      19: aload_0
      20: iload_2
      21: caload
      22: istore_3
      23: iload_3
      24: aload_1
      25: arraylength
      26: if_icmpge     33
      29: iconst_1
      30: goto          34
      33: iconst_0
      34: ldc           #32                 // String Non-ASCII character: %s
      36: iload_3
      37: invokestatic  #33                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/String;C)V
      40: aload_1
      41: iload_3
      42: baload
      43: iconst_m1
      44: if_icmpne     51
      47: iconst_1
      48: goto          52
      51: iconst_0
      52: ldc           #34                 // String Duplicate character: %s
      54: iload_3
      55: invokestatic  #33                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/String;C)V
      58: aload_1
      59: iload_3
      60: iload_2
      61: i2b
      62: bastore
      63: iinc          2, 1
      66: goto          13
      69: aload_1
      70: areturn

  com.google.common.io.BaseEncoding$Alphabet ignoreCase();
    Code:
       0: aload_0
       1: getfield      #29                 // Field ignoreCase:Z
       4: ifeq          9
       7: aload_0
       8: areturn
       9: aload_0
      10: getfield      #25                 // Field decodabet:[B
      13: aload_0
      14: getfield      #25                 // Field decodabet:[B
      17: arraylength
      18: invokestatic  #35                 // Method java/util/Arrays.copyOf:([BI)[B
      21: astore_1
      22: bipush        65
      24: istore_2
      25: iload_2
      26: bipush        90
      28: if_icmpgt     97
      31: iload_2
      32: bipush        32
      34: ior
      35: istore_3
      36: aload_0
      37: getfield      #25                 // Field decodabet:[B
      40: iload_2
      41: baload
      42: istore        4
      44: aload_0
      45: getfield      #25                 // Field decodabet:[B
      48: iload_3
      49: baload
      50: istore        5
      52: iload         4
      54: iconst_m1
      55: if_icmpne     66
      58: aload_1
      59: iload_2
      60: iload         5
      62: bastore
      63: goto          91
      66: iload         5
      68: iconst_m1
      69: if_icmpne     76
      72: iconst_1
      73: goto          77
      76: iconst_0
      77: ldc           #36                 // String Can\'t ignoreCase() since \'%s\' and \'%s\' encode different values
      79: iload_2
      80: i2c
      81: iload_3
      82: i2c
      83: invokestatic  #37                 // Method com/google/common/base/Preconditions.checkState:(ZLjava/lang/String;CC)V
      86: aload_1
      87: iload_3
      88: iload         4
      90: bastore
      91: iinc          2, 1
      94: goto          25
      97: new           #38                 // class com/google/common/io/BaseEncoding$Alphabet
     100: dup
     101: new           #14                 // class java/lang/StringBuilder
     104: dup
     105: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
     108: aload_0
     109: getfield      #7                  // Field name:Ljava/lang/String;
     112: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     115: ldc           #39                 // String .ignoreCase()
     117: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     120: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     123: aload_0
     124: getfield      #1                  // Field chars:[C
     127: aload_1
     128: iconst_1
     129: invokespecial #3                  // Method "<init>":(Ljava/lang/String;[C[BZ)V
     132: areturn

  char encode(int);
    Code:
       0: aload_0
       1: getfield      #1                  // Field chars:[C
       4: iload_1
       5: caload
       6: ireturn

  boolean isValidPaddingStartPosition(int);
    Code:
       0: aload_0
       1: getfield      #28                 // Field validPadding:[Z
       4: iload_1
       5: aload_0
       6: getfield      #22                 // Field charsPerChunk:I
       9: irem
      10: baload
      11: ireturn

  boolean canDecode(char);
    Code:
       0: iload_1
       1: bipush        127
       3: if_icmpgt     20
       6: aload_0
       7: getfield      #25                 // Field decodabet:[B
      10: iload_1
      11: baload
      12: iconst_m1
      13: if_icmpeq     20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ireturn

  int decode(char) throws com.google.common.io.BaseEncoding$DecodingException;
    Code:
       0: iload_1
       1: bipush        127
       3: if_icmple     36
       6: new           #40                 // class com/google/common/io/BaseEncoding$DecodingException
       9: dup
      10: new           #14                 // class java/lang/StringBuilder
      13: dup
      14: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
      17: ldc           #41                 // String Unrecognized character: 0x
      19: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: iload_1
      23: invokestatic  #42                 // Method java/lang/Integer.toHexString:(I)Ljava/lang/String;
      26: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      32: invokespecial #43                 // Method com/google/common/io/BaseEncoding$DecodingException."<init>":(Ljava/lang/String;)V
      35: athrow
      36: aload_0
      37: getfield      #25                 // Field decodabet:[B
      40: iload_1
      41: baload
      42: istore_2
      43: iload_2
      44: iconst_m1
      45: if_icmpne     117
      48: iload_1
      49: bipush        32
      51: if_icmple     60
      54: iload_1
      55: bipush        127
      57: if_icmpne     90
      60: new           #40                 // class com/google/common/io/BaseEncoding$DecodingException
      63: dup
      64: new           #14                 // class java/lang/StringBuilder
      67: dup
      68: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
      71: ldc           #41                 // String Unrecognized character: 0x
      73: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      76: iload_1
      77: invokestatic  #42                 // Method java/lang/Integer.toHexString:(I)Ljava/lang/String;
      80: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      83: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      86: invokespecial #43                 // Method com/google/common/io/BaseEncoding$DecodingException."<init>":(Ljava/lang/String;)V
      89: athrow
      90: new           #40                 // class com/google/common/io/BaseEncoding$DecodingException
      93: dup
      94: new           #14                 // class java/lang/StringBuilder
      97: dup
      98: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
     101: ldc           #44                 // String Unrecognized character:
     103: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     106: iload_1
     107: invokevirtual #45                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     110: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     113: invokespecial #43                 // Method com/google/common/io/BaseEncoding$DecodingException."<init>":(Ljava/lang/String;)V
     116: athrow
     117: iload_2
     118: ireturn

  private boolean hasLowerCase();
    Code:
       0: aload_0
       1: getfield      #1                  // Field chars:[C
       4: astore_1
       5: aload_1
       6: arraylength
       7: istore_2
       8: iconst_0
       9: istore_3
      10: iload_3
      11: iload_2
      12: if_icmpge     36
      15: aload_1
      16: iload_3
      17: caload
      18: istore        4
      20: iload         4
      22: invokestatic  #46                 // Method com/google/common/base/Ascii.isLowerCase:(C)Z
      25: ifeq          30
      28: iconst_1
      29: ireturn
      30: iinc          3, 1
      33: goto          10
      36: iconst_0
      37: ireturn

  private boolean hasUpperCase();
    Code:
       0: aload_0
       1: getfield      #1                  // Field chars:[C
       4: astore_1
       5: aload_1
       6: arraylength
       7: istore_2
       8: iconst_0
       9: istore_3
      10: iload_3
      11: iload_2
      12: if_icmpge     36
      15: aload_1
      16: iload_3
      17: caload
      18: istore        4
      20: iload         4
      22: invokestatic  #47                 // Method com/google/common/base/Ascii.isUpperCase:(C)Z
      25: ifeq          30
      28: iconst_1
      29: ireturn
      30: iinc          3, 1
      33: goto          10
      36: iconst_0
      37: ireturn

  com.google.common.io.BaseEncoding$Alphabet upperCase();
    Code:
       0: aload_0
       1: invokespecial #48                 // Method hasLowerCase:()Z
       4: ifne          9
       7: aload_0
       8: areturn
       9: aload_0
      10: invokespecial #49                 // Method hasUpperCase:()Z
      13: ifne          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ldc           #50                 // String Cannot call upperCase() on a mixed-case alphabet
      23: invokestatic  #51                 // Method com/google/common/base/Preconditions.checkState:(ZLjava/lang/Object;)V
      26: aload_0
      27: getfield      #1                  // Field chars:[C
      30: arraylength
      31: newarray       char
      33: astore_1
      34: iconst_0
      35: istore_2
      36: iload_2
      37: aload_0
      38: getfield      #1                  // Field chars:[C
      41: arraylength
      42: if_icmpge     63
      45: aload_1
      46: iload_2
      47: aload_0
      48: getfield      #1                  // Field chars:[C
      51: iload_2
      52: caload
      53: invokestatic  #52                 // Method com/google/common/base/Ascii.toUpperCase:(C)C
      56: castore
      57: iinc          2, 1
      60: goto          36
      63: new           #38                 // class com/google/common/io/BaseEncoding$Alphabet
      66: dup
      67: new           #14                 // class java/lang/StringBuilder
      70: dup
      71: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
      74: aload_0
      75: getfield      #7                  // Field name:Ljava/lang/String;
      78: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      81: ldc           #53                 // String .upperCase()
      83: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      86: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      89: aload_1
      90: invokespecial #54                 // Method "<init>":(Ljava/lang/String;[C)V
      93: astore_2
      94: aload_0
      95: getfield      #29                 // Field ignoreCase:Z
      98: ifeq          108
     101: aload_2
     102: invokevirtual #55                 // Method ignoreCase:()Lcom/google/common/io/BaseEncoding$Alphabet;
     105: goto          109
     108: aload_2
     109: areturn

  com.google.common.io.BaseEncoding$Alphabet lowerCase();
    Code:
       0: aload_0
       1: invokespecial #49                 // Method hasUpperCase:()Z
       4: ifne          9
       7: aload_0
       8: areturn
       9: aload_0
      10: invokespecial #48                 // Method hasLowerCase:()Z
      13: ifne          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ldc           #56                 // String Cannot call lowerCase() on a mixed-case alphabet
      23: invokestatic  #51                 // Method com/google/common/base/Preconditions.checkState:(ZLjava/lang/Object;)V
      26: aload_0
      27: getfield      #1                  // Field chars:[C
      30: arraylength
      31: newarray       char
      33: astore_1
      34: iconst_0
      35: istore_2
      36: iload_2
      37: aload_0
      38: getfield      #1                  // Field chars:[C
      41: arraylength
      42: if_icmpge     63
      45: aload_1
      46: iload_2
      47: aload_0
      48: getfield      #1                  // Field chars:[C
      51: iload_2
      52: caload
      53: invokestatic  #57                 // Method com/google/common/base/Ascii.toLowerCase:(C)C
      56: castore
      57: iinc          2, 1
      60: goto          36
      63: new           #38                 // class com/google/common/io/BaseEncoding$Alphabet
      66: dup
      67: new           #14                 // class java/lang/StringBuilder
      70: dup
      71: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
      74: aload_0
      75: getfield      #7                  // Field name:Ljava/lang/String;
      78: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      81: ldc           #58                 // String .lowerCase()
      83: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      86: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      89: aload_1
      90: invokespecial #54                 // Method "<init>":(Ljava/lang/String;[C)V
      93: astore_2
      94: aload_0
      95: getfield      #29                 // Field ignoreCase:Z
      98: ifeq          108
     101: aload_2
     102: invokevirtual #55                 // Method ignoreCase:()Lcom/google/common/io/BaseEncoding$Alphabet;
     105: goto          109
     108: aload_2
     109: areturn

  public boolean matches(char);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #25                 // Field decodabet:[B
       5: arraylength
       6: if_icmpge     23
       9: aload_0
      10: getfield      #25                 // Field decodabet:[B
      13: iload_1
      14: baload
      15: iconst_m1
      16: if_icmpeq     23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #7                  // Field name:Ljava/lang/String;
       4: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #38                 // class com/google/common/io/BaseEncoding$Alphabet
       4: ifeq          43
       7: aload_1
       8: checkcast     #38                 // class com/google/common/io/BaseEncoding$Alphabet
      11: astore_2
      12: aload_0
      13: getfield      #29                 // Field ignoreCase:Z
      16: aload_2
      17: getfield      #29                 // Field ignoreCase:Z
      20: if_icmpne     41
      23: aload_0
      24: getfield      #1                  // Field chars:[C
      27: aload_2
      28: getfield      #1                  // Field chars:[C
      31: invokestatic  #59                 // Method java/util/Arrays.equals:([C[C)Z
      34: ifeq          41
      37: iconst_1
      38: goto          42
      41: iconst_0
      42: ireturn
      43: iconst_0
      44: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #1                  // Field chars:[C
       4: invokestatic  #60                 // Method java/util/Arrays.hashCode:([C)I
       7: aload_0
       8: getfield      #29                 // Field ignoreCase:Z
      11: ifeq          20
      14: sipush        1231
      17: goto          23
      20: sipush        1237
      23: iadd
      24: ireturn

  static char[] access$000(com.google.common.io.BaseEncoding$Alphabet);
    Code:
       0: aload_0
       1: getfield      #1                  // Field chars:[C
       4: areturn
}

Compiled from "DataQueueCommand.java"
public class org.apache.dubbo.rpc.protocol.tri.command.DataQueueCommand extends org.apache.dubbo.rpc.protocol.tri.command.StreamQueueCommand {
  private final byte[] data;

  private final int compressFlag;

  private final boolean endStream;

  private org.apache.dubbo.rpc.protocol.tri.command.DataQueueCommand(org.apache.dubbo.rpc.protocol.tri.stream.TripleStreamChannelFuture, byte[], int, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method org/apache/dubbo/rpc/protocol/tri/command/StreamQueueCommand."<init>":(Lorg/apache/dubbo/rpc/protocol/tri/stream/TripleStreamChannelFuture;)V
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field data:[B
      10: aload_0
      11: iload_3
      12: putfield      #3                  // Field compressFlag:I
      15: aload_0
      16: iload         4
      18: putfield      #4                  // Field endStream:Z
      21: return

  public static org.apache.dubbo.rpc.protocol.tri.command.DataQueueCommand create(org.apache.dubbo.rpc.protocol.tri.stream.TripleStreamChannelFuture, byte[], boolean, int);
    Code:
       0: new           #5                  // class org/apache/dubbo/rpc/protocol/tri/command/DataQueueCommand
       3: dup
       4: aload_0
       5: aload_1
       6: iload_3
       7: iload_2
       8: invokespecial #6                  // Method "<init>":(Lorg/apache/dubbo/rpc/protocol/tri/stream/TripleStreamChannelFuture;[BIZ)V
      11: areturn

  public void doSend(io.netty.channel.ChannelHandlerContext, io.netty.channel.ChannelPromise);
    Code:
       0: aload_0
       1: getfield      #2                  // Field data:[B
       4: ifnonnull     29
       7: aload_1
       8: new           #7                  // class io/netty/handler/codec/http2/DefaultHttp2DataFrame
      11: dup
      12: aload_0
      13: getfield      #4                  // Field endStream:Z
      16: invokespecial #8                  // Method io/netty/handler/codec/http2/DefaultHttp2DataFrame."<init>":(Z)V
      19: aload_2
      20: invokeinterface #9,  3            // InterfaceMethod io/netty/channel/ChannelHandlerContext.write:(Ljava/lang/Object;Lio/netty/channel/ChannelPromise;)Lio/netty/channel/ChannelFuture;
      25: pop
      26: goto          89
      29: aload_1
      30: invokeinterface #10,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.alloc:()Lio/netty/buffer/ByteBufAllocator;
      35: invokeinterface #11,  1           // InterfaceMethod io/netty/buffer/ByteBufAllocator.buffer:()Lio/netty/buffer/ByteBuf;
      40: astore_3
      41: aload_3
      42: aload_0
      43: getfield      #3                  // Field compressFlag:I
      46: invokevirtual #12                 // Method io/netty/buffer/ByteBuf.writeByte:(I)Lio/netty/buffer/ByteBuf;
      49: pop
      50: aload_3
      51: aload_0
      52: getfield      #2                  // Field data:[B
      55: arraylength
      56: invokevirtual #13                 // Method io/netty/buffer/ByteBuf.writeInt:(I)Lio/netty/buffer/ByteBuf;
      59: pop
      60: aload_3
      61: aload_0
      62: getfield      #2                  // Field data:[B
      65: invokevirtual #14                 // Method io/netty/buffer/ByteBuf.writeBytes:([B)Lio/netty/buffer/ByteBuf;
      68: pop
      69: aload_1
      70: new           #7                  // class io/netty/handler/codec/http2/DefaultHttp2DataFrame
      73: dup
      74: aload_3
      75: aload_0
      76: getfield      #4                  // Field endStream:Z
      79: invokespecial #15                 // Method io/netty/handler/codec/http2/DefaultHttp2DataFrame."<init>":(Lio/netty/buffer/ByteBuf;Z)V
      82: aload_2
      83: invokeinterface #9,  3            // InterfaceMethod io/netty/channel/ChannelHandlerContext.write:(Ljava/lang/Object;Lio/netty/channel/ChannelPromise;)Lio/netty/channel/ChannelFuture;
      88: pop
      89: return

  public byte[] getData();
    Code:
       0: aload_0
       1: getfield      #2                  // Field data:[B
       4: areturn

  public boolean isEndStream();
    Code:
       0: aload_0
       1: getfield      #4                  // Field endStream:Z
       4: ireturn
}

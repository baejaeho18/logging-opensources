Compiled from "ChunkOutputStream.java"
public class org.apache.dubbo.rpc.protocol.rest.netty.ChunkOutputStream extends java.io.OutputStream {
  final io.netty.buffer.ByteBuf buffer;

  final io.netty.channel.ChannelHandlerContext ctx;

  final org.apache.dubbo.rpc.protocol.rest.netty.NettyHttpResponse response;

  org.apache.dubbo.rpc.protocol.rest.netty.ChunkOutputStream(org.apache.dubbo.rpc.protocol.rest.netty.NettyHttpResponse, io.netty.channel.ChannelHandlerContext, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/io/OutputStream."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field response:Lorg/apache/dubbo/rpc/protocol/rest/netty/NettyHttpResponse;
       9: iload_3
      10: iconst_1
      11: if_icmpge     22
      14: new           #3                  // class java/lang/IllegalArgumentException
      17: dup
      18: invokespecial #4                  // Method java/lang/IllegalArgumentException."<init>":()V
      21: athrow
      22: aload_0
      23: iconst_0
      24: iload_3
      25: invokestatic  #5                  // Method io/netty/buffer/Unpooled.buffer:(II)Lio/netty/buffer/ByteBuf;
      28: putfield      #6                  // Field buffer:Lio/netty/buffer/ByteBuf;
      31: aload_0
      32: aload_2
      33: putfield      #7                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      36: return

  public void write(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #6                  // Field buffer:Lio/netty/buffer/ByteBuf;
       4: invokevirtual #8                  // Method io/netty/buffer/ByteBuf.maxWritableBytes:()I
       7: iconst_1
       8: if_icmpge     15
      11: aload_0
      12: invokevirtual #9                  // Method flush:()V
      15: aload_0
      16: getfield      #6                  // Field buffer:Lio/netty/buffer/ByteBuf;
      19: iload_1
      20: invokevirtual #10                 // Method io/netty/buffer/ByteBuf.writeByte:(I)Lio/netty/buffer/ByteBuf;
      23: pop
      24: return

  public void reset();
    Code:
       0: aload_0
       1: getfield      #2                  // Field response:Lorg/apache/dubbo/rpc/protocol/rest/netty/NettyHttpResponse;
       4: invokevirtual #11                 // Method org/apache/dubbo/rpc/protocol/rest/netty/NettyHttpResponse.isCommitted:()Z
       7: ifeq          18
      10: new           #12                 // class java/lang/IllegalStateException
      13: dup
      14: invokespecial #13                 // Method java/lang/IllegalStateException."<init>":()V
      17: athrow
      18: aload_0
      19: getfield      #6                  // Field buffer:Lio/netty/buffer/ByteBuf;
      22: invokevirtual #14                 // Method io/netty/buffer/ByteBuf.clear:()Lio/netty/buffer/ByteBuf;
      25: pop
      26: return

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method flush:()V
       4: aload_0
       5: invokespecial #15                 // Method java/io/OutputStream.close:()V
       8: return

  public void write(byte[], int, int) throws java.io.IOException;
    Code:
       0: iload_3
       1: istore        4
       3: iload_2
       4: istore        5
       6: aload_0
       7: getfield      #6                  // Field buffer:Lio/netty/buffer/ByteBuf;
      10: invokevirtual #8                  // Method io/netty/buffer/ByteBuf.maxWritableBytes:()I
      13: dup
      14: istore        6
      16: iload         4
      18: if_icmpge     55
      21: aload_0
      22: getfield      #6                  // Field buffer:Lio/netty/buffer/ByteBuf;
      25: aload_1
      26: iload         5
      28: iload         6
      30: invokevirtual #16                 // Method io/netty/buffer/ByteBuf.writeBytes:([BII)Lio/netty/buffer/ByteBuf;
      33: pop
      34: iload         5
      36: iload         6
      38: iadd
      39: istore        5
      41: iload         4
      43: iload         6
      45: isub
      46: istore        4
      48: aload_0
      49: invokevirtual #9                  // Method flush:()V
      52: goto          6
      55: iload         4
      57: ifle          73
      60: aload_0
      61: getfield      #6                  // Field buffer:Lio/netty/buffer/ByteBuf;
      64: aload_1
      65: iload         5
      67: iload         4
      69: invokevirtual #16                 // Method io/netty/buffer/ByteBuf.writeBytes:([BII)Lio/netty/buffer/ByteBuf;
      72: pop
      73: return

  public void flush() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #6                  // Field buffer:Lio/netty/buffer/ByteBuf;
       4: invokevirtual #17                 // Method io/netty/buffer/ByteBuf.readableBytes:()I
       7: istore_1
       8: iload_1
       9: ifne          13
      12: return
      13: aload_0
      14: getfield      #2                  // Field response:Lorg/apache/dubbo/rpc/protocol/rest/netty/NettyHttpResponse;
      17: invokevirtual #11                 // Method org/apache/dubbo/rpc/protocol/rest/netty/NettyHttpResponse.isCommitted:()Z
      20: ifne          30
      23: aload_0
      24: getfield      #2                  // Field response:Lorg/apache/dubbo/rpc/protocol/rest/netty/NettyHttpResponse;
      27: invokevirtual #18                 // Method org/apache/dubbo/rpc/protocol/rest/netty/NettyHttpResponse.prepareChunkStream:()V
      30: aload_0
      31: getfield      #7                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      34: new           #19                 // class io/netty/handler/codec/http/DefaultHttpContent
      37: dup
      38: aload_0
      39: getfield      #6                  // Field buffer:Lio/netty/buffer/ByteBuf;
      42: invokevirtual #20                 // Method io/netty/buffer/ByteBuf.copy:()Lio/netty/buffer/ByteBuf;
      45: invokespecial #21                 // Method io/netty/handler/codec/http/DefaultHttpContent."<init>":(Lio/netty/buffer/ByteBuf;)V
      48: invokeinterface #22,  2           // InterfaceMethod io/netty/channel/ChannelHandlerContext.writeAndFlush:(Ljava/lang/Object;)Lio/netty/channel/ChannelFuture;
      53: pop
      54: aload_0
      55: getfield      #6                  // Field buffer:Lio/netty/buffer/ByteBuf;
      58: invokevirtual #14                 // Method io/netty/buffer/ByteBuf.clear:()Lio/netty/buffer/ByteBuf;
      61: pop
      62: aload_0
      63: invokespecial #23                 // Method java/io/OutputStream.flush:()V
      66: return
}

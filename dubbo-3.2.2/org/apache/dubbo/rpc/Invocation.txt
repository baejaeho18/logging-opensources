Compiled from "Invocation.java"
public interface org.apache.dubbo.rpc.Invocation {
  public abstract java.lang.String getTargetServiceUniqueName();

  public abstract java.lang.String getProtocolServiceKey();

  public abstract java.lang.String getMethodName();

  public abstract java.lang.String getServiceName();

  public abstract java.lang.Class<?>[] getParameterTypes();

  public default java.lang.String[] getCompatibleParamSignatures();
    Code:
       0: aload_0
       1: invokeinterface #1,  1            // InterfaceMethod getParameterTypes:()[Ljava/lang/Class;
       6: invokestatic  #2                  // InterfaceMethod java/util/stream/Stream.of:([Ljava/lang/Object;)Ljava/util/stream/Stream;
       9: invokedynamic #3,  0              // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      14: invokeinterface #4,  2            // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      19: invokedynamic #5,  0              // InvokeDynamic #1:apply:()Ljava/util/function/IntFunction;
      24: invokeinterface #6,  2            // InterfaceMethod java/util/stream/Stream.toArray:(Ljava/util/function/IntFunction;)[Ljava/lang/Object;
      29: checkcast     #7                  // class "[Ljava/lang/String;"
      32: areturn

  public abstract java.lang.Object[] getArguments();

  public abstract java.util.Map<java.lang.String, java.lang.String> getAttachments();

  public abstract java.util.Map<java.lang.String, java.lang.Object> getObjectAttachments();

  public abstract java.util.Map<java.lang.String, java.lang.Object> copyObjectAttachments();

  public abstract void foreachAttachment(java.util.function.Consumer<java.util.Map$Entry<java.lang.String, java.lang.Object>>);

  public abstract void setAttachment(java.lang.String, java.lang.String);

  public abstract void setAttachment(java.lang.String, java.lang.Object);

  public abstract void setObjectAttachment(java.lang.String, java.lang.Object);

  public abstract void setAttachmentIfAbsent(java.lang.String, java.lang.String);

  public abstract void setAttachmentIfAbsent(java.lang.String, java.lang.Object);

  public abstract void setObjectAttachmentIfAbsent(java.lang.String, java.lang.Object);

  public abstract java.lang.String getAttachment(java.lang.String);

  public abstract java.lang.Object getObjectAttachment(java.lang.String);

  public default java.lang.Object getObjectAttachmentWithoutConvert(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #8,  2            // InterfaceMethod getObjectAttachment:(Ljava/lang/String;)Ljava/lang/Object;
       7: areturn

  public abstract java.lang.String getAttachment(java.lang.String, java.lang.String);

  public abstract java.lang.Object getObjectAttachment(java.lang.String, java.lang.Object);

  public abstract org.apache.dubbo.rpc.Invoker<?> getInvoker();

  public abstract void setServiceModel(org.apache.dubbo.rpc.model.ServiceModel);

  public abstract org.apache.dubbo.rpc.model.ServiceModel getServiceModel();

  public default org.apache.dubbo.rpc.model.ModuleModel getModuleModel();
    Code:
       0: aload_0
       1: invokeinterface #9,  1            // InterfaceMethod getServiceModel:()Lorg/apache/dubbo/rpc/model/ServiceModel;
       6: ifnonnull     13
       9: aconst_null
      10: goto          22
      13: aload_0
      14: invokeinterface #9,  1            // InterfaceMethod getServiceModel:()Lorg/apache/dubbo/rpc/model/ServiceModel;
      19: invokevirtual #10                 // Method org/apache/dubbo/rpc/model/ServiceModel.getModuleModel:()Lorg/apache/dubbo/rpc/model/ModuleModel;
      22: invokestatic  #11                 // Method org/apache/dubbo/rpc/model/ScopeModelUtil.getModuleModel:(Lorg/apache/dubbo/rpc/model/ScopeModel;)Lorg/apache/dubbo/rpc/model/ModuleModel;
      25: areturn

  public abstract java.lang.Object put(java.lang.Object, java.lang.Object);

  public abstract java.lang.Object get(java.lang.Object);

  public abstract java.util.Map<java.lang.Object, java.lang.Object> getAttributes();

  public abstract void addInvokedInvoker(org.apache.dubbo.rpc.Invoker<?>);

  public abstract java.util.List<org.apache.dubbo.rpc.Invoker<?>> getInvokedInvokers();

  private static java.lang.String[] lambda$getCompatibleParamSignatures$0(int);
    Code:
       0: iload_0
       1: anewarray     #12                 // class java/lang/String
       4: areturn
}

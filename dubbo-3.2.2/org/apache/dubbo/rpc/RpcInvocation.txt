Compiled from "RpcInvocation.java"
public class org.apache.dubbo.rpc.RpcInvocation implements org.apache.dubbo.rpc.Invocation,java.io.Serializable {
  private static final long serialVersionUID;

  private java.lang.String targetServiceUniqueName;

  private java.lang.String protocolServiceKey;

  private org.apache.dubbo.rpc.model.ServiceModel serviceModel;

  private java.lang.String methodName;

  private java.lang.String interfaceName;

  private transient java.lang.Class<?>[] parameterTypes;

  private java.lang.String parameterTypesDesc;

  private java.lang.String[] compatibleParamSignatures;

  private java.lang.Object[] arguments;

  private java.util.Map<java.lang.String, java.lang.Object> attachments;

  private final transient java.util.concurrent.locks.Lock attachmentLock;

  private transient java.util.Map<java.lang.Object, java.lang.Object> attributes;

  private transient org.apache.dubbo.rpc.Invoker<?> invoker;

  private transient java.lang.Class<?> returnType;

  private transient java.lang.reflect.Type[] returnTypes;

  private transient org.apache.dubbo.rpc.InvokeMode invokeMode;

  private transient java.util.List<org.apache.dubbo.rpc.Invoker<?>> invokedInvokers;

  public org.apache.dubbo.rpc.RpcInvocation();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #4                  // class java/util/concurrent/locks/ReentrantLock
       8: dup
       9: invokespecial #5                  // Method java/util/concurrent/locks/ReentrantLock."<init>":()V
      12: putfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      15: aload_0
      16: new           #7                  // class java/util/HashMap
      19: dup
      20: invokespecial #8                  // Method java/util/HashMap."<init>":()V
      23: invokestatic  #9                  // Method java/util/Collections.synchronizedMap:(Ljava/util/Map;)Ljava/util/Map;
      26: putfield      #10                 // Field attributes:Ljava/util/Map;
      29: aload_0
      30: new           #11                 // class java/util/LinkedList
      33: dup
      34: invokespecial #12                 // Method java/util/LinkedList."<init>":()V
      37: putfield      #13                 // Field invokedInvokers:Ljava/util/List;
      40: return

  public org.apache.dubbo.rpc.RpcInvocation(org.apache.dubbo.rpc.Invocation);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokespecial #14                 // Method "<init>":(Lorg/apache/dubbo/rpc/Invocation;Lorg/apache/dubbo/rpc/Invoker;)V
       6: return

  public org.apache.dubbo.rpc.RpcInvocation(org.apache.dubbo.rpc.Invocation, org.apache.dubbo.rpc.Invoker<?>);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #15,  1           // InterfaceMethod org/apache/dubbo/rpc/Invocation.getTargetServiceUniqueName:()Ljava/lang/String;
       7: aload_1
       8: invokeinterface #16,  1           // InterfaceMethod org/apache/dubbo/rpc/Invocation.getServiceModel:()Lorg/apache/dubbo/rpc/model/ServiceModel;
      13: aload_1
      14: invokeinterface #17,  1           // InterfaceMethod org/apache/dubbo/rpc/Invocation.getMethodName:()Ljava/lang/String;
      19: aload_1
      20: invokeinterface #18,  1           // InterfaceMethod org/apache/dubbo/rpc/Invocation.getServiceName:()Ljava/lang/String;
      25: aload_1
      26: invokeinterface #19,  1           // InterfaceMethod org/apache/dubbo/rpc/Invocation.getProtocolServiceKey:()Ljava/lang/String;
      31: aload_1
      32: invokeinterface #20,  1           // InterfaceMethod org/apache/dubbo/rpc/Invocation.getParameterTypes:()[Ljava/lang/Class;
      37: aload_1
      38: invokeinterface #21,  1           // InterfaceMethod org/apache/dubbo/rpc/Invocation.getArguments:()[Ljava/lang/Object;
      43: aload_1
      44: invokeinterface #22,  1           // InterfaceMethod org/apache/dubbo/rpc/Invocation.copyObjectAttachments:()Ljava/util/Map;
      49: aload_1
      50: invokeinterface #23,  1           // InterfaceMethod org/apache/dubbo/rpc/Invocation.getInvoker:()Lorg/apache/dubbo/rpc/Invoker;
      55: aload_1
      56: invokeinterface #24,  1           // InterfaceMethod org/apache/dubbo/rpc/Invocation.getAttributes:()Ljava/util/Map;
      61: aload_1
      62: instanceof    #25                 // class org/apache/dubbo/rpc/RpcInvocation
      65: ifeq          78
      68: aload_1
      69: checkcast     #25                 // class org/apache/dubbo/rpc/RpcInvocation
      72: invokevirtual #26                 // Method getInvokeMode:()Lorg/apache/dubbo/rpc/InvokeMode;
      75: goto          79
      78: aconst_null
      79: invokespecial #27                 // Method "<init>":(Ljava/lang/String;Lorg/apache/dubbo/rpc/model/ServiceModel;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Class;[Ljava/lang/Object;Ljava/util/Map;Lorg/apache/dubbo/rpc/Invoker;Ljava/util/Map;Lorg/apache/dubbo/rpc/InvokeMode;)V
      82: aload_2
      83: ifnull        225
      86: aload_2
      87: invokeinterface #28,  1           // InterfaceMethod org/apache/dubbo/rpc/Invoker.getUrl:()Lorg/apache/dubbo/common/URL;
      92: astore_3
      93: aload_0
      94: ldc           #29                 // String path
      96: aload_3
      97: invokevirtual #30                 // Method org/apache/dubbo/common/URL.getPath:()Ljava/lang/String;
     100: invokevirtual #31                 // Method setAttachment:(Ljava/lang/String;Ljava/lang/String;)V
     103: aload_3
     104: ldc           #32                 // String interface
     106: invokevirtual #33                 // Method org/apache/dubbo/common/URL.hasParameter:(Ljava/lang/String;)Z
     109: ifeq          124
     112: aload_0
     113: ldc           #32                 // String interface
     115: aload_3
     116: ldc           #32                 // String interface
     118: invokevirtual #34                 // Method org/apache/dubbo/common/URL.getParameter:(Ljava/lang/String;)Ljava/lang/String;
     121: invokevirtual #31                 // Method setAttachment:(Ljava/lang/String;Ljava/lang/String;)V
     124: aload_3
     125: ldc           #35                 // String group
     127: invokevirtual #33                 // Method org/apache/dubbo/common/URL.hasParameter:(Ljava/lang/String;)Z
     130: ifeq          143
     133: aload_0
     134: ldc           #35                 // String group
     136: aload_3
     137: invokevirtual #36                 // Method org/apache/dubbo/common/URL.getGroup:()Ljava/lang/String;
     140: invokevirtual #31                 // Method setAttachment:(Ljava/lang/String;Ljava/lang/String;)V
     143: aload_3
     144: ldc           #37                 // String version
     146: invokevirtual #33                 // Method org/apache/dubbo/common/URL.hasParameter:(Ljava/lang/String;)Z
     149: ifeq          164
     152: aload_0
     153: ldc           #37                 // String version
     155: aload_3
     156: ldc           #38                 // String 0.0.0
     158: invokevirtual #39                 // Method org/apache/dubbo/common/URL.getVersion:(Ljava/lang/String;)Ljava/lang/String;
     161: invokevirtual #31                 // Method setAttachment:(Ljava/lang/String;Ljava/lang/String;)V
     164: aload_3
     165: ldc           #40                 // String timeout
     167: invokevirtual #33                 // Method org/apache/dubbo/common/URL.hasParameter:(Ljava/lang/String;)Z
     170: ifeq          185
     173: aload_0
     174: ldc           #40                 // String timeout
     176: aload_3
     177: ldc           #40                 // String timeout
     179: invokevirtual #34                 // Method org/apache/dubbo/common/URL.getParameter:(Ljava/lang/String;)Ljava/lang/String;
     182: invokevirtual #31                 // Method setAttachment:(Ljava/lang/String;Ljava/lang/String;)V
     185: aload_3
     186: ldc           #41                 // String token
     188: invokevirtual #33                 // Method org/apache/dubbo/common/URL.hasParameter:(Ljava/lang/String;)Z
     191: ifeq          206
     194: aload_0
     195: ldc           #41                 // String token
     197: aload_3
     198: ldc           #41                 // String token
     200: invokevirtual #34                 // Method org/apache/dubbo/common/URL.getParameter:(Ljava/lang/String;)Ljava/lang/String;
     203: invokevirtual #31                 // Method setAttachment:(Ljava/lang/String;Ljava/lang/String;)V
     206: aload_3
     207: ldc           #42                 // String application
     209: invokevirtual #33                 // Method org/apache/dubbo/common/URL.hasParameter:(Ljava/lang/String;)Z
     212: ifeq          225
     215: aload_0
     216: ldc           #42                 // String application
     218: aload_3
     219: invokevirtual #43                 // Method org/apache/dubbo/common/URL.getApplication:()Ljava/lang/String;
     222: invokevirtual #31                 // Method setAttachment:(Ljava/lang/String;Ljava/lang/String;)V
     225: return

  public org.apache.dubbo.rpc.RpcInvocation(org.apache.dubbo.rpc.model.ServiceModel, java.lang.String, java.lang.String, java.lang.String, java.lang.Class<?>[], java.lang.Object[]);
    Code:
       0: aload_0
       1: aconst_null
       2: aload_1
       3: aload_2
       4: aload_3
       5: aload         4
       7: aload         5
       9: aload         6
      11: aconst_null
      12: aconst_null
      13: aconst_null
      14: aconst_null
      15: invokespecial #27                 // Method "<init>":(Ljava/lang/String;Lorg/apache/dubbo/rpc/model/ServiceModel;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Class;[Ljava/lang/Object;Ljava/util/Map;Lorg/apache/dubbo/rpc/Invoker;Ljava/util/Map;Lorg/apache/dubbo/rpc/InvokeMode;)V
      18: return

  public org.apache.dubbo.rpc.RpcInvocation(org.apache.dubbo.rpc.model.ServiceModel, java.lang.reflect.Method, java.lang.String, java.lang.String, java.lang.Object[]);
    Code:
       0: aload_0
       1: aconst_null
       2: aload_1
       3: aload_2
       4: invokevirtual #44                 // Method java/lang/reflect/Method.getName:()Ljava/lang/String;
       7: aload_3
       8: aload         4
      10: aload_2
      11: invokevirtual #45                 // Method java/lang/reflect/Method.getParameterTypes:()[Ljava/lang/Class;
      14: aload         5
      16: aconst_null
      17: aconst_null
      18: aconst_null
      19: aconst_null
      20: invokespecial #27                 // Method "<init>":(Ljava/lang/String;Lorg/apache/dubbo/rpc/model/ServiceModel;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Class;[Ljava/lang/Object;Ljava/util/Map;Lorg/apache/dubbo/rpc/Invoker;Ljava/util/Map;Lorg/apache/dubbo/rpc/InvokeMode;)V
      23: return

  public org.apache.dubbo.rpc.RpcInvocation(java.lang.reflect.Method, java.lang.String, java.lang.String, java.lang.Object[]);
    Code:
       0: aload_0
       1: aconst_null
       2: aconst_null
       3: aload_1
       4: invokevirtual #44                 // Method java/lang/reflect/Method.getName:()Ljava/lang/String;
       7: aload_2
       8: aload_3
       9: aload_1
      10: invokevirtual #45                 // Method java/lang/reflect/Method.getParameterTypes:()[Ljava/lang/Class;
      13: aload         4
      15: aconst_null
      16: aconst_null
      17: aconst_null
      18: aconst_null
      19: invokespecial #27                 // Method "<init>":(Ljava/lang/String;Lorg/apache/dubbo/rpc/model/ServiceModel;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Class;[Ljava/lang/Object;Ljava/util/Map;Lorg/apache/dubbo/rpc/Invoker;Ljava/util/Map;Lorg/apache/dubbo/rpc/InvokeMode;)V
      22: return

  public org.apache.dubbo.rpc.RpcInvocation(org.apache.dubbo.rpc.model.ServiceModel, java.lang.reflect.Method, java.lang.String, java.lang.String, java.lang.Object[], java.util.Map<java.lang.String, java.lang.Object>, java.util.Map<java.lang.Object, java.lang.Object>);
    Code:
       0: aload_0
       1: aconst_null
       2: aload_1
       3: aload_2
       4: invokevirtual #44                 // Method java/lang/reflect/Method.getName:()Ljava/lang/String;
       7: aload_3
       8: aload         4
      10: aload_2
      11: invokevirtual #45                 // Method java/lang/reflect/Method.getParameterTypes:()[Ljava/lang/Class;
      14: aload         5
      16: aload         6
      18: aconst_null
      19: aload         7
      21: aconst_null
      22: invokespecial #27                 // Method "<init>":(Ljava/lang/String;Lorg/apache/dubbo/rpc/model/ServiceModel;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Class;[Ljava/lang/Object;Ljava/util/Map;Lorg/apache/dubbo/rpc/Invoker;Ljava/util/Map;Lorg/apache/dubbo/rpc/InvokeMode;)V
      25: return

  public org.apache.dubbo.rpc.RpcInvocation(java.lang.reflect.Method, java.lang.String, java.lang.String, java.lang.Object[], java.util.Map<java.lang.String, java.lang.Object>, java.util.Map<java.lang.Object, java.lang.Object>);
    Code:
       0: aload_0
       1: aconst_null
       2: aconst_null
       3: aload_1
       4: invokevirtual #44                 // Method java/lang/reflect/Method.getName:()Ljava/lang/String;
       7: aload_2
       8: aload_3
       9: aload_1
      10: invokevirtual #45                 // Method java/lang/reflect/Method.getParameterTypes:()[Ljava/lang/Class;
      13: aload         4
      15: aload         5
      17: aconst_null
      18: aload         6
      20: aconst_null
      21: invokespecial #27                 // Method "<init>":(Ljava/lang/String;Lorg/apache/dubbo/rpc/model/ServiceModel;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Class;[Ljava/lang/Object;Ljava/util/Map;Lorg/apache/dubbo/rpc/Invoker;Ljava/util/Map;Lorg/apache/dubbo/rpc/InvokeMode;)V
      24: return

  public org.apache.dubbo.rpc.RpcInvocation(java.lang.String, java.lang.String, java.lang.String, java.lang.Class<?>[], java.lang.Object[]);
    Code:
       0: aload_0
       1: aconst_null
       2: aconst_null
       3: aload_1
       4: aload_2
       5: aload_3
       6: aload         4
       8: aload         5
      10: aconst_null
      11: aconst_null
      12: aconst_null
      13: aconst_null
      14: invokespecial #27                 // Method "<init>":(Ljava/lang/String;Lorg/apache/dubbo/rpc/model/ServiceModel;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Class;[Ljava/lang/Object;Ljava/util/Map;Lorg/apache/dubbo/rpc/Invoker;Ljava/util/Map;Lorg/apache/dubbo/rpc/InvokeMode;)V
      17: return

  public org.apache.dubbo.rpc.RpcInvocation(org.apache.dubbo.rpc.model.ServiceModel, java.lang.String, java.lang.String, java.lang.String, java.lang.Class<?>[], java.lang.Object[], java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: aconst_null
       2: aload_1
       3: aload_2
       4: aload_3
       5: aload         4
       7: aload         5
       9: aload         6
      11: aload         7
      13: aconst_null
      14: aconst_null
      15: aconst_null
      16: invokespecial #27                 // Method "<init>":(Ljava/lang/String;Lorg/apache/dubbo/rpc/model/ServiceModel;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Class;[Ljava/lang/Object;Ljava/util/Map;Lorg/apache/dubbo/rpc/Invoker;Ljava/util/Map;Lorg/apache/dubbo/rpc/InvokeMode;)V
      19: return

  public org.apache.dubbo.rpc.RpcInvocation(java.lang.String, java.lang.String, java.lang.String, java.lang.Class<?>[], java.lang.Object[], java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: aconst_null
       2: aconst_null
       3: aload_1
       4: aload_2
       5: aload_3
       6: aload         4
       8: aload         5
      10: aload         6
      12: aconst_null
      13: aconst_null
      14: aconst_null
      15: invokespecial #27                 // Method "<init>":(Ljava/lang/String;Lorg/apache/dubbo/rpc/model/ServiceModel;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Class;[Ljava/lang/Object;Ljava/util/Map;Lorg/apache/dubbo/rpc/Invoker;Ljava/util/Map;Lorg/apache/dubbo/rpc/InvokeMode;)V
      18: return

  public org.apache.dubbo.rpc.RpcInvocation(java.lang.String, java.lang.String, java.lang.String, java.lang.Class<?>[], java.lang.Object[], java.util.Map<java.lang.String, java.lang.Object>, org.apache.dubbo.rpc.Invoker<?>, java.util.Map<java.lang.Object, java.lang.Object>);
    Code:
       0: aload_0
       1: aconst_null
       2: aconst_null
       3: aload_1
       4: aload_2
       5: aload_3
       6: aload         4
       8: aload         5
      10: aload         6
      12: aload         7
      14: aload         8
      16: aconst_null
      17: invokespecial #27                 // Method "<init>":(Ljava/lang/String;Lorg/apache/dubbo/rpc/model/ServiceModel;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Class;[Ljava/lang/Object;Ljava/util/Map;Lorg/apache/dubbo/rpc/Invoker;Ljava/util/Map;Lorg/apache/dubbo/rpc/InvokeMode;)V
      20: return

  public org.apache.dubbo.rpc.RpcInvocation(org.apache.dubbo.rpc.model.ServiceModel, java.lang.String, java.lang.String, java.lang.String, java.lang.Class<?>[], java.lang.Object[], java.util.Map<java.lang.String, java.lang.Object>, org.apache.dubbo.rpc.Invoker<?>, java.util.Map<java.lang.Object, java.lang.Object>);
    Code:
       0: aload_0
       1: aconst_null
       2: aload_1
       3: aload_2
       4: aload_3
       5: aload         4
       7: aload         5
       9: aload         6
      11: aload         7
      13: aload         8
      15: aload         9
      17: aconst_null
      18: invokespecial #27                 // Method "<init>":(Ljava/lang/String;Lorg/apache/dubbo/rpc/model/ServiceModel;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Class;[Ljava/lang/Object;Ljava/util/Map;Lorg/apache/dubbo/rpc/Invoker;Ljava/util/Map;Lorg/apache/dubbo/rpc/InvokeMode;)V
      21: return

  public org.apache.dubbo.rpc.RpcInvocation(org.apache.dubbo.rpc.model.ServiceModel, java.lang.String, java.lang.String, java.lang.String, java.lang.Class<?>[], java.lang.Object[], java.util.Map<java.lang.String, java.lang.Object>, org.apache.dubbo.rpc.Invoker<?>, java.util.Map<java.lang.Object, java.lang.Object>, org.apache.dubbo.rpc.InvokeMode);
    Code:
       0: aload_0
       1: aconst_null
       2: aload_1
       3: aload_2
       4: aload_3
       5: aload         4
       7: aload         5
       9: aload         6
      11: aload         7
      13: aload         8
      15: aload         9
      17: aload         10
      19: invokespecial #27                 // Method "<init>":(Ljava/lang/String;Lorg/apache/dubbo/rpc/model/ServiceModel;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Class;[Ljava/lang/Object;Ljava/util/Map;Lorg/apache/dubbo/rpc/Invoker;Ljava/util/Map;Lorg/apache/dubbo/rpc/InvokeMode;)V
      22: return

  public org.apache.dubbo.rpc.RpcInvocation(java.lang.String, org.apache.dubbo.rpc.model.ServiceModel, java.lang.String, java.lang.String, java.lang.String, java.lang.Class<?>[], java.lang.Object[], java.util.Map<java.lang.String, java.lang.Object>, org.apache.dubbo.rpc.Invoker<?>, java.util.Map<java.lang.Object, java.lang.Object>, org.apache.dubbo.rpc.InvokeMode);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #4                  // class java/util/concurrent/locks/ReentrantLock
       8: dup
       9: invokespecial #5                  // Method java/util/concurrent/locks/ReentrantLock."<init>":()V
      12: putfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      15: aload_0
      16: new           #7                  // class java/util/HashMap
      19: dup
      20: invokespecial #8                  // Method java/util/HashMap."<init>":()V
      23: invokestatic  #9                  // Method java/util/Collections.synchronizedMap:(Ljava/util/Map;)Ljava/util/Map;
      26: putfield      #10                 // Field attributes:Ljava/util/Map;
      29: aload_0
      30: new           #11                 // class java/util/LinkedList
      33: dup
      34: invokespecial #12                 // Method java/util/LinkedList."<init>":()V
      37: putfield      #13                 // Field invokedInvokers:Ljava/util/List;
      40: aload_0
      41: aload_1
      42: putfield      #46                 // Field targetServiceUniqueName:Ljava/lang/String;
      45: aload_0
      46: aload_2
      47: putfield      #47                 // Field serviceModel:Lorg/apache/dubbo/rpc/model/ServiceModel;
      50: aload_0
      51: aload_3
      52: putfield      #48                 // Field methodName:Ljava/lang/String;
      55: aload_0
      56: aload         4
      58: putfield      #49                 // Field interfaceName:Ljava/lang/String;
      61: aload_0
      62: aload         5
      64: putfield      #50                 // Field protocolServiceKey:Ljava/lang/String;
      67: aload_0
      68: aload         6
      70: ifnonnull     80
      73: iconst_0
      74: anewarray     #51                 // class java/lang/Class
      77: goto          82
      80: aload         6
      82: putfield      #52                 // Field parameterTypes:[Ljava/lang/Class;
      85: aload_0
      86: aload         7
      88: ifnonnull     98
      91: iconst_0
      92: anewarray     #53                 // class java/lang/Object
      95: goto          100
      98: aload         7
     100: putfield      #54                 // Field arguments:[Ljava/lang/Object;
     103: aload_0
     104: aload         8
     106: ifnonnull     119
     109: new           #7                  // class java/util/HashMap
     112: dup
     113: invokespecial #8                  // Method java/util/HashMap."<init>":()V
     116: goto          121
     119: aload         8
     121: putfield      #55                 // Field attachments:Ljava/util/Map;
     124: aload_0
     125: aload         10
     127: ifnonnull     143
     130: new           #7                  // class java/util/HashMap
     133: dup
     134: invokespecial #8                  // Method java/util/HashMap."<init>":()V
     137: invokestatic  #9                  // Method java/util/Collections.synchronizedMap:(Ljava/util/Map;)Ljava/util/Map;
     140: goto          145
     143: aload         10
     145: putfield      #10                 // Field attributes:Ljava/util/Map;
     148: aload_0
     149: aload         9
     151: putfield      #56                 // Field invoker:Lorg/apache/dubbo/rpc/Invoker;
     154: aload_0
     155: invokespecial #57                 // Method initParameterDesc:()V
     158: aload_0
     159: aload         11
     161: putfield      #58                 // Field invokeMode:Lorg/apache/dubbo/rpc/InvokeMode;
     164: return

  private void initParameterDesc();
    Code:
       0: new           #59                 // class java/util/concurrent/atomic/AtomicReference
       3: dup
       4: invokespecial #60                 // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #47                 // Field serviceModel:Lorg/apache/dubbo/rpc/model/ServiceModel;
      12: ifnull        29
      15: aload_1
      16: aload_0
      17: getfield      #47                 // Field serviceModel:Lorg/apache/dubbo/rpc/model/ServiceModel;
      20: invokevirtual #61                 // Method org/apache/dubbo/rpc/model/ServiceModel.getServiceModel:()Lorg/apache/dubbo/rpc/model/ServiceDescriptor;
      23: invokevirtual #62                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      26: goto          93
      29: aload_0
      30: getfield      #49                 // Field interfaceName:Ljava/lang/String;
      33: invokestatic  #63                 // Method org/apache/dubbo/common/utils/StringUtils.isNotEmpty:(Ljava/lang/String;)Z
      36: ifeq          93
      39: invokestatic  #64                 // Method org/apache/dubbo/rpc/model/FrameworkModel.defaultModel:()Lorg/apache/dubbo/rpc/model/FrameworkModel;
      42: invokevirtual #65                 // Method org/apache/dubbo/rpc/model/FrameworkModel.getServiceRepository:()Lorg/apache/dubbo/rpc/model/FrameworkServiceRepository;
      45: invokevirtual #66                 // Method org/apache/dubbo/rpc/model/FrameworkServiceRepository.allProviderModels:()Ljava/util/List;
      48: invokeinterface #67,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      53: invokedynamic #68,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      58: invokeinterface #69,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      63: aload_0
      64: invokedynamic #70,  0             // InvokeDynamic #1:test:(Lorg/apache/dubbo/rpc/RpcInvocation;)Ljava/util/function/Predicate;
      69: invokeinterface #71,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      74: invokeinterface #72,  1           // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      79: aload_1
      80: dup
      81: invokevirtual #73                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      84: pop
      85: invokedynamic #74,  0             // InvokeDynamic #2:accept:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/util/function/Consumer;
      90: invokevirtual #75                 // Method java/util/Optional.ifPresent:(Ljava/util/function/Consumer;)V
      93: aload_1
      94: invokevirtual #76                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      97: ifnull        165
     100: aload_1
     101: invokevirtual #76                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
     104: checkcast     #77                 // class org/apache/dubbo/rpc/model/ServiceDescriptor
     107: aload_0
     108: getfield      #48                 // Field methodName:Ljava/lang/String;
     111: aload_0
     112: getfield      #52                 // Field parameterTypes:[Ljava/lang/Class;
     115: invokeinterface #78,  3           // InterfaceMethod org/apache/dubbo/rpc/model/ServiceDescriptor.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Lorg/apache/dubbo/rpc/model/MethodDescriptor;
     120: astore_2
     121: aload_2
     122: ifnull        165
     125: aload_0
     126: aload_2
     127: invokeinterface #79,  1           // InterfaceMethod org/apache/dubbo/rpc/model/MethodDescriptor.getParamDesc:()Ljava/lang/String;
     132: putfield      #80                 // Field parameterTypesDesc:Ljava/lang/String;
     135: aload_0
     136: aload_2
     137: invokeinterface #81,  1           // InterfaceMethod org/apache/dubbo/rpc/model/MethodDescriptor.getCompatibleParamSignatures:()[Ljava/lang/String;
     142: putfield      #82                 // Field compatibleParamSignatures:[Ljava/lang/String;
     145: aload_0
     146: aload_2
     147: invokeinterface #83,  1           // InterfaceMethod org/apache/dubbo/rpc/model/MethodDescriptor.getReturnTypes:()[Ljava/lang/reflect/Type;
     152: putfield      #84                 // Field returnTypes:[Ljava/lang/reflect/Type;
     155: aload_0
     156: aload_2
     157: invokeinterface #85,  1           // InterfaceMethod org/apache/dubbo/rpc/model/MethodDescriptor.getReturnClass:()Ljava/lang/Class;
     162: putfield      #86                 // Field returnType:Ljava/lang/Class;
     165: aload_0
     166: getfield      #80                 // Field parameterTypesDesc:Ljava/lang/String;
     169: ifnonnull     233
     172: aload_0
     173: aload_0
     174: invokevirtual #87                 // Method getParameterTypes:()[Ljava/lang/Class;
     177: invokestatic  #88                 // Method org/apache/dubbo/common/utils/ReflectUtils.getDesc:([Ljava/lang/Class;)Ljava/lang/String;
     180: putfield      #80                 // Field parameterTypesDesc:Ljava/lang/String;
     183: aload_0
     184: aload_0
     185: getfield      #52                 // Field parameterTypes:[Ljava/lang/Class;
     188: invokestatic  #89                 // InterfaceMethod java/util/stream/Stream.of:([Ljava/lang/Object;)Ljava/util/stream/Stream;
     191: invokedynamic #90,  0             // InvokeDynamic #3:apply:()Ljava/util/function/Function;
     196: invokeinterface #69,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
     201: invokedynamic #91,  0             // InvokeDynamic #4:apply:()Ljava/util/function/IntFunction;
     206: invokeinterface #92,  2           // InterfaceMethod java/util/stream/Stream.toArray:(Ljava/util/function/IntFunction;)[Ljava/lang/Object;
     211: checkcast     #93                 // class "[Ljava/lang/String;"
     214: putfield      #82                 // Field compatibleParamSignatures:[Ljava/lang/String;
     217: aload_0
     218: aload_0
     219: invokestatic  #94                 // Method org/apache/dubbo/rpc/support/RpcUtils.getReturnTypes:(Lorg/apache/dubbo/rpc/Invocation;)[Ljava/lang/reflect/Type;
     222: putfield      #84                 // Field returnTypes:[Ljava/lang/reflect/Type;
     225: aload_0
     226: aload_0
     227: invokestatic  #95                 // Method org/apache/dubbo/rpc/support/RpcUtils.getReturnType:(Lorg/apache/dubbo/rpc/Invocation;)Ljava/lang/Class;
     230: putfield      #86                 // Field returnType:Ljava/lang/Class;
     233: return

  public org.apache.dubbo.rpc.Invoker<?> getInvoker();
    Code:
       0: aload_0
       1: getfield      #56                 // Field invoker:Lorg/apache/dubbo/rpc/Invoker;
       4: areturn

  public void setInvoker(org.apache.dubbo.rpc.Invoker<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #56                 // Field invoker:Lorg/apache/dubbo/rpc/Invoker;
       5: return

  public java.lang.Object put(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #10                 // Field attributes:Ljava/util/Map;
       4: aload_1
       5: aload_2
       6: invokeinterface #96,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: areturn

  public java.lang.Object get(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #10                 // Field attributes:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #97,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: areturn

  public java.util.Map<java.lang.Object, java.lang.Object> getAttributes();
    Code:
       0: aload_0
       1: getfield      #10                 // Field attributes:Ljava/util/Map;
       4: areturn

  public void addInvokedInvoker(org.apache.dubbo.rpc.Invoker<?>);
    Code:
       0: aload_0
       1: getfield      #13                 // Field invokedInvokers:Ljava/util/List;
       4: aload_1
       5: invokeinterface #98,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      10: pop
      11: return

  public java.util.List<org.apache.dubbo.rpc.Invoker<?>> getInvokedInvokers();
    Code:
       0: aload_0
       1: getfield      #13                 // Field invokedInvokers:Ljava/util/List;
       4: areturn

  public java.lang.String getTargetServiceUniqueName();
    Code:
       0: aload_0
       1: getfield      #46                 // Field targetServiceUniqueName:Ljava/lang/String;
       4: areturn

  public void setTargetServiceUniqueName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #46                 // Field targetServiceUniqueName:Ljava/lang/String;
       5: return

  public java.lang.String getProtocolServiceKey();
    Code:
       0: aload_0
       1: getfield      #50                 // Field protocolServiceKey:Ljava/lang/String;
       4: areturn

  public java.lang.String getMethodName();
    Code:
       0: aload_0
       1: getfield      #48                 // Field methodName:Ljava/lang/String;
       4: areturn

  public void setMethodName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #48                 // Field methodName:Ljava/lang/String;
       5: return

  public java.lang.String getServiceName();
    Code:
       0: aload_0
       1: getfield      #49                 // Field interfaceName:Ljava/lang/String;
       4: areturn

  public void setServiceName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #49                 // Field interfaceName:Ljava/lang/String;
       5: return

  public java.lang.Class<?>[] getParameterTypes();
    Code:
       0: aload_0
       1: getfield      #52                 // Field parameterTypes:[Ljava/lang/Class;
       4: areturn

  public void setParameterTypes(java.lang.Class<?>[]);
    Code:
       0: aload_0
       1: aload_1
       2: ifnonnull     12
       5: iconst_0
       6: anewarray     #51                 // class java/lang/Class
       9: goto          13
      12: aload_1
      13: putfield      #52                 // Field parameterTypes:[Ljava/lang/Class;
      16: return

  public java.lang.String getParameterTypesDesc();
    Code:
       0: aload_0
       1: getfield      #80                 // Field parameterTypesDesc:Ljava/lang/String;
       4: areturn

  public void setParameterTypesDesc(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #80                 // Field parameterTypesDesc:Ljava/lang/String;
       5: return

  public java.lang.String[] getCompatibleParamSignatures();
    Code:
       0: aload_0
       1: getfield      #82                 // Field compatibleParamSignatures:[Ljava/lang/String;
       4: areturn

  public void setCompatibleParamSignatures(java.lang.String[]);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #82                 // Field compatibleParamSignatures:[Ljava/lang/String;
       5: return

  public java.lang.Object[] getArguments();
    Code:
       0: aload_0
       1: getfield      #54                 // Field arguments:[Ljava/lang/Object;
       4: areturn

  public void setArguments(java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: ifnonnull     12
       5: iconst_0
       6: anewarray     #53                 // class java/lang/Object
       9: goto          13
      12: aload_1
      13: putfield      #54                 // Field arguments:[Ljava/lang/Object;
      16: return

  public java.util.Map<java.lang.String, java.lang.Object> getObjectAttachments();
    Code:
       0: aload_0
       1: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
       4: invokeinterface #99,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
       9: aload_0
      10: getfield      #55                 // Field attachments:Ljava/util/Map;
      13: ifnonnull     27
      16: aload_0
      17: new           #7                  // class java/util/HashMap
      20: dup
      21: invokespecial #8                  // Method java/util/HashMap."<init>":()V
      24: putfield      #55                 // Field attachments:Ljava/util/Map;
      27: aload_0
      28: getfield      #55                 // Field attachments:Ljava/util/Map;
      31: astore_1
      32: aload_0
      33: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      36: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      41: aload_1
      42: areturn
      43: astore_2
      44: aload_0
      45: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      48: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      53: aload_2
      54: athrow
    Exception table:
       from    to  target type
           0    32    43   any

  public java.util.Map<java.lang.String, java.lang.Object> copyObjectAttachments();
    Code:
       0: aload_0
       1: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
       4: invokeinterface #99,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
       9: aload_0
      10: getfield      #55                 // Field attachments:Ljava/util/Map;
      13: ifnonnull     35
      16: new           #7                  // class java/util/HashMap
      19: dup
      20: invokespecial #8                  // Method java/util/HashMap."<init>":()V
      23: astore_1
      24: aload_0
      25: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      28: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      33: aload_1
      34: areturn
      35: new           #7                  // class java/util/HashMap
      38: dup
      39: aload_0
      40: getfield      #55                 // Field attachments:Ljava/util/Map;
      43: invokespecial #101                // Method java/util/HashMap."<init>":(Ljava/util/Map;)V
      46: astore_1
      47: aload_0
      48: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      51: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      56: aload_1
      57: areturn
      58: astore_2
      59: aload_0
      60: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      63: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      68: aload_2
      69: athrow
    Exception table:
       from    to  target type
           0    24    58   any
          35    47    58   any

  public void foreachAttachment(java.util.function.Consumer<java.util.Map$Entry<java.lang.String, java.lang.Object>>);
    Code:
       0: aload_0
       1: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
       4: invokeinterface #99,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
       9: aload_0
      10: getfield      #55                 // Field attachments:Ljava/util/Map;
      13: ifnull        31
      16: aload_0
      17: getfield      #55                 // Field attachments:Ljava/util/Map;
      20: invokeinterface #102,  1          // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      25: aload_1
      26: invokeinterface #103,  2          // InterfaceMethod java/util/Set.forEach:(Ljava/util/function/Consumer;)V
      31: aload_0
      32: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      35: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      40: goto          55
      43: astore_2
      44: aload_0
      45: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      48: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      53: aload_2
      54: athrow
      55: return
    Exception table:
       from    to  target type
           0    31    43   any

  public void setObjectAttachments(java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
       4: invokeinterface #99,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
       9: aload_0
      10: aload_1
      11: ifnonnull     24
      14: new           #7                  // class java/util/HashMap
      17: dup
      18: invokespecial #8                  // Method java/util/HashMap."<init>":()V
      21: goto          25
      24: aload_1
      25: putfield      #55                 // Field attachments:Ljava/util/Map;
      28: aload_0
      29: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      32: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      37: goto          52
      40: astore_2
      41: aload_0
      42: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      45: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      50: aload_2
      51: athrow
      52: return
    Exception table:
       from    to  target type
           0    28    40   any

  public void setAttachment(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #104                // Method setObjectAttachment:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public java.util.Map<java.lang.String, java.lang.String> getAttachments();
    Code:
       0: aload_0
       1: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
       4: invokeinterface #99,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
       9: aload_0
      10: getfield      #55                 // Field attachments:Ljava/util/Map;
      13: ifnonnull     27
      16: aload_0
      17: new           #7                  // class java/util/HashMap
      20: dup
      21: invokespecial #8                  // Method java/util/HashMap."<init>":()V
      24: putfield      #55                 // Field attachments:Ljava/util/Map;
      27: new           #105                // class org/apache/dubbo/rpc/AttachmentsAdapter$ObjectToStringMap
      30: dup
      31: aload_0
      32: getfield      #55                 // Field attachments:Ljava/util/Map;
      35: invokespecial #106                // Method org/apache/dubbo/rpc/AttachmentsAdapter$ObjectToStringMap."<init>":(Ljava/util/Map;)V
      38: astore_1
      39: aload_0
      40: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      43: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      48: aload_1
      49: areturn
      50: astore_2
      51: aload_0
      52: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      55: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      60: aload_2
      61: athrow
    Exception table:
       from    to  target type
           0    39    50   any

  public void setAttachments(java.util.Map<java.lang.String, java.lang.String>);
    Code:
       0: aload_0
       1: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
       4: invokeinterface #99,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
       9: aload_0
      10: aload_1
      11: ifnonnull     24
      14: new           #7                  // class java/util/HashMap
      17: dup
      18: invokespecial #8                  // Method java/util/HashMap."<init>":()V
      21: goto          32
      24: new           #7                  // class java/util/HashMap
      27: dup
      28: aload_1
      29: invokespecial #101                // Method java/util/HashMap."<init>":(Ljava/util/Map;)V
      32: putfield      #55                 // Field attachments:Ljava/util/Map;
      35: aload_0
      36: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      39: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      44: goto          59
      47: astore_2
      48: aload_0
      49: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      52: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      57: aload_2
      58: athrow
      59: return
    Exception table:
       from    to  target type
           0    35    47   any

  public void setAttachment(java.lang.String, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #104                // Method setObjectAttachment:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void setObjectAttachment(java.lang.String, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
       4: invokeinterface #99,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
       9: aload_0
      10: getfield      #55                 // Field attachments:Ljava/util/Map;
      13: ifnonnull     27
      16: aload_0
      17: new           #7                  // class java/util/HashMap
      20: dup
      21: invokespecial #8                  // Method java/util/HashMap."<init>":()V
      24: putfield      #55                 // Field attachments:Ljava/util/Map;
      27: aload_0
      28: getfield      #55                 // Field attachments:Ljava/util/Map;
      31: aload_1
      32: aload_2
      33: invokeinterface #96,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      38: pop
      39: aload_0
      40: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      43: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      48: goto          63
      51: astore_3
      52: aload_0
      53: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      56: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      61: aload_3
      62: athrow
      63: return
    Exception table:
       from    to  target type
           0    39    51   any

  public void setAttachmentIfAbsent(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #107                // Method setObjectAttachmentIfAbsent:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void setAttachmentIfAbsent(java.lang.String, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #107                // Method setObjectAttachmentIfAbsent:(Ljava/lang/String;Ljava/lang/Object;)V
       6: return

  public void setObjectAttachmentIfAbsent(java.lang.String, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
       4: invokeinterface #99,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
       9: aload_0
      10: getfield      #55                 // Field attachments:Ljava/util/Map;
      13: ifnonnull     27
      16: aload_0
      17: new           #7                  // class java/util/HashMap
      20: dup
      21: invokespecial #8                  // Method java/util/HashMap."<init>":()V
      24: putfield      #55                 // Field attachments:Ljava/util/Map;
      27: aload_0
      28: getfield      #55                 // Field attachments:Ljava/util/Map;
      31: aload_1
      32: invokeinterface #108,  2          // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      37: ifne          52
      40: aload_0
      41: getfield      #55                 // Field attachments:Ljava/util/Map;
      44: aload_1
      45: aload_2
      46: invokeinterface #96,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      51: pop
      52: aload_0
      53: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      56: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      61: goto          76
      64: astore_3
      65: aload_0
      66: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      69: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      74: aload_3
      75: athrow
      76: return
    Exception table:
       from    to  target type
           0    52    64   any

  public void addAttachments(java.util.Map<java.lang.String, java.lang.String>);
    Code:
       0: aload_0
       1: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
       4: invokeinterface #99,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
       9: aload_1
      10: ifnonnull     23
      13: aload_0
      14: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      17: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      22: return
      23: aload_0
      24: getfield      #55                 // Field attachments:Ljava/util/Map;
      27: ifnonnull     41
      30: aload_0
      31: new           #7                  // class java/util/HashMap
      34: dup
      35: invokespecial #8                  // Method java/util/HashMap."<init>":()V
      38: putfield      #55                 // Field attachments:Ljava/util/Map;
      41: aload_0
      42: getfield      #55                 // Field attachments:Ljava/util/Map;
      45: aload_1
      46: invokeinterface #109,  2          // InterfaceMethod java/util/Map.putAll:(Ljava/util/Map;)V
      51: aload_0
      52: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      55: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      60: goto          75
      63: astore_2
      64: aload_0
      65: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      68: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      73: aload_2
      74: athrow
      75: return
    Exception table:
       from    to  target type
           0    13    63   any
          23    51    63   any

  public void addObjectAttachments(java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
       4: invokeinterface #99,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
       9: aload_1
      10: ifnonnull     23
      13: aload_0
      14: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      17: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      22: return
      23: aload_0
      24: getfield      #55                 // Field attachments:Ljava/util/Map;
      27: ifnonnull     41
      30: aload_0
      31: new           #7                  // class java/util/HashMap
      34: dup
      35: invokespecial #8                  // Method java/util/HashMap."<init>":()V
      38: putfield      #55                 // Field attachments:Ljava/util/Map;
      41: aload_0
      42: getfield      #55                 // Field attachments:Ljava/util/Map;
      45: aload_1
      46: invokeinterface #109,  2          // InterfaceMethod java/util/Map.putAll:(Ljava/util/Map;)V
      51: aload_0
      52: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      55: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      60: goto          75
      63: astore_2
      64: aload_0
      65: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      68: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      73: aload_2
      74: athrow
      75: return
    Exception table:
       from    to  target type
           0    13    63   any
          23    51    63   any

  public void addAttachmentsIfAbsent(java.util.Map<java.lang.String, java.lang.String>);
    Code:
       0: aload_1
       1: ifnonnull     5
       4: return
       5: aload_1
       6: invokeinterface #102,  1          // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      11: invokeinterface #110,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      16: astore_2
      17: aload_2
      18: invokeinterface #111,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      23: ifeq          61
      26: aload_2
      27: invokeinterface #112,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      32: checkcast     #113                // class java/util/Map$Entry
      35: astore_3
      36: aload_0
      37: aload_3
      38: invokeinterface #114,  1          // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      43: checkcast     #115                // class java/lang/String
      46: aload_3
      47: invokeinterface #116,  1          // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      52: checkcast     #115                // class java/lang/String
      55: invokevirtual #117                // Method setAttachmentIfAbsent:(Ljava/lang/String;Ljava/lang/String;)V
      58: goto          17
      61: return

  public void addObjectAttachmentsIfAbsent(java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_1
       1: ifnonnull     5
       4: return
       5: aload_1
       6: invokeinterface #102,  1          // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      11: invokeinterface #110,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      16: astore_2
      17: aload_2
      18: invokeinterface #111,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      23: ifeq          58
      26: aload_2
      27: invokeinterface #112,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      32: checkcast     #113                // class java/util/Map$Entry
      35: astore_3
      36: aload_0
      37: aload_3
      38: invokeinterface #114,  1          // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      43: checkcast     #115                // class java/lang/String
      46: aload_3
      47: invokeinterface #116,  1          // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      52: invokevirtual #118                // Method setAttachmentIfAbsent:(Ljava/lang/String;Ljava/lang/Object;)V
      55: goto          17
      58: return

  public java.lang.String getAttachment(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
       4: invokeinterface #99,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
       9: aload_0
      10: getfield      #55                 // Field attachments:Ljava/util/Map;
      13: ifnonnull     29
      16: aconst_null
      17: astore_2
      18: aload_0
      19: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      22: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      27: aload_2
      28: areturn
      29: aload_0
      30: getfield      #55                 // Field attachments:Ljava/util/Map;
      33: aload_1
      34: invokeinterface #97,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      39: astore_2
      40: aload_2
      41: instanceof    #115                // class java/lang/String
      44: ifeq          63
      47: aload_2
      48: checkcast     #115                // class java/lang/String
      51: astore_3
      52: aload_0
      53: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      56: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      61: aload_3
      62: areturn
      63: aconst_null
      64: astore_3
      65: aload_0
      66: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      69: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      74: aload_3
      75: areturn
      76: astore        4
      78: aload_0
      79: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      82: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      87: aload         4
      89: athrow
    Exception table:
       from    to  target type
           0    18    76   any
          29    52    76   any
          63    65    76   any
          76    78    76   any

  public java.lang.Object getObjectAttachment(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
       4: invokeinterface #99,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
       9: aload_0
      10: getfield      #55                 // Field attachments:Ljava/util/Map;
      13: ifnonnull     29
      16: aconst_null
      17: astore_2
      18: aload_0
      19: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      22: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      27: aload_2
      28: areturn
      29: aload_0
      30: getfield      #55                 // Field attachments:Ljava/util/Map;
      33: aload_1
      34: invokeinterface #97,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      39: astore_2
      40: aload_2
      41: ifnull        57
      44: aload_2
      45: astore_3
      46: aload_0
      47: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      50: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      55: aload_3
      56: areturn
      57: aload_0
      58: getfield      #55                 // Field attachments:Ljava/util/Map;
      61: aload_1
      62: getstatic     #119                // Field java/util/Locale.ROOT:Ljava/util/Locale;
      65: invokevirtual #120                // Method java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;
      68: invokeinterface #97,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      73: astore_3
      74: aload_0
      75: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      78: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      83: aload_3
      84: areturn
      85: astore        4
      87: aload_0
      88: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      91: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      96: aload         4
      98: athrow
    Exception table:
       from    to  target type
           0    18    85   any
          29    46    85   any
          57    74    85   any
          85    87    85   any

  public java.lang.String getAttachment(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
       4: invokeinterface #99,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
       9: aload_0
      10: getfield      #55                 // Field attachments:Ljava/util/Map;
      13: ifnonnull     29
      16: aload_2
      17: astore_3
      18: aload_0
      19: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      22: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      27: aload_3
      28: areturn
      29: aload_0
      30: getfield      #55                 // Field attachments:Ljava/util/Map;
      33: aload_1
      34: invokeinterface #97,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      39: astore_3
      40: aload_3
      41: instanceof    #115                // class java/lang/String
      44: ifeq          92
      47: aload_3
      48: checkcast     #115                // class java/lang/String
      51: astore        4
      53: aload         4
      55: invokestatic  #121                // Method org/apache/dubbo/common/utils/StringUtils.isEmpty:(Ljava/lang/String;)Z
      58: ifeq          76
      61: aload_2
      62: astore        5
      64: aload_0
      65: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      68: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      73: aload         5
      75: areturn
      76: aload         4
      78: astore        5
      80: aload_0
      81: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      84: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      89: aload         5
      91: areturn
      92: aload_2
      93: astore        4
      95: aload_0
      96: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      99: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
     104: aload         4
     106: areturn
     107: astore        6
     109: aload_0
     110: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
     113: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
     118: aload         6
     120: athrow
    Exception table:
       from    to  target type
           0    18   107   any
          29    64   107   any
          76    80   107   any
          92    95   107   any
         107   109   107   any

  public java.lang.Object getObjectAttachment(java.lang.String, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
       4: invokeinterface #99,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
       9: aload_0
      10: getfield      #55                 // Field attachments:Ljava/util/Map;
      13: ifnonnull     29
      16: aload_2
      17: astore_3
      18: aload_0
      19: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      22: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      27: aload_3
      28: areturn
      29: aload_0
      30: getfield      #55                 // Field attachments:Ljava/util/Map;
      33: aload_1
      34: invokeinterface #97,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      39: astore_3
      40: aload_3
      41: ifnonnull     59
      44: aload_2
      45: astore        4
      47: aload_0
      48: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      51: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      56: aload         4
      58: areturn
      59: aload_3
      60: astore        4
      62: aload_0
      63: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      66: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      71: aload         4
      73: areturn
      74: astore        5
      76: aload_0
      77: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      80: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      85: aload         5
      87: athrow
    Exception table:
       from    to  target type
           0    18    74   any
          29    47    74   any
          59    62    74   any
          74    76    74   any

  public java.lang.Object getObjectAttachmentWithoutConvert(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
       4: invokeinterface #99,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
       9: aload_0
      10: getfield      #55                 // Field attachments:Ljava/util/Map;
      13: ifnonnull     29
      16: aconst_null
      17: astore_2
      18: aload_0
      19: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      22: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      27: aload_2
      28: areturn
      29: aload_0
      30: getfield      #55                 // Field attachments:Ljava/util/Map;
      33: aload_1
      34: invokeinterface #97,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      39: astore_2
      40: aload_0
      41: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      44: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      49: aload_2
      50: areturn
      51: astore_3
      52: aload_0
      53: getfield      #6                  // Field attachmentLock:Ljava/util/concurrent/locks/Lock;
      56: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      61: aload_3
      62: athrow
    Exception table:
       from    to  target type
           0    18    51   any
          29    40    51   any

  public java.lang.Class<?> getReturnType();
    Code:
       0: aload_0
       1: getfield      #86                 // Field returnType:Ljava/lang/Class;
       4: areturn

  public void setReturnType(java.lang.Class<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #86                 // Field returnType:Ljava/lang/Class;
       5: return

  public java.lang.reflect.Type[] getReturnTypes();
    Code:
       0: aload_0
       1: getfield      #84                 // Field returnTypes:[Ljava/lang/reflect/Type;
       4: areturn

  public void setReturnTypes(java.lang.reflect.Type[]);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #84                 // Field returnTypes:[Ljava/lang/reflect/Type;
       5: return

  public org.apache.dubbo.rpc.InvokeMode getInvokeMode();
    Code:
       0: aload_0
       1: getfield      #58                 // Field invokeMode:Lorg/apache/dubbo/rpc/InvokeMode;
       4: areturn

  public void setInvokeMode(org.apache.dubbo.rpc.InvokeMode);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #58                 // Field invokeMode:Lorg/apache/dubbo/rpc/InvokeMode;
       5: return

  public void setServiceModel(org.apache.dubbo.rpc.model.ServiceModel);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #47                 // Field serviceModel:Lorg/apache/dubbo/rpc/model/ServiceModel;
       5: return

  public org.apache.dubbo.rpc.model.ServiceModel getServiceModel();
    Code:
       0: aload_0
       1: getfield      #47                 // Field serviceModel:Lorg/apache/dubbo/rpc/model/ServiceModel;
       4: areturn

  public java.lang.String toString();
    Code:
       0: new           #122                // class java/lang/StringBuilder
       3: dup
       4: invokespecial #123                // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #124                // String RpcInvocation [methodName=
       9: invokevirtual #125                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #48                 // Field methodName:Ljava/lang/String;
      16: invokevirtual #125                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      19: ldc           #126                // String , parameterTypes=
      21: invokevirtual #125                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: aload_0
      25: getfield      #52                 // Field parameterTypes:[Ljava/lang/Class;
      28: invokestatic  #127                // Method java/util/Arrays.toString:([Ljava/lang/Object;)Ljava/lang/String;
      31: invokevirtual #125                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: ldc           #128                // String ]
      36: invokevirtual #125                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: invokevirtual #129                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      42: areturn

  private static java.lang.String[] lambda$initParameterDesc$1(int);
    Code:
       0: iload_0
       1: anewarray     #115                // class java/lang/String
       4: areturn

  private boolean lambda$initParameterDesc$0(org.apache.dubbo.rpc.model.ServiceDescriptor);
    Code:
       0: aload_0
       1: getfield      #49                 // Field interfaceName:Ljava/lang/String;
       4: aload_1
       5: invokeinterface #130,  1          // InterfaceMethod org/apache/dubbo/rpc/model/ServiceDescriptor.getInterfaceName:()Ljava/lang/String;
      10: invokevirtual #131                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      13: ireturn
}

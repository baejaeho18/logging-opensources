Compiled from "RegistryManager.java"
public class org.apache.dubbo.registry.support.RegistryManager {
  private static final org.apache.dubbo.common.logger.ErrorTypeAwareLogger LOGGER;

  private org.apache.dubbo.rpc.model.ApplicationModel applicationModel;

  private final java.util.Map<java.lang.String, org.apache.dubbo.registry.Registry> registries;

  protected final java.util.concurrent.locks.ReentrantLock lock;

  private final java.util.concurrent.atomic.AtomicBoolean destroyed;

  private static final org.apache.dubbo.registry.Registry DEFAULT_NOP_REGISTRY;

  public org.apache.dubbo.registry.support.RegistryManager(org.apache.dubbo.rpc.model.ApplicationModel);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #3                  // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #4                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: putfield      #5                  // Field registries:Ljava/util/Map;
      15: aload_0
      16: new           #6                  // class java/util/concurrent/locks/ReentrantLock
      19: dup
      20: invokespecial #7                  // Method java/util/concurrent/locks/ReentrantLock."<init>":()V
      23: putfield      #8                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      26: aload_0
      27: new           #9                  // class java/util/concurrent/atomic/AtomicBoolean
      30: dup
      31: iconst_0
      32: invokespecial #10                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
      35: putfield      #11                 // Field destroyed:Ljava/util/concurrent/atomic/AtomicBoolean;
      38: aload_0
      39: aload_1
      40: putfield      #12                 // Field applicationModel:Lorg/apache/dubbo/rpc/model/ApplicationModel;
      43: return

  public java.util.Collection<org.apache.dubbo.registry.Registry> getRegistries();
    Code:
       0: new           #13                 // class java/util/LinkedList
       3: dup
       4: aload_0
       5: getfield      #5                  // Field registries:Ljava/util/Map;
       8: invokeinterface #14,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      13: invokespecial #15                 // Method java/util/LinkedList."<init>":(Ljava/util/Collection;)V
      16: invokestatic  #16                 // Method java/util/Collections.unmodifiableCollection:(Ljava/util/Collection;)Ljava/util/Collection;
      19: areturn

  public org.apache.dubbo.registry.Registry getRegistry(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #5                  // Field registries:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #17,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #18                 // class org/apache/dubbo/registry/Registry
      13: areturn

  public void putRegistry(java.lang.String, org.apache.dubbo.registry.Registry);
    Code:
       0: aload_0
       1: getfield      #5                  // Field registries:Ljava/util/Map;
       4: aload_1
       5: aload_2
       6: invokeinterface #19,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: pop
      12: return

  public java.util.List<org.apache.dubbo.registry.client.ServiceDiscovery> getServiceDiscoveries();
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method getRegistries:()Ljava/util/Collection;
       4: invokeinterface #21,  1           // InterfaceMethod java/util/Collection.stream:()Ljava/util/stream/Stream;
       9: invokedynamic #22,  0             // InvokeDynamic #0:test:()Ljava/util/function/Predicate;
      14: invokeinterface #23,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      19: invokedynamic #24,  0             // InvokeDynamic #1:apply:()Ljava/util/function/Function;
      24: invokeinterface #25,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      29: invokedynamic #26,  0             // InvokeDynamic #2:apply:()Ljava/util/function/Function;
      34: invokeinterface #25,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      39: invokestatic  #27                 // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
      42: invokeinterface #28,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      47: checkcast     #29                 // class java/util/List
      50: areturn

  public void destroyAll();
    Code:
       0: aload_0
       1: getfield      #11                 // Field destroyed:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_0
       5: iconst_1
       6: invokevirtual #30                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
       9: ifne          13
      12: return
      13: getstatic     #31                 // Field LOGGER:Lorg/apache/dubbo/common/logger/ErrorTypeAwareLogger;
      16: invokeinterface #32,  1           // InterfaceMethod org/apache/dubbo/common/logger/ErrorTypeAwareLogger.isInfoEnabled:()Z
      21: ifeq          54
      24: getstatic     #31                 // Field LOGGER:Lorg/apache/dubbo/common/logger/ErrorTypeAwareLogger;
      27: new           #33                 // class java/lang/StringBuilder
      30: dup
      31: invokespecial #34                 // Method java/lang/StringBuilder."<init>":()V
      34: ldc           #35                 // String Close all registries
      36: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: aload_0
      40: invokevirtual #20                 // Method getRegistries:()Ljava/util/Collection;
      43: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      46: invokevirtual #38                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      49: invokeinterface #39,  2           // InterfaceMethod org/apache/dubbo/common/logger/ErrorTypeAwareLogger.info:(Ljava/lang/String;)V
      54: aload_0
      55: getfield      #8                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      58: invokevirtual #40                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V
      61: aload_0
      62: invokevirtual #20                 // Method getRegistries:()Ljava/util/Collection;
      65: invokeinterface #41,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      70: astore_1
      71: aload_1
      72: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      77: ifeq          122
      80: aload_1
      81: invokeinterface #43,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      86: checkcast     #18                 // class org/apache/dubbo/registry/Registry
      89: astore_2
      90: aload_2
      91: invokeinterface #44,  1           // InterfaceMethod org/apache/dubbo/registry/Registry.destroy:()V
      96: goto          119
      99: astore_3
     100: getstatic     #31                 // Field LOGGER:Lorg/apache/dubbo/common/logger/ErrorTypeAwareLogger;
     103: ldc           #46                 // String 99-0
     105: ldc           #47                 // String unknown error in registry module
     107: ldc           #48                 // String
     109: aload_3
     110: invokevirtual #49                 // Method java/lang/Throwable.getMessage:()Ljava/lang/String;
     113: aload_3
     114: invokeinterface #50,  6           // InterfaceMethod org/apache/dubbo/common/logger/ErrorTypeAwareLogger.warn:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
     119: goto          71
     122: aload_0
     123: getfield      #5                  // Field registries:Ljava/util/Map;
     126: invokeinterface #51,  1           // InterfaceMethod java/util/Map.clear:()V
     131: aload_0
     132: getfield      #8                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
     135: invokevirtual #52                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
     138: goto          153
     141: astore        4
     143: aload_0
     144: getfield      #8                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
     147: invokevirtual #52                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
     150: aload         4
     152: athrow
     153: return
    Exception table:
       from    to  target type
          90    96    99   Class java/lang/Throwable
          61   131   141   any
         141   143   141   any

  public void reset();
    Code:
       0: aload_0
       1: getfield      #11                 // Field destroyed:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_0
       5: invokevirtual #53                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
       8: aload_0
       9: getfield      #5                  // Field registries:Ljava/util/Map;
      12: invokeinterface #51,  1           // InterfaceMethod java/util/Map.clear:()V
      17: return

  protected org.apache.dubbo.registry.Registry getDefaultNopRegistryIfDestroyed();
    Code:
       0: aload_0
       1: getfield      #11                 // Field destroyed:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #54                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ifeq          30
      10: getstatic     #31                 // Field LOGGER:Lorg/apache/dubbo/common/logger/ErrorTypeAwareLogger;
      13: ldc           #55                 // String 1-12
      15: ldc           #56                 // String misuse of the methods
      17: ldc           #48                 // String
      19: ldc           #57                 // String All registry instances have been destroyed, failed to fetch any instance. Usually, this means no need to try to do unnecessary redundant resource clearance, all registries has been taken care of.
      21: invokeinterface #58,  5           // InterfaceMethod org/apache/dubbo/common/logger/ErrorTypeAwareLogger.warn:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
      26: getstatic     #59                 // Field DEFAULT_NOP_REGISTRY:Lorg/apache/dubbo/registry/Registry;
      29: areturn
      30: aconst_null
      31: areturn

  protected java.util.concurrent.locks.Lock getRegistryLock();
    Code:
       0: aload_0
       1: getfield      #8                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: areturn

  public void removeDestroyedRegistry(org.apache.dubbo.registry.Registry);
    Code:
       0: aload_0
       1: getfield      #8                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #40                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V
       7: aload_0
       8: getfield      #5                  // Field registries:Ljava/util/Map;
      11: invokeinterface #60,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      16: aload_1
      17: invokedynamic #61,  0             // InvokeDynamic #3:test:(Lorg/apache/dubbo/registry/Registry;)Ljava/util/function/Predicate;
      22: invokeinterface #62,  2           // InterfaceMethod java/util/Set.removeIf:(Ljava/util/function/Predicate;)Z
      27: pop
      28: aload_0
      29: getfield      #8                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      32: invokevirtual #52                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      35: goto          48
      38: astore_2
      39: aload_0
      40: getfield      #8                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      43: invokevirtual #52                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      46: aload_2
      47: athrow
      48: return
    Exception table:
       from    to  target type
           7    28    38   any

  public void clearRegistryNotDestroy();
    Code:
       0: aload_0
       1: getfield      #5                  // Field registries:Ljava/util/Map;
       4: invokeinterface #51,  1           // InterfaceMethod java/util/Map.clear:()V
       9: return

  public static org.apache.dubbo.registry.support.RegistryManager getInstance(org.apache.dubbo.rpc.model.ApplicationModel);
    Code:
       0: aload_0
       1: invokevirtual #63                 // Method org/apache/dubbo/rpc/model/ApplicationModel.getBeanFactory:()Lorg/apache/dubbo/common/beans/factory/ScopeBeanFactory;
       4: ldc           #64                 // class org/apache/dubbo/registry/support/RegistryManager
       6: invokevirtual #65                 // Method org/apache/dubbo/common/beans/factory/ScopeBeanFactory.getBean:(Ljava/lang/Class;)Ljava/lang/Object;
       9: checkcast     #64                 // class org/apache/dubbo/registry/support/RegistryManager
      12: areturn

  private static boolean lambda$removeDestroyedRegistry$2(org.apache.dubbo.registry.Registry, java.util.Map$Entry);
    Code:
       0: aload_1
       1: invokeinterface #66,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
       6: checkcast     #18                 // class org/apache/dubbo/registry/Registry
       9: aload_0
      10: invokevirtual #67                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      13: ireturn

  private static org.apache.dubbo.registry.client.ServiceDiscoveryRegistry lambda$getServiceDiscoveries$1(org.apache.dubbo.registry.Registry);
    Code:
       0: aload_0
       1: checkcast     #68                 // class org/apache/dubbo/registry/client/ServiceDiscoveryRegistry
       4: areturn

  private static boolean lambda$getServiceDiscoveries$0(org.apache.dubbo.registry.Registry);
    Code:
       0: aload_0
       1: instanceof    #68                 // class org/apache/dubbo/registry/client/ServiceDiscoveryRegistry
       4: ireturn

  static {};
    Code:
       0: ldc           #64                 // class org/apache/dubbo/registry/support/RegistryManager
       2: invokestatic  #69                 // Method org/apache/dubbo/common/logger/LoggerFactory.getErrorTypeAwareLogger:(Ljava/lang/Class;)Lorg/apache/dubbo/common/logger/ErrorTypeAwareLogger;
       5: putstatic     #31                 // Field LOGGER:Lorg/apache/dubbo/common/logger/ErrorTypeAwareLogger;
       8: new           #70                 // class org/apache/dubbo/registry/support/RegistryManager$1
      11: dup
      12: invokespecial #71                 // Method org/apache/dubbo/registry/support/RegistryManager$1."<init>":()V
      15: putstatic     #59                 // Field DEFAULT_NOP_REGISTRY:Lorg/apache/dubbo/registry/Registry;
      18: return
}

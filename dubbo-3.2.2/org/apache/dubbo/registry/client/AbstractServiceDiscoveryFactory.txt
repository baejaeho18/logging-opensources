Compiled from "AbstractServiceDiscoveryFactory.java"
public abstract class org.apache.dubbo.registry.client.AbstractServiceDiscoveryFactory implements org.apache.dubbo.registry.client.ServiceDiscoveryFactory,org.apache.dubbo.rpc.model.ScopeModelAware {
  protected org.apache.dubbo.rpc.model.ApplicationModel applicationModel;

  private final java.util.concurrent.ConcurrentMap<java.lang.String, org.apache.dubbo.registry.client.ServiceDiscovery> discoveries;

  public org.apache.dubbo.registry.client.AbstractServiceDiscoveryFactory();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: putfield      #4                  // Field discoveries:Ljava/util/concurrent/ConcurrentMap;
      15: return

  public void setApplicationModel(org.apache.dubbo.rpc.model.ApplicationModel);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field applicationModel:Lorg/apache/dubbo/rpc/model/ApplicationModel;
       5: return

  public java.util.List<org.apache.dubbo.registry.client.ServiceDiscovery> getAllServiceDiscoveries();
    Code:
       0: new           #6                  // class java/util/LinkedList
       3: dup
       4: aload_0
       5: getfield      #4                  // Field discoveries:Ljava/util/concurrent/ConcurrentMap;
       8: invokeinterface #7,  1            // InterfaceMethod java/util/concurrent/ConcurrentMap.values:()Ljava/util/Collection;
      13: invokespecial #8                  // Method java/util/LinkedList."<init>":(Ljava/util/Collection;)V
      16: invokestatic  #9                  // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;
      19: areturn

  public org.apache.dubbo.registry.client.ServiceDiscovery getServiceDiscovery(org.apache.dubbo.common.URL);
    Code:
       0: aload_1
       1: invokevirtual #10                 // Method org/apache/dubbo/common/URL.toServiceStringWithoutResolving:()Ljava/lang/String;
       4: astore_2
       5: aload_0
       6: getfield      #4                  // Field discoveries:Ljava/util/concurrent/ConcurrentMap;
       9: aload_2
      10: aload_0
      11: aload_1
      12: invokedynamic #11,  0             // InvokeDynamic #0:apply:(Lorg/apache/dubbo/registry/client/AbstractServiceDiscoveryFactory;Lorg/apache/dubbo/common/URL;)Ljava/util/function/Function;
      17: invokestatic  #12                 // Method org/apache/dubbo/common/utils/ConcurrentHashMapUtils.computeIfAbsent:(Ljava/util/concurrent/ConcurrentMap;Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      20: checkcast     #13                 // class org/apache/dubbo/registry/client/ServiceDiscovery
      23: areturn

  protected abstract org.apache.dubbo.registry.client.ServiceDiscovery createDiscovery(org.apache.dubbo.common.URL);

  private org.apache.dubbo.registry.client.ServiceDiscovery lambda$getServiceDiscovery$0(org.apache.dubbo.common.URL, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #14                 // Method createDiscovery:(Lorg/apache/dubbo/common/URL;)Lorg/apache/dubbo/registry/client/ServiceDiscovery;
       5: areturn
}

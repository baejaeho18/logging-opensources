Compiled from "AbstractTripleReactorSubscriber.java"
public abstract class org.apache.dubbo.reactive.AbstractTripleReactorSubscriber<T> implements org.reactivestreams.Subscriber<T>, reactor.core.CoreSubscriber<T> {
  private volatile boolean isCancelled;

  protected volatile org.apache.dubbo.rpc.protocol.tri.observer.CallStreamObserver<T> downstream;

  private final java.util.concurrent.atomic.AtomicBoolean SUBSCRIBED;

  private volatile org.reactivestreams.Subscription subscription;

  private final java.util.concurrent.atomic.AtomicBoolean HAS_SUBSCRIBED;

  private volatile boolean isDone;

  public org.apache.dubbo.reactive.AbstractTripleReactorSubscriber();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicBoolean
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      12: putfield      #4                  // Field SUBSCRIBED:Ljava/util/concurrent/atomic/AtomicBoolean;
      15: aload_0
      16: new           #2                  // class java/util/concurrent/atomic/AtomicBoolean
      19: dup
      20: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      23: putfield      #5                  // Field HAS_SUBSCRIBED:Ljava/util/concurrent/atomic/AtomicBoolean;
      26: return

  public void subscribe(org.apache.dubbo.rpc.protocol.tri.observer.CallStreamObserver<T>);
    Code:
       0: aload_1
       1: ifnonnull     12
       4: new           #6                  // class java/lang/NullPointerException
       7: dup
       8: invokespecial #7                  // Method java/lang/NullPointerException."<init>":()V
      11: athrow
      12: aload_0
      13: getfield      #8                  // Field downstream:Lorg/apache/dubbo/rpc/protocol/tri/observer/CallStreamObserver;
      16: ifnonnull     46
      19: aload_0
      20: getfield      #4                  // Field SUBSCRIBED:Ljava/util/concurrent/atomic/AtomicBoolean;
      23: iconst_0
      24: iconst_1
      25: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
      28: ifeq          46
      31: aload_0
      32: aload_1
      33: putfield      #8                  // Field downstream:Lorg/apache/dubbo/rpc/protocol/tri/observer/CallStreamObserver;
      36: aload_0
      37: getfield      #10                 // Field subscription:Lorg/reactivestreams/Subscription;
      40: lconst_1
      41: invokeinterface #11,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      46: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #10                 // Field subscription:Lorg/reactivestreams/Subscription;
       4: ifnonnull     25
       7: aload_0
       8: getfield      #5                  // Field HAS_SUBSCRIBED:Ljava/util/concurrent/atomic/AtomicBoolean;
      11: iconst_0
      12: iconst_1
      13: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
      16: ifeq          25
      19: aload_0
      20: aload_1
      21: putfield      #10                 // Field subscription:Lorg/reactivestreams/Subscription;
      24: return
      25: aload_1
      26: invokeinterface #12,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      31: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #13                 // Field isDone:Z
       4: ifne          34
       7: aload_0
       8: invokevirtual #14                 // Method isCanceled:()Z
      11: ifne          34
      14: aload_0
      15: getfield      #8                  // Field downstream:Lorg/apache/dubbo/rpc/protocol/tri/observer/CallStreamObserver;
      18: aload_1
      19: invokeinterface #15,  2           // InterfaceMethod org/apache/dubbo/rpc/protocol/tri/observer/CallStreamObserver.onNext:(Ljava/lang/Object;)V
      24: aload_0
      25: getfield      #10                 // Field subscription:Lorg/reactivestreams/Subscription;
      28: lconst_1
      29: invokeinterface #11,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      34: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method isCanceled:()Z
       4: ifne          22
       7: aload_0
       8: iconst_1
       9: putfield      #13                 // Field isDone:Z
      12: aload_0
      13: getfield      #8                  // Field downstream:Lorg/apache/dubbo/rpc/protocol/tri/observer/CallStreamObserver;
      16: aload_1
      17: invokeinterface #16,  2           // InterfaceMethod org/apache/dubbo/rpc/protocol/tri/observer/CallStreamObserver.onError:(Ljava/lang/Throwable;)V
      22: return

  public void onComplete();
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method isCanceled:()Z
       4: ifne          21
       7: aload_0
       8: iconst_1
       9: putfield      #13                 // Field isDone:Z
      12: aload_0
      13: getfield      #8                  // Field downstream:Lorg/apache/dubbo/rpc/protocol/tri/observer/CallStreamObserver;
      16: invokeinterface #17,  1           // InterfaceMethod org/apache/dubbo/rpc/protocol/tri/observer/CallStreamObserver.onCompleted:()V
      21: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #18                 // Field isCancelled:Z
       4: ifne          28
       7: aload_0
       8: getfield      #10                 // Field subscription:Lorg/reactivestreams/Subscription;
      11: ifnull        28
      14: aload_0
      15: iconst_1
      16: putfield      #18                 // Field isCancelled:Z
      19: aload_0
      20: getfield      #10                 // Field subscription:Lorg/reactivestreams/Subscription;
      23: invokeinterface #12,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      28: return

  public boolean isCanceled();
    Code:
       0: aload_0
       1: getfield      #18                 // Field isCancelled:Z
       4: ireturn
}

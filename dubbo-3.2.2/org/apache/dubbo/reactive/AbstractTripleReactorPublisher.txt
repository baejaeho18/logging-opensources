Compiled from "AbstractTripleReactorPublisher.java"
public abstract class org.apache.dubbo.reactive.AbstractTripleReactorPublisher<T> extends org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver<T> implements org.reactivestreams.Publisher<T>, org.reactivestreams.Subscription {
  private boolean canRequest;

  private long requested;

  private final java.util.concurrent.atomic.AtomicBoolean SUBSCRIBED;

  private volatile org.reactivestreams.Subscriber<? super T> downstream;

  protected volatile org.apache.dubbo.rpc.protocol.tri.observer.CallStreamObserver<?> subscription;

  private final java.util.concurrent.atomic.AtomicBoolean HAS_SUBSCRIPTION;

  private volatile boolean isCancelled;

  private volatile boolean isDone;

  private volatile java.util.function.Consumer<org.apache.dubbo.rpc.protocol.tri.observer.CallStreamObserver<?>> onSubscribe;

  private volatile java.lang.Runnable shutdownHook;

  private final java.util.concurrent.atomic.AtomicBoolean CALLED_SHUT_DOWN_HOOK;

  public org.apache.dubbo.reactive.AbstractTripleReactorPublisher();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/dubbo/rpc/protocol/tri/CancelableStreamObserver."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicBoolean
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      12: putfield      #4                  // Field SUBSCRIBED:Ljava/util/concurrent/atomic/AtomicBoolean;
      15: aload_0
      16: new           #2                  // class java/util/concurrent/atomic/AtomicBoolean
      19: dup
      20: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      23: putfield      #5                  // Field HAS_SUBSCRIPTION:Ljava/util/concurrent/atomic/AtomicBoolean;
      26: aload_0
      27: new           #2                  // class java/util/concurrent/atomic/AtomicBoolean
      30: dup
      31: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      34: putfield      #6                  // Field CALLED_SHUT_DOWN_HOOK:Ljava/util/concurrent/atomic/AtomicBoolean;
      37: return

  public org.apache.dubbo.reactive.AbstractTripleReactorPublisher(java.util.function.Consumer<org.apache.dubbo.rpc.protocol.tri.observer.CallStreamObserver<?>>, java.lang.Runnable);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/dubbo/rpc/protocol/tri/CancelableStreamObserver."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicBoolean
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      12: putfield      #4                  // Field SUBSCRIBED:Ljava/util/concurrent/atomic/AtomicBoolean;
      15: aload_0
      16: new           #2                  // class java/util/concurrent/atomic/AtomicBoolean
      19: dup
      20: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      23: putfield      #5                  // Field HAS_SUBSCRIPTION:Ljava/util/concurrent/atomic/AtomicBoolean;
      26: aload_0
      27: new           #2                  // class java/util/concurrent/atomic/AtomicBoolean
      30: dup
      31: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      34: putfield      #6                  // Field CALLED_SHUT_DOWN_HOOK:Ljava/util/concurrent/atomic/AtomicBoolean;
      37: aload_0
      38: aload_1
      39: putfield      #7                  // Field onSubscribe:Ljava/util/function/Consumer;
      42: aload_0
      43: aload_2
      44: putfield      #8                  // Field shutdownHook:Ljava/lang/Runnable;
      47: return

  protected void onSubscribe(org.apache.dubbo.rpc.protocol.tri.observer.CallStreamObserver<?>);
    Code:
       0: aload_1
       1: ifnull        52
       4: aload_0
       5: getfield      #9                  // Field subscription:Lorg/apache/dubbo/rpc/protocol/tri/observer/CallStreamObserver;
       8: ifnonnull     52
      11: aload_0
      12: getfield      #5                  // Field HAS_SUBSCRIPTION:Ljava/util/concurrent/atomic/AtomicBoolean;
      15: iconst_0
      16: iconst_1
      17: invokevirtual #10                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
      20: ifeq          52
      23: aload_0
      24: aload_1
      25: putfield      #9                  // Field subscription:Lorg/apache/dubbo/rpc/protocol/tri/observer/CallStreamObserver;
      28: aload_1
      29: invokeinterface #11,  1           // InterfaceMethod org/apache/dubbo/rpc/protocol/tri/observer/CallStreamObserver.disableAutoFlowControl:()V
      34: aload_0
      35: getfield      #7                  // Field onSubscribe:Ljava/util/function/Consumer;
      38: ifnull        51
      41: aload_0
      42: getfield      #7                  // Field onSubscribe:Ljava/util/function/Consumer;
      45: aload_1
      46: invokeinterface #12,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      51: return
      52: new           #13                 // class java/lang/IllegalStateException
      55: dup
      56: new           #14                 // class java/lang/StringBuilder
      59: dup
      60: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
      63: aload_0
      64: invokevirtual #16                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      67: invokevirtual #17                 // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
      70: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      73: ldc           #19                 // String  supports only a single subscription
      75: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      78: invokevirtual #20                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      81: invokespecial #21                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      84: athrow

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #22                 // Field isDone:Z
       4: ifne          14
       7: aload_0
       8: getfield      #23                 // Field isCancelled:Z
      11: ifeq          15
      14: return
      15: aload_0
      16: getfield      #24                 // Field downstream:Lorg/reactivestreams/Subscriber;
      19: aload_1
      20: invokeinterface #25,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
      25: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #22                 // Field isDone:Z
       4: ifne          14
       7: aload_0
       8: getfield      #23                 // Field isCancelled:Z
      11: ifeq          15
      14: return
      15: aload_0
      16: iconst_1
      17: putfield      #22                 // Field isDone:Z
      20: aload_0
      21: getfield      #24                 // Field downstream:Lorg/reactivestreams/Subscriber;
      24: aload_1
      25: invokeinterface #26,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      30: aload_0
      31: invokespecial #27                 // Method doPostShutdown:()V
      34: return

  public void onCompleted();
    Code:
       0: aload_0
       1: getfield      #22                 // Field isDone:Z
       4: ifne          14
       7: aload_0
       8: getfield      #23                 // Field isCancelled:Z
      11: ifeq          15
      14: return
      15: aload_0
      16: iconst_1
      17: putfield      #22                 // Field isDone:Z
      20: aload_0
      21: getfield      #24                 // Field downstream:Lorg/reactivestreams/Subscriber;
      24: invokeinterface #28,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      29: aload_0
      30: invokespecial #27                 // Method doPostShutdown:()V
      33: return

  private void doPostShutdown();
    Code:
       0: aload_0
       1: getfield      #8                  // Field shutdownHook:Ljava/lang/Runnable;
       4: astore_1
       5: aload_1
       6: ifnull        32
       9: aload_0
      10: getfield      #6                  // Field CALLED_SHUT_DOWN_HOOK:Ljava/util/concurrent/atomic/AtomicBoolean;
      13: iconst_0
      14: iconst_1
      15: invokevirtual #10                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
      18: ifeq          32
      21: aload_0
      22: aconst_null
      23: putfield      #8                  // Field shutdownHook:Ljava/lang/Runnable;
      26: aload_1
      27: invokeinterface #29,  1           // InterfaceMethod java/lang/Runnable.run:()V
      32: return

  public void subscribe(org.reactivestreams.Subscriber<? super T>);
    Code:
       0: aload_1
       1: ifnonnull     12
       4: new           #30                 // class java/lang/NullPointerException
       7: dup
       8: invokespecial #31                 // Method java/lang/NullPointerException."<init>":()V
      11: athrow
      12: aload_0
      13: getfield      #4                  // Field SUBSCRIBED:Ljava/util/concurrent/atomic/AtomicBoolean;
      16: iconst_0
      17: iconst_1
      18: invokevirtual #10                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
      21: ifeq          48
      24: aload_1
      25: aload_0
      26: invokeinterface #32,  2           // InterfaceMethod org/reactivestreams/Subscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      31: aload_0
      32: aload_1
      33: putfield      #24                 // Field downstream:Lorg/reactivestreams/Subscriber;
      36: aload_0
      37: getfield      #23                 // Field isCancelled:Z
      40: ifeq          48
      43: aload_0
      44: aconst_null
      45: putfield      #24                 // Field downstream:Lorg/reactivestreams/Subscriber;
      48: return

  public void request(long);
    Code:
       0: aload_0
       1: dup
       2: astore_3
       3: monitorenter
       4: aload_0
       5: getfield      #4                  // Field SUBSCRIBED:Ljava/util/concurrent/atomic/AtomicBoolean;
       8: invokevirtual #33                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      11: ifeq          48
      14: aload_0
      15: getfield      #34                 // Field canRequest:Z
      18: ifeq          48
      21: aload_0
      22: getfield      #9                  // Field subscription:Lorg/apache/dubbo/rpc/protocol/tri/observer/CallStreamObserver;
      25: lload_1
      26: ldc2_w        #36                 // long 2147483647l
      29: lcmp
      30: iflt          38
      33: ldc           #38                 // int 2147483647
      35: goto          40
      38: lload_1
      39: l2i
      40: invokeinterface #39,  2           // InterfaceMethod org/apache/dubbo/rpc/protocol/tri/observer/CallStreamObserver.request:(I)V
      45: goto          58
      48: aload_0
      49: dup
      50: getfield      #40                 // Field requested:J
      53: lload_1
      54: ladd
      55: putfield      #40                 // Field requested:J
      58: aload_3
      59: monitorexit
      60: goto          70
      63: astore        4
      65: aload_3
      66: monitorexit
      67: aload         4
      69: athrow
      70: return
    Exception table:
       from    to  target type
           4    60    63   any
          63    67    63   any

  public void startRequest();
    Code:
       0: aload_0
       1: dup
       2: astore_1
       3: monitorenter
       4: aload_0
       5: getfield      #34                 // Field canRequest:Z
       8: ifne          45
      11: aload_0
      12: iconst_1
      13: putfield      #34                 // Field canRequest:Z
      16: aload_0
      17: getfield      #40                 // Field requested:J
      20: lstore_2
      21: aload_0
      22: getfield      #9                  // Field subscription:Lorg/apache/dubbo/rpc/protocol/tri/observer/CallStreamObserver;
      25: lload_2
      26: ldc2_w        #36                 // long 2147483647l
      29: lcmp
      30: iflt          38
      33: ldc           #38                 // int 2147483647
      35: goto          40
      38: lload_2
      39: l2i
      40: invokeinterface #39,  2           // InterfaceMethod org/apache/dubbo/rpc/protocol/tri/observer/CallStreamObserver.request:(I)V
      45: aload_1
      46: monitorexit
      47: goto          57
      50: astore        4
      52: aload_1
      53: monitorexit
      54: aload         4
      56: athrow
      57: return
    Exception table:
       from    to  target type
           4    47    50   any
          50    54    50   any

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #23                 // Field isCancelled:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #23                 // Field isCancelled:Z
      13: aload_0
      14: invokespecial #27                 // Method doPostShutdown:()V
      17: return

  public boolean isCancelled();
    Code:
       0: aload_0
       1: getfield      #23                 // Field isCancelled:Z
       4: ireturn
}

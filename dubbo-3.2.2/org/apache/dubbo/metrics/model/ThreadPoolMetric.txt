Compiled from "ThreadPoolMetric.java"
public class org.apache.dubbo.metrics.model.ThreadPoolMetric implements org.apache.dubbo.metrics.model.Metric {
  private java.lang.String applicationName;

  private java.lang.String threadPoolName;

  private java.util.concurrent.ThreadPoolExecutor threadPoolExecutor;

  public org.apache.dubbo.metrics.model.ThreadPoolMetric(java.lang.String, java.lang.String, java.util.concurrent.ThreadPoolExecutor);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #3                  // Field applicationName:Ljava/lang/String;
       9: aload_0
      10: aload_3
      11: putfield      #4                  // Field threadPoolExecutor:Ljava/util/concurrent/ThreadPoolExecutor;
      14: aload_0
      15: aload_2
      16: putfield      #5                  // Field threadPoolName:Ljava/lang/String;
      19: return

  public java.lang.String getThreadPoolName();
    Code:
       0: aload_0
       1: getfield      #5                  // Field threadPoolName:Ljava/lang/String;
       4: areturn

  public void setThreadPoolName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field threadPoolName:Ljava/lang/String;
       5: return

  public java.util.concurrent.ThreadPoolExecutor getThreadPoolExecutor();
    Code:
       0: aload_0
       1: getfield      #4                  // Field threadPoolExecutor:Ljava/util/concurrent/ThreadPoolExecutor;
       4: areturn

  public void setThreadPoolExecutor(java.util.concurrent.ThreadPoolExecutor);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field threadPoolExecutor:Ljava/util/concurrent/ThreadPoolExecutor;
       5: return

  public java.lang.String getApplicationName();
    Code:
       0: aload_0
       1: getfield      #3                  // Field applicationName:Ljava/lang/String;
       4: areturn

  public void setApplicationName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #3                  // Field applicationName:Ljava/lang/String;
       5: return

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnull        22
      11: aload_0
      12: invokevirtual #6                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      15: aload_1
      16: invokevirtual #6                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      19: if_acmpeq     24
      22: iconst_0
      23: ireturn
      24: aload_1
      25: checkcast     #7                  // class org/apache/dubbo/metrics/model/ThreadPoolMetric
      28: astore_2
      29: aload_0
      30: getfield      #3                  // Field applicationName:Ljava/lang/String;
      33: aload_2
      34: getfield      #3                  // Field applicationName:Ljava/lang/String;
      37: invokestatic  #8                  // Method java/util/Objects.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      40: ifeq          61
      43: aload_0
      44: getfield      #5                  // Field threadPoolName:Ljava/lang/String;
      47: aload_2
      48: getfield      #5                  // Field threadPoolName:Ljava/lang/String;
      51: invokestatic  #8                  // Method java/util/Objects.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      54: ifeq          61
      57: iconst_1
      58: goto          62
      61: iconst_0
      62: ireturn

  public int hashCode();
    Code:
       0: iconst_2
       1: anewarray     #9                  // class java/lang/Object
       4: dup
       5: iconst_0
       6: aload_0
       7: getfield      #3                  // Field applicationName:Ljava/lang/String;
      10: aastore
      11: dup
      12: iconst_1
      13: aload_0
      14: getfield      #5                  // Field threadPoolName:Ljava/lang/String;
      17: aastore
      18: invokestatic  #10                 // Method java/util/Objects.hash:([Ljava/lang/Object;)I
      21: ireturn

  public java.util.Map<java.lang.String, java.lang.String> getTags();
    Code:
       0: new           #11                 // class java/util/HashMap
       3: dup
       4: invokespecial #12                 // Method java/util/HashMap."<init>":()V
       7: astore_1
       8: aload_1
       9: ldc           #13                 // String ip
      11: invokestatic  #14                 // Method org/apache/dubbo/common/utils/NetUtils.getLocalHost:()Ljava/lang/String;
      14: invokeinterface #15,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      19: pop
      20: aload_1
      21: ldc           #16                 // String pid
      23: new           #17                 // class java/lang/StringBuilder
      26: dup
      27: invokespecial #18                 // Method java/lang/StringBuilder."<init>":()V
      30: invokestatic  #19                 // Method org/apache/dubbo/common/utils/ConfigUtils.getPid:()I
      33: invokevirtual #20                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      36: ldc           #21                 // String
      38: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      41: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      44: invokeinterface #15,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      49: pop
      50: aload_1
      51: ldc           #24                 // String hostname
      53: invokestatic  #25                 // Method org/apache/dubbo/common/utils/NetUtils.getLocalHostName:()Ljava/lang/String;
      56: invokeinterface #15,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      61: pop
      62: aload_1
      63: ldc           #26                 // String application.name
      65: aload_0
      66: getfield      #3                  // Field applicationName:Ljava/lang/String;
      69: invokeinterface #15,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      74: pop
      75: aload_1
      76: ldc           #27                 // String thread.pool.name
      78: aload_0
      79: getfield      #5                  // Field threadPoolName:Ljava/lang/String;
      82: invokeinterface #15,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      87: pop
      88: aload_1
      89: areturn

  public double getCorePoolSize();
    Code:
       0: aload_0
       1: getfield      #4                  // Field threadPoolExecutor:Ljava/util/concurrent/ThreadPoolExecutor;
       4: invokevirtual #28                 // Method java/util/concurrent/ThreadPoolExecutor.getCorePoolSize:()I
       7: i2d
       8: dreturn

  public double getLargestPoolSize();
    Code:
       0: aload_0
       1: getfield      #4                  // Field threadPoolExecutor:Ljava/util/concurrent/ThreadPoolExecutor;
       4: invokevirtual #29                 // Method java/util/concurrent/ThreadPoolExecutor.getLargestPoolSize:()I
       7: i2d
       8: dreturn

  public double getMaximumPoolSize();
    Code:
       0: aload_0
       1: getfield      #4                  // Field threadPoolExecutor:Ljava/util/concurrent/ThreadPoolExecutor;
       4: invokevirtual #30                 // Method java/util/concurrent/ThreadPoolExecutor.getMaximumPoolSize:()I
       7: i2d
       8: dreturn

  public double getActiveCount();
    Code:
       0: aload_0
       1: getfield      #4                  // Field threadPoolExecutor:Ljava/util/concurrent/ThreadPoolExecutor;
       4: invokevirtual #31                 // Method java/util/concurrent/ThreadPoolExecutor.getActiveCount:()I
       7: i2d
       8: dreturn

  public double getPoolSize();
    Code:
       0: aload_0
       1: getfield      #4                  // Field threadPoolExecutor:Ljava/util/concurrent/ThreadPoolExecutor;
       4: invokevirtual #32                 // Method java/util/concurrent/ThreadPoolExecutor.getPoolSize:()I
       7: i2d
       8: dreturn

  public double getQueueSize();
    Code:
       0: aload_0
       1: getfield      #4                  // Field threadPoolExecutor:Ljava/util/concurrent/ThreadPoolExecutor;
       4: invokevirtual #33                 // Method java/util/concurrent/ThreadPoolExecutor.getQueue:()Ljava/util/concurrent/BlockingQueue;
       7: invokeinterface #34,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.size:()I
      12: i2d
      13: dreturn
}

Compiled from "SimpleMetricsCountSampler.java"
public abstract class org.apache.dubbo.metrics.collector.sample.SimpleMetricsCountSampler<S, K, M extends org.apache.dubbo.metrics.model.Metric> implements org.apache.dubbo.metrics.collector.sample.MetricsCountSampler<S, K, M> {
  private final java.util.concurrent.ConcurrentMap<M, java.util.concurrent.atomic.AtomicLong> EMPTY_COUNT;

  private final java.util.Map<K, java.util.concurrent.ConcurrentMap<M, java.util.concurrent.atomic.AtomicLong>> metricCounter;

  public org.apache.dubbo.metrics.collector.sample.SimpleMetricsCountSampler();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: putfield      #4                  // Field EMPTY_COUNT:Ljava/util/concurrent/ConcurrentMap;
      15: aload_0
      16: new           #2                  // class java/util/concurrent/ConcurrentHashMap
      19: dup
      20: invokespecial #3                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      23: putfield      #5                  // Field metricCounter:Ljava/util/Map;
      26: return

  public void inc(S, K);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokedynamic #6,  0              // InvokeDynamic #0:apply:()Ljava/util/function/Function;
       8: invokespecial #7                  // Method doExecute:(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/Function;)V
      11: return

  public void incOnEvent(S, K);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokedynamic #8,  0              // InvokeDynamic #1:apply:()Ljava/util/function/Function;
       8: invokespecial #7                  // Method doExecute:(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/Function;)V
      11: return

  public java.util.Optional<java.util.concurrent.ConcurrentMap<M, java.util.concurrent.atomic.AtomicLong>> getCount(K);
    Code:
       0: aload_0
       1: getfield      #5                  // Field metricCounter:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #9,  2            // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: ifnonnull     20
      13: aload_0
      14: getfield      #4                  // Field EMPTY_COUNT:Ljava/util/concurrent/ConcurrentMap;
      17: goto          33
      20: aload_0
      21: getfield      #5                  // Field metricCounter:Ljava/util/Map;
      24: aload_1
      25: invokeinterface #9,  2            // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      30: checkcast     #10                 // class java/util/concurrent/ConcurrentMap
      33: invokestatic  #11                 // Method java/util/Optional.ofNullable:(Ljava/lang/Object;)Ljava/util/Optional;
      36: areturn

  protected abstract void countConfigure(org.apache.dubbo.metrics.collector.sample.MetricsCountSampleConfigurer<S, K, M>);

  private void doExecute(S, K, java.util.function.Function<java.util.concurrent.atomic.AtomicLong, java.lang.Boolean>);
    Code:
       0: new           #12                 // class org/apache/dubbo/metrics/collector/sample/MetricsCountSampleConfigurer
       3: dup
       4: invokespecial #13                 // Method org/apache/dubbo/metrics/collector/sample/MetricsCountSampleConfigurer."<init>":()V
       7: astore        4
       9: aload         4
      11: aload_1
      12: invokevirtual #14                 // Method org/apache/dubbo/metrics/collector/sample/MetricsCountSampleConfigurer.setSource:(Ljava/lang/Object;)V
      15: aload         4
      17: aload_2
      18: invokevirtual #15                 // Method org/apache/dubbo/metrics/collector/sample/MetricsCountSampleConfigurer.setMetricsName:(Ljava/lang/Object;)Lorg/apache/dubbo/metrics/collector/sample/MetricsCountSampleConfigurer;
      21: pop
      22: aload_0
      23: aload         4
      25: invokevirtual #16                 // Method countConfigure:(Lorg/apache/dubbo/metrics/collector/sample/MetricsCountSampleConfigurer;)V
      28: aload_0
      29: getfield      #5                  // Field metricCounter:Ljava/util/Map;
      32: aload_2
      33: invokeinterface #9,  2            // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      38: checkcast     #17                 // class java/util/Map
      41: astore        5
      43: aload         5
      45: ifnonnull     68
      48: aload_0
      49: getfield      #5                  // Field metricCounter:Ljava/util/Map;
      52: aload_2
      53: invokedynamic #18,  0             // InvokeDynamic #2:apply:()Ljava/util/function/Function;
      58: invokeinterface #19,  3           // InterfaceMethod java/util/Map.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      63: checkcast     #17                 // class java/util/Map
      66: astore        5
      68: aload         4
      70: invokevirtual #20                 // Method org/apache/dubbo/metrics/collector/sample/MetricsCountSampleConfigurer.getMetric:()Lorg/apache/dubbo/metrics/model/Metric;
      73: ldc           #21                 // String metrics is null
      75: invokestatic  #22                 // Method org/apache/dubbo/common/utils/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      78: aload         5
      80: aload         4
      82: invokevirtual #20                 // Method org/apache/dubbo/metrics/collector/sample/MetricsCountSampleConfigurer.getMetric:()Lorg/apache/dubbo/metrics/model/Metric;
      85: invokeinterface #9,  2            // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      90: checkcast     #23                 // class java/util/concurrent/atomic/AtomicLong
      93: astore        6
      95: aload         6
      97: ifnonnull     122
     100: aload         5
     102: aload         4
     104: invokevirtual #20                 // Method org/apache/dubbo/metrics/collector/sample/MetricsCountSampleConfigurer.getMetric:()Lorg/apache/dubbo/metrics/model/Metric;
     107: invokedynamic #24,  0             // InvokeDynamic #3:apply:()Ljava/util/function/Function;
     112: invokeinterface #19,  3           // InterfaceMethod java/util/Map.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
     117: checkcast     #23                 // class java/util/concurrent/atomic/AtomicLong
     120: astore        6
     122: aload_3
     123: aload         6
     125: invokeinterface #25,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
     130: checkcast     #26                 // class java/lang/Boolean
     133: astore        7
     135: aload         7
     137: invokevirtual #27                 // Method java/lang/Boolean.booleanValue:()Z
     140: ifeq          155
     143: aload         4
     145: invokevirtual #28                 // Method org/apache/dubbo/metrics/collector/sample/MetricsCountSampleConfigurer.getFireEventHandler:()Ljava/util/function/Consumer;
     148: aload         4
     150: invokeinterface #29,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
     155: return

  private static java.util.concurrent.atomic.AtomicLong lambda$doExecute$3(org.apache.dubbo.metrics.model.Metric);
    Code:
       0: new           #23                 // class java/util/concurrent/atomic/AtomicLong
       3: dup
       4: invokespecial #30                 // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
       7: areturn

  private static java.util.concurrent.ConcurrentMap lambda$doExecute$2(java.lang.Object);
    Code:
       0: new           #2                  // class java/util/concurrent/ConcurrentHashMap
       3: dup
       4: invokespecial #3                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
       7: areturn

  private static java.lang.Boolean lambda$incOnEvent$1(java.util.concurrent.atomic.AtomicLong);
    Code:
       0: aload_0
       1: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicLong.incrementAndGet:()J
       4: pop2
       5: iconst_1
       6: invokestatic  #32                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       9: areturn

  private static java.lang.Boolean lambda$inc$0(java.util.concurrent.atomic.AtomicLong);
    Code:
       0: aload_0
       1: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicLong.incrementAndGet:()J
       4: pop2
       5: iconst_0
       6: invokestatic  #32                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       9: areturn
}

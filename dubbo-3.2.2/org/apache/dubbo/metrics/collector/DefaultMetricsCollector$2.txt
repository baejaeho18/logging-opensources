Compiled from "DefaultMetricsCollector.java"
class org.apache.dubbo.metrics.collector.DefaultMetricsCollector$2 extends org.apache.dubbo.metrics.collector.sample.SimpleMetricsCountSampler<java.lang.String, org.apache.dubbo.metrics.event.MetricsEvent$Type, org.apache.dubbo.metrics.model.ApplicationMetric> {
  final org.apache.dubbo.metrics.collector.DefaultMetricsCollector this$0;

  org.apache.dubbo.metrics.collector.DefaultMetricsCollector$2(org.apache.dubbo.metrics.collector.DefaultMetricsCollector);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lorg/apache/dubbo/metrics/collector/DefaultMetricsCollector;
       5: aload_0
       6: invokespecial #2                  // Method org/apache/dubbo/metrics/collector/sample/SimpleMetricsCountSampler."<init>":()V
       9: return

  public java.util.List<org.apache.dubbo.metrics.model.sample.MetricSample> sample();
    Code:
       0: new           #3                  // class java/util/ArrayList
       3: dup
       4: invokespecial #4                  // Method java/util/ArrayList."<init>":()V
       7: astore_1
       8: aload_0
       9: getstatic     #5                  // Field org/apache/dubbo/metrics/event/MetricsEvent$Type.APPLICATION_INFO:Lorg/apache/dubbo/metrics/event/MetricsEvent$Type;
      12: invokevirtual #6                  // Method getCount:(Ljava/lang/Object;)Ljava/util/Optional;
      15: invokedynamic #7,  0              // InvokeDynamic #0:test:()Ljava/util/function/Predicate;
      20: invokevirtual #8                  // Method java/util/Optional.filter:(Ljava/util/function/Predicate;)Ljava/util/Optional;
      23: aload_1
      24: invokedynamic #9,  0              // InvokeDynamic #1:accept:(Ljava/util/List;)Ljava/util/function/Consumer;
      29: invokevirtual #10                 // Method java/util/Optional.ifPresent:(Ljava/util/function/Consumer;)V
      32: aload_1
      33: areturn

  protected void countConfigure(org.apache.dubbo.metrics.collector.sample.MetricsCountSampleConfigurer<java.lang.String, org.apache.dubbo.metrics.event.MetricsEvent$Type, org.apache.dubbo.metrics.model.ApplicationMetric>);
    Code:
       0: aload_1
       1: aload_0
       2: invokedynamic #11,  0             // InvokeDynamic #2:apply:(Lorg/apache/dubbo/metrics/collector/DefaultMetricsCollector$2;)Ljava/util/function/Function;
       7: invokevirtual #12                 // Method org/apache/dubbo/metrics/collector/sample/MetricsCountSampleConfigurer.configureMetrics:(Ljava/util/function/Function;)Lorg/apache/dubbo/metrics/collector/sample/MetricsCountSampleConfigurer;
      10: pop
      11: return

  private org.apache.dubbo.metrics.model.ApplicationMetric lambda$countConfigure$3(org.apache.dubbo.metrics.collector.sample.MetricsCountSampleConfigurer);
    Code:
       0: new           #13                 // class org/apache/dubbo/metrics/model/ApplicationMetric
       3: dup
       4: aload_0
       5: getfield      #1                  // Field this$0:Lorg/apache/dubbo/metrics/collector/DefaultMetricsCollector;
       8: invokestatic  #14                 // Method org/apache/dubbo/metrics/collector/DefaultMetricsCollector.access$000:(Lorg/apache/dubbo/metrics/collector/DefaultMetricsCollector;)Lorg/apache/dubbo/rpc/model/ApplicationModel;
      11: invokespecial #15                 // Method org/apache/dubbo/metrics/model/ApplicationMetric."<init>":(Lorg/apache/dubbo/rpc/model/ApplicationModel;)V
      14: areturn

  private static void lambda$sample$2(java.util.List, java.util.concurrent.ConcurrentMap);
    Code:
       0: aload_1
       1: aload_0
       2: invokedynamic #16,  0             // InvokeDynamic #3:accept:(Ljava/util/List;)Ljava/util/function/BiConsumer;
       7: invokeinterface #17,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.forEach:(Ljava/util/function/BiConsumer;)V
      12: return

  private static void lambda$null$1(java.util.List, org.apache.dubbo.metrics.model.ApplicationMetric, java.util.concurrent.atomic.AtomicLong);
    Code:
       0: aload_0
       1: new           #18                 // class org/apache/dubbo/metrics/model/sample/CounterMetricSample
       4: dup
       5: getstatic     #19                 // Field org/apache/dubbo/metrics/model/key/MetricsKey.APPLICATION_METRIC_INFO:Lorg/apache/dubbo/metrics/model/key/MetricsKey;
       8: invokevirtual #20                 // Method org/apache/dubbo/metrics/model/key/MetricsKey.getName:()Ljava/lang/String;
      11: getstatic     #19                 // Field org/apache/dubbo/metrics/model/key/MetricsKey.APPLICATION_METRIC_INFO:Lorg/apache/dubbo/metrics/model/key/MetricsKey;
      14: invokevirtual #21                 // Method org/apache/dubbo/metrics/model/key/MetricsKey.getDescription:()Ljava/lang/String;
      17: aload_1
      18: invokevirtual #22                 // Method org/apache/dubbo/metrics/model/ApplicationMetric.getTags:()Ljava/util/Map;
      21: getstatic     #23                 // Field org/apache/dubbo/metrics/model/MetricsCategory.APPLICATION:Lorg/apache/dubbo/metrics/model/MetricsCategory;
      24: aload_2
      25: invokespecial #24                 // Method org/apache/dubbo/metrics/model/sample/CounterMetricSample."<init>":(Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;Lorg/apache/dubbo/metrics/model/MetricsCategory;Ljava/lang/Number;)V
      28: invokeinterface #25,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      33: pop
      34: return

  private static boolean lambda$sample$0(java.util.concurrent.ConcurrentMap);
    Code:
       0: aload_0
       1: invokeinterface #26,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.isEmpty:()Z
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn
}

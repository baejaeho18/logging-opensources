Compiled from "SimpleReferenceCache.java"
public class org.apache.dubbo.config.utils.SimpleReferenceCache implements org.apache.dubbo.common.config.ReferenceCache {
  private static final org.apache.dubbo.common.logger.ErrorTypeAwareLogger logger;

  public static final java.lang.String DEFAULT_NAME;

  public static final org.apache.dubbo.config.utils.SimpleReferenceCache$KeyGenerator DEFAULT_KEY_GENERATOR;

  private static final java.util.concurrent.atomic.AtomicInteger nameIndex;

  static final java.util.concurrent.ConcurrentMap<java.lang.String, org.apache.dubbo.config.utils.SimpleReferenceCache> CACHE_HOLDER;

  private final java.lang.String name;

  private final org.apache.dubbo.config.utils.SimpleReferenceCache$KeyGenerator generator;

  private final java.util.concurrent.ConcurrentMap<java.lang.String, java.util.List<org.apache.dubbo.config.ReferenceConfigBase<?>>> referenceKeyMap;

  private final java.util.concurrent.ConcurrentMap<java.lang.Class<?>, java.util.List<org.apache.dubbo.config.ReferenceConfigBase<?>>> referenceTypeMap;

  private final java.util.Map<org.apache.dubbo.config.ReferenceConfigBase<?>, java.lang.Object> references;

  protected org.apache.dubbo.config.utils.SimpleReferenceCache(java.lang.String, org.apache.dubbo.config.utils.SimpleReferenceCache$KeyGenerator);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #3                  // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #4                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: putfield      #5                  // Field referenceKeyMap:Ljava/util/concurrent/ConcurrentMap;
      15: aload_0
      16: new           #3                  // class java/util/concurrent/ConcurrentHashMap
      19: dup
      20: invokespecial #4                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      23: putfield      #6                  // Field referenceTypeMap:Ljava/util/concurrent/ConcurrentMap;
      26: aload_0
      27: new           #3                  // class java/util/concurrent/ConcurrentHashMap
      30: dup
      31: invokespecial #4                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      34: putfield      #7                  // Field references:Ljava/util/Map;
      37: aload_0
      38: aload_1
      39: putfield      #8                  // Field name:Ljava/lang/String;
      42: aload_0
      43: aload_2
      44: putfield      #9                  // Field generator:Lorg/apache/dubbo/config/utils/SimpleReferenceCache$KeyGenerator;
      47: return

  public static org.apache.dubbo.config.utils.SimpleReferenceCache getCache();
    Code:
       0: ldc           #11                 // String _DEFAULT_
       2: invokestatic  #12                 // Method getCache:(Ljava/lang/String;)Lorg/apache/dubbo/config/utils/SimpleReferenceCache;
       5: areturn

  public static org.apache.dubbo.config.utils.SimpleReferenceCache newCache();
    Code:
       0: new           #13                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #15                 // String _DEFAULT_#
       9: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: getstatic     #17                 // Field nameIndex:Ljava/util/concurrent/atomic/AtomicInteger;
      15: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      18: invokevirtual #19                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      21: invokevirtual #20                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      24: invokestatic  #12                 // Method getCache:(Ljava/lang/String;)Lorg/apache/dubbo/config/utils/SimpleReferenceCache;
      27: areturn

  public static org.apache.dubbo.config.utils.SimpleReferenceCache getCache(java.lang.String);
    Code:
       0: aload_0
       1: getstatic     #21                 // Field DEFAULT_KEY_GENERATOR:Lorg/apache/dubbo/config/utils/SimpleReferenceCache$KeyGenerator;
       4: invokestatic  #22                 // Method getCache:(Ljava/lang/String;Lorg/apache/dubbo/config/utils/SimpleReferenceCache$KeyGenerator;)Lorg/apache/dubbo/config/utils/SimpleReferenceCache;
       7: areturn

  public static org.apache.dubbo.config.utils.SimpleReferenceCache getCache(java.lang.String, org.apache.dubbo.config.utils.SimpleReferenceCache$KeyGenerator);
    Code:
       0: getstatic     #23                 // Field CACHE_HOLDER:Ljava/util/concurrent/ConcurrentMap;
       3: aload_0
       4: aload_1
       5: invokedynamic #24,  0             // InvokeDynamic #0:apply:(Lorg/apache/dubbo/config/utils/SimpleReferenceCache$KeyGenerator;)Ljava/util/function/Function;
      10: invokestatic  #25                 // Method org/apache/dubbo/common/utils/ConcurrentHashMapUtils.computeIfAbsent:(Ljava/util/concurrent/ConcurrentMap;Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      13: checkcast     #10                 // class org/apache/dubbo/config/utils/SimpleReferenceCache
      16: areturn

  public <T> T get(org.apache.dubbo.config.ReferenceConfigBase<T>);
    Code:
       0: aload_0
       1: getfield      #9                  // Field generator:Lorg/apache/dubbo/config/utils/SimpleReferenceCache$KeyGenerator;
       4: aload_1
       5: invokeinterface #26,  2           // InterfaceMethod org/apache/dubbo/config/utils/SimpleReferenceCache$KeyGenerator.generateKey:(Lorg/apache/dubbo/config/ReferenceConfigBase;)Ljava/lang/String;
      10: astore_2
      11: aload_1
      12: invokevirtual #27                 // Method org/apache/dubbo/config/ReferenceConfigBase.getInterfaceClass:()Ljava/lang/Class;
      15: astore_3
      16: aload_1
      17: invokevirtual #28                 // Method org/apache/dubbo/config/ReferenceConfigBase.getSingleton:()Ljava/lang/Boolean;
      20: ifnull        33
      23: aload_1
      24: invokevirtual #28                 // Method org/apache/dubbo/config/ReferenceConfigBase.getSingleton:()Ljava/lang/Boolean;
      27: invokevirtual #29                 // Method java/lang/Boolean.booleanValue:()Z
      30: ifeq          37
      33: iconst_1
      34: goto          38
      37: iconst_0
      38: istore        4
      40: aconst_null
      41: astore        5
      43: iload         4
      45: ifeq          59
      48: aload_0
      49: aload_2
      50: aload_3
      51: invokevirtual #30                 // Method get:(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;
      54: astore        5
      56: goto          75
      59: getstatic     #31                 // Field logger:Lorg/apache/dubbo/common/logger/ErrorTypeAwareLogger;
      62: ldc           #32                 // String 5-27
      64: ldc           #33                 // String
      66: ldc           #33                 // String
      68: ldc           #34                 // String Using non-singleton ReferenceConfig and ReferenceCache at the same time may cause memory leak. Call ReferenceConfig#get() directly for non-singleton ReferenceConfig instead of using ReferenceCache#get(ReferenceConfig)
      70: invokeinterface #35,  5           // InterfaceMethod org/apache/dubbo/common/logger/ErrorTypeAwareLogger.warn:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
      75: aload         5
      77: ifnonnull     140
      80: aload_0
      81: getfield      #6                  // Field referenceTypeMap:Ljava/util/concurrent/ConcurrentMap;
      84: aload_3
      85: invokedynamic #36,  0             // InvokeDynamic #1:apply:()Ljava/util/function/Function;
      90: invokestatic  #25                 // Method org/apache/dubbo/common/utils/ConcurrentHashMapUtils.computeIfAbsent:(Ljava/util/concurrent/ConcurrentMap;Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      93: checkcast     #37                 // class java/util/List
      96: astore        6
      98: aload         6
     100: aload_1
     101: invokeinterface #38,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     106: pop
     107: aload_0
     108: getfield      #5                  // Field referenceKeyMap:Ljava/util/concurrent/ConcurrentMap;
     111: aload_2
     112: invokedynamic #39,  0             // InvokeDynamic #2:apply:()Ljava/util/function/Function;
     117: invokestatic  #25                 // Method org/apache/dubbo/common/utils/ConcurrentHashMapUtils.computeIfAbsent:(Ljava/util/concurrent/ConcurrentMap;Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
     120: checkcast     #37                 // class java/util/List
     123: astore        7
     125: aload         7
     127: aload_1
     128: invokeinterface #38,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     133: pop
     134: aload_1
     135: invokevirtual #40                 // Method org/apache/dubbo/config/ReferenceConfigBase.get:()Ljava/lang/Object;
     138: astore        5
     140: aload         5
     142: areturn

  public <T> T get(java.lang.String, java.lang.Class<T>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field referenceKeyMap:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #41,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #37                 // class java/util/List
      13: astore_3
      14: aload_3
      15: invokestatic  #42                 // Method org/apache/dubbo/common/utils/CollectionUtils.isNotEmpty:(Ljava/util/Collection;)Z
      18: ifeq          35
      21: aload_3
      22: iconst_0
      23: invokeinterface #43,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      28: checkcast     #44                 // class org/apache/dubbo/config/ReferenceConfigBase
      31: invokevirtual #40                 // Method org/apache/dubbo/config/ReferenceConfigBase.get:()Ljava/lang/Object;
      34: areturn
      35: aconst_null
      36: areturn

  public <T> T get(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #5                  // Field referenceKeyMap:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #41,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #37                 // class java/util/List
      13: astore_2
      14: aload_2
      15: invokestatic  #42                 // Method org/apache/dubbo/common/utils/CollectionUtils.isNotEmpty:(Ljava/util/Collection;)Z
      18: ifeq          35
      21: aload_2
      22: iconst_0
      23: invokeinterface #43,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      28: checkcast     #44                 // class org/apache/dubbo/config/ReferenceConfigBase
      31: invokevirtual #40                 // Method org/apache/dubbo/config/ReferenceConfigBase.get:()Ljava/lang/Object;
      34: areturn
      35: aconst_null
      36: areturn

  public <T> java.util.List<T> getAll(java.lang.Class<T>);
    Code:
       0: aload_0
       1: getfield      #6                  // Field referenceTypeMap:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #41,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #37                 // class java/util/List
      13: astore_2
      14: aload_2
      15: invokestatic  #45                 // Method org/apache/dubbo/common/utils/CollectionUtils.isEmpty:(Ljava/util/Collection;)Z
      18: ifeq          25
      21: getstatic     #46                 // Field java/util/Collections.EMPTY_LIST:Ljava/util/List;
      24: areturn
      25: new           #47                 // class java/util/ArrayList
      28: dup
      29: aload_2
      30: invokeinterface #48,  1           // InterfaceMethod java/util/List.size:()I
      35: invokespecial #49                 // Method java/util/ArrayList."<init>":(I)V
      38: astore_3
      39: aload_2
      40: invokeinterface #50,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      45: astore        4
      47: aload         4
      49: invokeinterface #51,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      54: ifeq          84
      57: aload         4
      59: invokeinterface #52,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      64: checkcast     #44                 // class org/apache/dubbo/config/ReferenceConfigBase
      67: astore        5
      69: aload_3
      70: aload         5
      72: invokevirtual #40                 // Method org/apache/dubbo/config/ReferenceConfigBase.get:()Ljava/lang/Object;
      75: invokeinterface #38,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      80: pop
      81: goto          47
      84: aload_3
      85: invokestatic  #53                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;
      88: areturn

  public <T> T get(java.lang.Class<T>);
    Code:
       0: aload_0
       1: getfield      #6                  // Field referenceTypeMap:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #41,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #37                 // class java/util/List
      13: astore_2
      14: aload_2
      15: invokestatic  #42                 // Method org/apache/dubbo/common/utils/CollectionUtils.isNotEmpty:(Ljava/util/Collection;)Z
      18: ifeq          35
      21: aload_2
      22: iconst_0
      23: invokeinterface #43,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      28: checkcast     #44                 // class org/apache/dubbo/config/ReferenceConfigBase
      31: invokevirtual #40                 // Method org/apache/dubbo/config/ReferenceConfigBase.get:()Ljava/lang/Object;
      34: areturn
      35: aconst_null
      36: areturn

  public void destroy(java.lang.String, java.lang.Class<?>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field referenceKeyMap:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #54,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #37                 // class java/util/List
      13: astore_3
      14: aload_3
      15: invokestatic  #45                 // Method org/apache/dubbo/common/utils/CollectionUtils.isEmpty:(Ljava/util/Collection;)Z
      18: ifeq          22
      21: return
      22: aload_0
      23: getfield      #6                  // Field referenceTypeMap:Ljava/util/concurrent/ConcurrentMap;
      26: aload_2
      27: invokeinterface #41,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      32: checkcast     #37                 // class java/util/List
      35: astore        4
      37: aload         4
      39: invokestatic  #45                 // Method org/apache/dubbo/common/utils/CollectionUtils.isEmpty:(Ljava/util/Collection;)Z
      42: ifeq          46
      45: return
      46: aload_3
      47: invokeinterface #50,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      52: astore        5
      54: aload         5
      56: invokeinterface #51,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      61: ifeq          95
      64: aload         5
      66: invokeinterface #52,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      71: checkcast     #44                 // class org/apache/dubbo/config/ReferenceConfigBase
      74: astore        6
      76: aload         4
      78: aload         6
      80: invokeinterface #55,  2           // InterfaceMethod java/util/List.remove:(Ljava/lang/Object;)Z
      85: pop
      86: aload_0
      87: aload         6
      89: invokespecial #56                 // Method destroyReference:(Lorg/apache/dubbo/config/ReferenceConfigBase;)V
      92: goto          54
      95: return

  public void destroy(java.lang.Class<?>);
    Code:
       0: aload_0
       1: getfield      #6                  // Field referenceTypeMap:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #54,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #37                 // class java/util/List
      13: astore_2
      14: aload_2
      15: invokeinterface #50,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      20: astore_3
      21: aload_3
      22: invokeinterface #51,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      27: ifeq          75
      30: aload_3
      31: invokeinterface #52,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      36: checkcast     #44                 // class org/apache/dubbo/config/ReferenceConfigBase
      39: astore        4
      41: aload_0
      42: getfield      #9                  // Field generator:Lorg/apache/dubbo/config/utils/SimpleReferenceCache$KeyGenerator;
      45: aload         4
      47: invokeinterface #26,  2           // InterfaceMethod org/apache/dubbo/config/utils/SimpleReferenceCache$KeyGenerator.generateKey:(Lorg/apache/dubbo/config/ReferenceConfigBase;)Ljava/lang/String;
      52: astore        5
      54: aload_0
      55: getfield      #5                  // Field referenceKeyMap:Ljava/util/concurrent/ConcurrentMap;
      58: aload         5
      60: invokeinterface #54,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      65: pop
      66: aload_0
      67: aload         4
      69: invokespecial #56                 // Method destroyReference:(Lorg/apache/dubbo/config/ReferenceConfigBase;)V
      72: goto          21
      75: return

  public <T> void destroy(org.apache.dubbo.config.ReferenceConfigBase<T>);
    Code:
       0: aload_0
       1: getfield      #9                  // Field generator:Lorg/apache/dubbo/config/utils/SimpleReferenceCache$KeyGenerator;
       4: aload_1
       5: invokeinterface #26,  2           // InterfaceMethod org/apache/dubbo/config/utils/SimpleReferenceCache$KeyGenerator.generateKey:(Lorg/apache/dubbo/config/ReferenceConfigBase;)Ljava/lang/String;
      10: astore_2
      11: aload_1
      12: invokevirtual #27                 // Method org/apache/dubbo/config/ReferenceConfigBase.getInterfaceClass:()Ljava/lang/Class;
      15: astore_3
      16: aload_0
      17: aload_2
      18: aload_3
      19: invokevirtual #57                 // Method destroy:(Ljava/lang/String;Ljava/lang/Class;)V
      22: return

  public void destroyAll();
    Code:
       0: aload_0
       1: getfield      #5                  // Field referenceKeyMap:Ljava/util/concurrent/ConcurrentMap;
       4: invokestatic  #58                 // Method org/apache/dubbo/common/utils/CollectionUtils.isEmptyMap:(Ljava/util/Map;)Z
       7: ifeq          11
      10: return
      11: aload_0
      12: getfield      #5                  // Field referenceKeyMap:Ljava/util/concurrent/ConcurrentMap;
      15: aload_0
      16: invokedynamic #59,  0             // InvokeDynamic #3:accept:(Lorg/apache/dubbo/config/utils/SimpleReferenceCache;)Ljava/util/function/BiConsumer;
      21: invokeinterface #60,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.forEach:(Ljava/util/function/BiConsumer;)V
      26: aload_0
      27: getfield      #5                  // Field referenceKeyMap:Ljava/util/concurrent/ConcurrentMap;
      30: invokeinterface #61,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.clear:()V
      35: aload_0
      36: getfield      #6                  // Field referenceTypeMap:Ljava/util/concurrent/ConcurrentMap;
      39: invokeinterface #61,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.clear:()V
      44: return

  private void destroyReference(org.apache.dubbo.config.ReferenceConfigBase<?>);
    Code:
       0: aload_1
       1: invokevirtual #40                 // Method org/apache/dubbo/config/ReferenceConfigBase.get:()Ljava/lang/Object;
       4: checkcast     #62                 // class org/apache/dubbo/rpc/service/Destroyable
       7: astore_2
       8: aload_2
       9: ifnull        18
      12: aload_2
      13: invokeinterface #63,  1           // InterfaceMethod org/apache/dubbo/rpc/service/Destroyable.$destroy:()V
      18: aload_1
      19: invokevirtual #64                 // Method org/apache/dubbo/config/ReferenceConfigBase.destroy:()V
      22: return

  public java.util.Map<java.lang.String, java.util.List<org.apache.dubbo.config.ReferenceConfigBase<?>>> getReferenceMap();
    Code:
       0: aload_0
       1: getfield      #5                  // Field referenceKeyMap:Ljava/util/concurrent/ConcurrentMap;
       4: areturn

  public java.util.Map<java.lang.Class<?>, java.util.List<org.apache.dubbo.config.ReferenceConfigBase<?>>> getReferenceTypeMap();
    Code:
       0: aload_0
       1: getfield      #6                  // Field referenceTypeMap:Ljava/util/concurrent/ConcurrentMap;
       4: areturn

  public java.lang.String toString();
    Code:
       0: new           #13                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #65                 // String ReferenceCache(name:
       9: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #8                  // Field name:Ljava/lang/String;
      16: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      19: ldc           #66                 // String )
      21: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: invokevirtual #20                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      27: areturn

  private void lambda$destroyAll$4(java.lang.String, java.util.List);
    Code:
       0: aload_2
       1: invokeinterface #50,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       6: astore_3
       7: aload_3
       8: invokeinterface #51,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      13: ifeq          36
      16: aload_3
      17: invokeinterface #52,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      22: checkcast     #44                 // class org/apache/dubbo/config/ReferenceConfigBase
      25: astore        4
      27: aload_0
      28: aload         4
      30: invokespecial #56                 // Method destroyReference:(Lorg/apache/dubbo/config/ReferenceConfigBase;)V
      33: goto          7
      36: return

  private static java.util.List lambda$get$3(java.lang.String);
    Code:
       0: new           #47                 // class java/util/ArrayList
       3: dup
       4: invokespecial #67                 // Method java/util/ArrayList."<init>":()V
       7: invokestatic  #68                 // Method java/util/Collections.synchronizedList:(Ljava/util/List;)Ljava/util/List;
      10: areturn

  private static java.util.List lambda$get$2(java.lang.Class);
    Code:
       0: new           #47                 // class java/util/ArrayList
       3: dup
       4: invokespecial #67                 // Method java/util/ArrayList."<init>":()V
       7: invokestatic  #68                 // Method java/util/Collections.synchronizedList:(Ljava/util/List;)Ljava/util/List;
      10: areturn

  private static org.apache.dubbo.config.utils.SimpleReferenceCache lambda$getCache$1(org.apache.dubbo.config.utils.SimpleReferenceCache$KeyGenerator, java.lang.String);
    Code:
       0: new           #10                 // class org/apache/dubbo/config/utils/SimpleReferenceCache
       3: dup
       4: aload_1
       5: aload_0
       6: invokespecial #69                 // Method "<init>":(Ljava/lang/String;Lorg/apache/dubbo/config/utils/SimpleReferenceCache$KeyGenerator;)V
       9: areturn

  private static java.lang.String lambda$static$0(org.apache.dubbo.config.ReferenceConfigBase);
    Code:
       0: aload_0
       1: invokevirtual #70                 // Method org/apache/dubbo/config/ReferenceConfigBase.getInterface:()Ljava/lang/String;
       4: astore_1
       5: aload_1
       6: invokestatic  #71                 // Method org/apache/dubbo/common/utils/StringUtils.isBlank:(Ljava/lang/CharSequence;)Z
       9: ifeq          22
      12: aload_0
      13: invokevirtual #27                 // Method org/apache/dubbo/config/ReferenceConfigBase.getInterfaceClass:()Ljava/lang/Class;
      16: astore_2
      17: aload_2
      18: invokevirtual #72                 // Method java/lang/Class.getName:()Ljava/lang/String;
      21: astore_1
      22: aload_1
      23: invokestatic  #71                 // Method org/apache/dubbo/common/utils/StringUtils.isBlank:(Ljava/lang/CharSequence;)Z
      26: ifeq          56
      29: new           #73                 // class java/lang/IllegalArgumentException
      32: dup
      33: new           #13                 // class java/lang/StringBuilder
      36: dup
      37: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
      40: ldc           #74                 // String No interface info in ReferenceConfig
      42: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      45: aload_0
      46: invokevirtual #75                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      49: invokevirtual #20                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      52: invokespecial #76                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      55: athrow
      56: aload_1
      57: aload_0
      58: invokevirtual #77                 // Method org/apache/dubbo/config/ReferenceConfigBase.getGroup:()Ljava/lang/String;
      61: aload_0
      62: invokevirtual #78                 // Method org/apache/dubbo/config/ReferenceConfigBase.getVersion:()Ljava/lang/String;
      65: invokestatic  #79                 // Method org/apache/dubbo/common/BaseServiceMetadata.buildServiceKey:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      68: areturn

  static {};
    Code:
       0: ldc           #10                 // class org/apache/dubbo/config/utils/SimpleReferenceCache
       2: invokestatic  #80                 // Method org/apache/dubbo/common/logger/LoggerFactory.getErrorTypeAwareLogger:(Ljava/lang/Class;)Lorg/apache/dubbo/common/logger/ErrorTypeAwareLogger;
       5: putstatic     #31                 // Field logger:Lorg/apache/dubbo/common/logger/ErrorTypeAwareLogger;
       8: invokedynamic #81,  0             // InvokeDynamic #4:generateKey:()Lorg/apache/dubbo/config/utils/SimpleReferenceCache$KeyGenerator;
      13: putstatic     #21                 // Field DEFAULT_KEY_GENERATOR:Lorg/apache/dubbo/config/utils/SimpleReferenceCache$KeyGenerator;
      16: new           #82                 // class java/util/concurrent/atomic/AtomicInteger
      19: dup
      20: invokespecial #83                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      23: putstatic     #17                 // Field nameIndex:Ljava/util/concurrent/atomic/AtomicInteger;
      26: new           #3                  // class java/util/concurrent/ConcurrentHashMap
      29: dup
      30: invokespecial #4                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      33: putstatic     #23                 // Field CACHE_HOLDER:Ljava/util/concurrent/ConcurrentMap;
      36: return
}

Compiled from "Netty4BatchWriteQueue.java"
public class org.apache.dubbo.remoting.transport.netty4.Netty4BatchWriteQueue extends org.apache.dubbo.common.BatchExecutorQueue<org.apache.dubbo.remoting.transport.netty4.Netty4BatchWriteQueue$MessageTuple> {
  private final io.netty.channel.Channel channel;

  private final io.netty.channel.EventLoop eventLoop;

  private final java.util.Queue<io.netty.channel.ChannelPromise> promises;

  private final org.apache.dubbo.remoting.exchange.support.MultiMessage multiMessage;

  private org.apache.dubbo.remoting.transport.netty4.Netty4BatchWriteQueue(io.netty.channel.Channel);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method org/apache/dubbo/common/BatchExecutorQueue."<init>":()V
       4: aload_0
       5: new           #3                  // class java/util/LinkedList
       8: dup
       9: invokespecial #4                  // Method java/util/LinkedList."<init>":()V
      12: putfield      #1                  // Field promises:Ljava/util/Queue;
      15: aload_0
      16: invokestatic  #5                  // Method org/apache/dubbo/remoting/exchange/support/MultiMessage.create:()Lorg/apache/dubbo/remoting/exchange/support/MultiMessage;
      19: putfield      #6                  // Field multiMessage:Lorg/apache/dubbo/remoting/exchange/support/MultiMessage;
      22: aload_0
      23: aload_1
      24: putfield      #7                  // Field channel:Lio/netty/channel/Channel;
      27: aload_0
      28: aload_1
      29: invokeinterface #8,  1            // InterfaceMethod io/netty/channel/Channel.eventLoop:()Lio/netty/channel/EventLoop;
      34: putfield      #9                  // Field eventLoop:Lio/netty/channel/EventLoop;
      37: return

  public io.netty.channel.ChannelFuture enqueue(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_0
       3: getfield      #7                  // Field channel:Lio/netty/channel/Channel;
       6: invokeinterface #10,  1           // InterfaceMethod io/netty/channel/Channel.newPromise:()Lio/netty/channel/ChannelPromise;
      11: invokevirtual #11                 // Method enqueue:(Ljava/lang/Object;Lio/netty/channel/ChannelPromise;)Lio/netty/channel/ChannelFuture;
      14: areturn

  public io.netty.channel.ChannelFuture enqueue(java.lang.Object, io.netty.channel.ChannelPromise);
    Code:
       0: new           #12                 // class org/apache/dubbo/remoting/transport/netty4/Netty4BatchWriteQueue$MessageTuple
       3: dup
       4: aload_1
       5: aload_2
       6: invokespecial #13                 // Method org/apache/dubbo/remoting/transport/netty4/Netty4BatchWriteQueue$MessageTuple."<init>":(Ljava/lang/Object;Lio/netty/channel/ChannelPromise;)V
       9: astore_3
      10: aload_0
      11: aload_3
      12: aload_0
      13: getfield      #9                  // Field eventLoop:Lio/netty/channel/EventLoop;
      16: invokespecial #14                 // Method org/apache/dubbo/common/BatchExecutorQueue.enqueue:(Ljava/lang/Object;Ljava/util/concurrent/Executor;)V
      19: aload_3
      20: invokestatic  #15                 // Method org/apache/dubbo/remoting/transport/netty4/Netty4BatchWriteQueue$MessageTuple.access$000:(Lorg/apache/dubbo/remoting/transport/netty4/Netty4BatchWriteQueue$MessageTuple;)Lio/netty/channel/ChannelPromise;
      23: areturn

  protected void prepare(org.apache.dubbo.remoting.transport.netty4.Netty4BatchWriteQueue$MessageTuple);
    Code:
       0: aload_0
       1: getfield      #6                  // Field multiMessage:Lorg/apache/dubbo/remoting/exchange/support/MultiMessage;
       4: aload_1
       5: invokestatic  #16                 // Method org/apache/dubbo/remoting/transport/netty4/Netty4BatchWriteQueue$MessageTuple.access$100:(Lorg/apache/dubbo/remoting/transport/netty4/Netty4BatchWriteQueue$MessageTuple;)Ljava/lang/Object;
       8: invokevirtual #17                 // Method org/apache/dubbo/remoting/exchange/support/MultiMessage.addMessage:(Ljava/lang/Object;)V
      11: aload_0
      12: getfield      #1                  // Field promises:Ljava/util/Queue;
      15: aload_1
      16: invokestatic  #15                 // Method org/apache/dubbo/remoting/transport/netty4/Netty4BatchWriteQueue$MessageTuple.access$000:(Lorg/apache/dubbo/remoting/transport/netty4/Netty4BatchWriteQueue$MessageTuple;)Lio/netty/channel/ChannelPromise;
      19: invokeinterface #18,  2           // InterfaceMethod java/util/Queue.add:(Ljava/lang/Object;)Z
      24: pop
      25: return

  protected void flush(org.apache.dubbo.remoting.transport.netty4.Netty4BatchWriteQueue$MessageTuple);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #19                 // Method prepare:(Lorg/apache/dubbo/remoting/transport/netty4/Netty4BatchWriteQueue$MessageTuple;)V
       5: aload_0
       6: getfield      #6                  // Field multiMessage:Lorg/apache/dubbo/remoting/exchange/support/MultiMessage;
       9: astore_2
      10: aload_0
      11: getfield      #6                  // Field multiMessage:Lorg/apache/dubbo/remoting/exchange/support/MultiMessage;
      14: invokevirtual #20                 // Method org/apache/dubbo/remoting/exchange/support/MultiMessage.size:()I
      17: iconst_1
      18: if_icmpne     30
      21: aload_0
      22: getfield      #6                  // Field multiMessage:Lorg/apache/dubbo/remoting/exchange/support/MultiMessage;
      25: iconst_0
      26: invokevirtual #21                 // Method org/apache/dubbo/remoting/exchange/support/MultiMessage.get:(I)Ljava/lang/Object;
      29: astore_2
      30: aload_0
      31: getfield      #7                  // Field channel:Lio/netty/channel/Channel;
      34: aload_2
      35: invokeinterface #22,  2           // InterfaceMethod io/netty/channel/Channel.writeAndFlush:(Ljava/lang/Object;)Lio/netty/channel/ChannelFuture;
      40: new           #23                 // class org/apache/dubbo/remoting/transport/netty4/Netty4BatchWriteQueue$1
      43: dup
      44: aload_0
      45: invokespecial #24                 // Method org/apache/dubbo/remoting/transport/netty4/Netty4BatchWriteQueue$1."<init>":(Lorg/apache/dubbo/remoting/transport/netty4/Netty4BatchWriteQueue;)V
      48: invokeinterface #25,  2           // InterfaceMethod io/netty/channel/ChannelFuture.addListener:(Lio/netty/util/concurrent/GenericFutureListener;)Lio/netty/channel/ChannelFuture;
      53: pop
      54: aload_0
      55: getfield      #6                  // Field multiMessage:Lorg/apache/dubbo/remoting/exchange/support/MultiMessage;
      58: invokevirtual #26                 // Method org/apache/dubbo/remoting/exchange/support/MultiMessage.removeMessages:()Ljava/util/Collection;
      61: pop
      62: return

  public static org.apache.dubbo.remoting.transport.netty4.Netty4BatchWriteQueue createWriteQueue(io.netty.channel.Channel);
    Code:
       0: new           #27                 // class org/apache/dubbo/remoting/transport/netty4/Netty4BatchWriteQueue
       3: dup
       4: aload_0
       5: invokespecial #28                 // Method "<init>":(Lio/netty/channel/Channel;)V
       8: areturn

  protected void flush(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #12                 // class org/apache/dubbo/remoting/transport/netty4/Netty4BatchWriteQueue$MessageTuple
       5: invokevirtual #29                 // Method flush:(Lorg/apache/dubbo/remoting/transport/netty4/Netty4BatchWriteQueue$MessageTuple;)V
       8: return

  protected void prepare(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #12                 // class org/apache/dubbo/remoting/transport/netty4/Netty4BatchWriteQueue$MessageTuple
       5: invokevirtual #19                 // Method prepare:(Lorg/apache/dubbo/remoting/transport/netty4/Netty4BatchWriteQueue$MessageTuple;)V
       8: return

  static java.util.Queue access$200(org.apache.dubbo.remoting.transport.netty4.Netty4BatchWriteQueue);
    Code:
       0: aload_0
       1: getfield      #1                  // Field promises:Ljava/util/Queue;
       4: areturn
}

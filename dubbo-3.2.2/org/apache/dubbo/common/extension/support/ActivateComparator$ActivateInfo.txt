Compiled from "ActivateComparator.java"
class org.apache.dubbo.common.extension.support.ActivateComparator$ActivateInfo {
  private java.lang.String[] before;

  private java.lang.String[] after;

  private int order;

  private org.apache.dubbo.common.extension.support.ActivateComparator$ActivateInfo();
    Code:
       0: aload_0
       1: invokespecial #8                  // Method java/lang/Object."<init>":()V
       4: return

  private boolean applicableToCompare();
    Code:
       0: aload_0
       1: getfield      #2                  // Field before:[Ljava/lang/String;
       4: invokestatic  #9                  // Method org/apache/dubbo/common/utils/ArrayUtils.isNotEmpty:([Ljava/lang/Object;)Z
       7: ifne          20
      10: aload_0
      11: getfield      #1                  // Field after:[Ljava/lang/String;
      14: invokestatic  #9                  // Method org/apache/dubbo/common/utils/ArrayUtils.isNotEmpty:([Ljava/lang/Object;)Z
      17: ifeq          24
      20: iconst_1
      21: goto          25
      24: iconst_0
      25: ireturn

  private boolean isLess(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #2                  // Field before:[Ljava/lang/String;
       4: invokestatic  #10                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
       7: aload_1
       8: invokeinterface #11,  2           // InterfaceMethod java/util/List.contains:(Ljava/lang/Object;)Z
      13: ireturn

  private boolean isMore(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #1                  // Field after:[Ljava/lang/String;
       4: invokestatic  #10                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
       7: aload_1
       8: invokeinterface #11,  2           // InterfaceMethod java/util/List.contains:(Ljava/lang/Object;)Z
      13: ireturn

  static boolean access$000(org.apache.dubbo.common.extension.support.ActivateComparator$ActivateInfo);
    Code:
       0: aload_0
       1: invokespecial #7                  // Method applicableToCompare:()Z
       4: ireturn

  static boolean access$100(org.apache.dubbo.common.extension.support.ActivateComparator$ActivateInfo, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #6                  // Method isLess:(Ljava/lang/String;)Z
       5: ireturn

  static boolean access$200(org.apache.dubbo.common.extension.support.ActivateComparator$ActivateInfo, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #5                  // Method isMore:(Ljava/lang/String;)Z
       5: ireturn

  static int access$300(org.apache.dubbo.common.extension.support.ActivateComparator$ActivateInfo);
    Code:
       0: aload_0
       1: getfield      #4                  // Field order:I
       4: ireturn

  org.apache.dubbo.common.extension.support.ActivateComparator$ActivateInfo(org.apache.dubbo.common.extension.support.ActivateComparator$1);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method "<init>":()V
       4: return

  static java.lang.String[] access$502(org.apache.dubbo.common.extension.support.ActivateComparator$ActivateInfo, java.lang.String[]);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #2                  // Field before:[Ljava/lang/String;
       6: areturn

  static java.lang.String[] access$602(org.apache.dubbo.common.extension.support.ActivateComparator$ActivateInfo, java.lang.String[]);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #1                  // Field after:[Ljava/lang/String;
       6: areturn

  static int access$302(org.apache.dubbo.common.extension.support.ActivateComparator$ActivateInfo, int);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #4                  // Field order:I
       6: ireturn
}

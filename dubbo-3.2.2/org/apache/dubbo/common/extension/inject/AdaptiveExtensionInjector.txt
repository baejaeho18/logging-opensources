Compiled from "AdaptiveExtensionInjector.java"
public class org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector implements org.apache.dubbo.common.extension.ExtensionInjector,org.apache.dubbo.common.context.Lifecycle {
  private java.util.Collection<org.apache.dubbo.common.extension.ExtensionInjector> injectors;

  private org.apache.dubbo.common.extension.ExtensionAccessor extensionAccessor;

  public org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #2                  // Method java/util/Collections.emptyList:()Ljava/util/List;
       8: putfield      #3                  // Field injectors:Ljava/util/Collection;
      11: return

  public void setExtensionAccessor(org.apache.dubbo.common.extension.ExtensionAccessor);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field extensionAccessor:Lorg/apache/dubbo/common/extension/ExtensionAccessor;
       5: return

  public void initialize() throws java.lang.IllegalStateException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field extensionAccessor:Lorg/apache/dubbo/common/extension/ExtensionAccessor;
       4: ldc           #5                  // class org/apache/dubbo/common/extension/ExtensionInjector
       6: invokeinterface #6,  2            // InterfaceMethod org/apache/dubbo/common/extension/ExtensionAccessor.getExtensionLoader:(Ljava/lang/Class;)Lorg/apache/dubbo/common/extension/ExtensionLoader;
      11: astore_1
      12: aload_0
      13: aload_1
      14: invokevirtual #7                  // Method org/apache/dubbo/common/extension/ExtensionLoader.getSupportedExtensions:()Ljava/util/Set;
      17: invokeinterface #8,  1            // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
      22: aload_1
      23: dup
      24: invokevirtual #9                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      27: pop
      28: invokedynamic #10,  0             // InvokeDynamic #0:apply:(Lorg/apache/dubbo/common/extension/ExtensionLoader;)Ljava/util/function/Function;
      33: invokeinterface #11,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      38: invokestatic  #12                 // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
      41: invokedynamic #13,  0             // InvokeDynamic #1:apply:()Ljava/util/function/Function;
      46: invokestatic  #14                 // Method java/util/stream/Collectors.collectingAndThen:(Ljava/util/stream/Collector;Ljava/util/function/Function;)Ljava/util/stream/Collector;
      49: invokeinterface #15,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      54: checkcast     #16                 // class java/util/Collection
      57: putfield      #3                  // Field injectors:Ljava/util/Collection;
      60: return

  public <T> T getInstance(java.lang.Class<T>, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #3                  // Field injectors:Ljava/util/Collection;
       4: invokeinterface #17,  1           // InterfaceMethod java/util/Collection.stream:()Ljava/util/stream/Stream;
       9: aload_1
      10: aload_2
      11: invokedynamic #18,  0             // InvokeDynamic #2:apply:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/function/Function;
      16: invokeinterface #11,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      21: invokedynamic #19,  0             // InvokeDynamic #3:test:()Ljava/util/function/Predicate;
      26: invokeinterface #20,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      31: invokeinterface #21,  1           // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      36: aconst_null
      37: invokevirtual #22                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      40: areturn

  public void start() throws java.lang.IllegalStateException;
    Code:
       0: return

  public void destroy() throws java.lang.IllegalStateException;
    Code:
       0: return

  private static java.lang.Object lambda$getInstance$0(java.lang.Class, java.lang.String, org.apache.dubbo.common.extension.ExtensionInjector);
    Code:
       0: aload_2
       1: aload_0
       2: aload_1
       3: invokeinterface #23,  3           // InterfaceMethod org/apache/dubbo/common/extension/ExtensionInjector.getInstance:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Object;
       8: areturn
}

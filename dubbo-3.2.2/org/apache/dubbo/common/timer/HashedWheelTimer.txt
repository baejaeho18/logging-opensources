Compiled from "HashedWheelTimer.java"
public class org.apache.dubbo.common.timer.HashedWheelTimer implements org.apache.dubbo.common.timer.Timer {
  public static final java.lang.String NAME;

  private static final org.apache.dubbo.common.logger.ErrorTypeAwareLogger logger;

  private static final java.util.concurrent.atomic.AtomicInteger INSTANCE_COUNTER;

  private static final java.util.concurrent.atomic.AtomicBoolean WARNED_TOO_MANY_INSTANCES;

  private static final int INSTANCE_COUNT_LIMIT;

  private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<org.apache.dubbo.common.timer.HashedWheelTimer> WORKER_STATE_UPDATER;

  private final org.apache.dubbo.common.timer.HashedWheelTimer$Worker worker;

  private final java.lang.Thread workerThread;

  private static final int WORKER_STATE_INIT;

  private static final int WORKER_STATE_STARTED;

  private static final int WORKER_STATE_SHUTDOWN;

  private volatile int workerState;

  private final long tickDuration;

  private final org.apache.dubbo.common.timer.HashedWheelTimer$HashedWheelBucket[] wheel;

  private final int mask;

  private final java.util.concurrent.CountDownLatch startTimeInitialized;

  private final java.util.Queue<org.apache.dubbo.common.timer.HashedWheelTimer$HashedWheelTimeout> timeouts;

  private final java.util.Queue<org.apache.dubbo.common.timer.HashedWheelTimer$HashedWheelTimeout> cancelledTimeouts;

  private final java.util.concurrent.atomic.AtomicLong pendingTimeouts;

  private final long maxPendingTimeouts;

  private volatile long startTime;

  private static final boolean IS_OS_WINDOWS;

  public org.apache.dubbo.common.timer.HashedWheelTimer();
    Code:
       0: aload_0
       1: invokestatic  #14                 // Method java/util/concurrent/Executors.defaultThreadFactory:()Ljava/util/concurrent/ThreadFactory;
       4: invokespecial #15                 // Method "<init>":(Ljava/util/concurrent/ThreadFactory;)V
       7: return

  public org.apache.dubbo.common.timer.HashedWheelTimer(long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: invokestatic  #14                 // Method java/util/concurrent/Executors.defaultThreadFactory:()Ljava/util/concurrent/ThreadFactory;
       4: lload_1
       5: aload_3
       6: invokespecial #16                 // Method "<init>":(Ljava/util/concurrent/ThreadFactory;JLjava/util/concurrent/TimeUnit;)V
       9: return

  public org.apache.dubbo.common.timer.HashedWheelTimer(long, java.util.concurrent.TimeUnit, int);
    Code:
       0: aload_0
       1: invokestatic  #14                 // Method java/util/concurrent/Executors.defaultThreadFactory:()Ljava/util/concurrent/ThreadFactory;
       4: lload_1
       5: aload_3
       6: iload         4
       8: invokespecial #17                 // Method "<init>":(Ljava/util/concurrent/ThreadFactory;JLjava/util/concurrent/TimeUnit;I)V
      11: return

  public org.apache.dubbo.common.timer.HashedWheelTimer(java.util.concurrent.ThreadFactory);
    Code:
       0: aload_0
       1: aload_1
       2: ldc2_w        #18                 // long 100l
       5: getstatic     #20                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
       8: invokespecial #16                 // Method "<init>":(Ljava/util/concurrent/ThreadFactory;JLjava/util/concurrent/TimeUnit;)V
      11: return

  public org.apache.dubbo.common.timer.HashedWheelTimer(java.util.concurrent.ThreadFactory, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: aload_1
       2: lload_2
       3: aload         4
       5: sipush        512
       8: invokespecial #17                 // Method "<init>":(Ljava/util/concurrent/ThreadFactory;JLjava/util/concurrent/TimeUnit;I)V
      11: return

  public org.apache.dubbo.common.timer.HashedWheelTimer(java.util.concurrent.ThreadFactory, long, java.util.concurrent.TimeUnit, int);
    Code:
       0: aload_0
       1: aload_1
       2: lload_2
       3: aload         4
       5: iload         5
       7: ldc2_w        #21                 // long -1l
      10: invokespecial #23                 // Method "<init>":(Ljava/util/concurrent/ThreadFactory;JLjava/util/concurrent/TimeUnit;IJ)V
      13: return

  public org.apache.dubbo.common.timer.HashedWheelTimer(java.util.concurrent.ThreadFactory, long, java.util.concurrent.TimeUnit, int, long);
    Code:
       0: aload_0
       1: invokespecial #24                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #25                 // class org/apache/dubbo/common/timer/HashedWheelTimer$Worker
       8: dup
       9: aload_0
      10: aconst_null
      11: invokespecial #26                 // Method org/apache/dubbo/common/timer/HashedWheelTimer$Worker."<init>":(Lorg/apache/dubbo/common/timer/HashedWheelTimer;Lorg/apache/dubbo/common/timer/HashedWheelTimer$1;)V
      14: putfield      #27                 // Field worker:Lorg/apache/dubbo/common/timer/HashedWheelTimer$Worker;
      17: aload_0
      18: new           #28                 // class java/util/concurrent/CountDownLatch
      21: dup
      22: iconst_1
      23: invokespecial #29                 // Method java/util/concurrent/CountDownLatch."<init>":(I)V
      26: putfield      #12                 // Field startTimeInitialized:Ljava/util/concurrent/CountDownLatch;
      29: aload_0
      30: new           #30                 // class java/util/concurrent/LinkedBlockingQueue
      33: dup
      34: invokespecial #31                 // Method java/util/concurrent/LinkedBlockingQueue."<init>":()V
      37: putfield      #8                  // Field timeouts:Ljava/util/Queue;
      40: aload_0
      41: new           #30                 // class java/util/concurrent/LinkedBlockingQueue
      44: dup
      45: invokespecial #31                 // Method java/util/concurrent/LinkedBlockingQueue."<init>":()V
      48: putfield      #6                  // Field cancelledTimeouts:Ljava/util/Queue;
      51: aload_0
      52: new           #32                 // class java/util/concurrent/atomic/AtomicLong
      55: dup
      56: lconst_0
      57: invokespecial #33                 // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      60: putfield      #3                  // Field pendingTimeouts:Ljava/util/concurrent/atomic/AtomicLong;
      63: aload_1
      64: ifnonnull     77
      67: new           #34                 // class java/lang/NullPointerException
      70: dup
      71: ldc           #35                 // String threadFactory
      73: invokespecial #36                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      76: athrow
      77: aload         4
      79: ifnonnull     92
      82: new           #34                 // class java/lang/NullPointerException
      85: dup
      86: ldc           #37                 // String unit
      88: invokespecial #36                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      91: athrow
      92: lload_2
      93: lconst_0
      94: lcmp
      95: ifgt          125
      98: new           #38                 // class java/lang/IllegalArgumentException
     101: dup
     102: new           #39                 // class java/lang/StringBuilder
     105: dup
     106: invokespecial #40                 // Method java/lang/StringBuilder."<init>":()V
     109: ldc           #41                 // String tickDuration must be greater than 0:
     111: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     114: lload_2
     115: invokevirtual #43                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     118: invokevirtual #44                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     121: invokespecial #45                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     124: athrow
     125: iload         5
     127: ifgt          158
     130: new           #38                 // class java/lang/IllegalArgumentException
     133: dup
     134: new           #39                 // class java/lang/StringBuilder
     137: dup
     138: invokespecial #40                 // Method java/lang/StringBuilder."<init>":()V
     141: ldc           #46                 // String ticksPerWheel must be greater than 0:
     143: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     146: iload         5
     148: invokevirtual #47                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     151: invokevirtual #44                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     154: invokespecial #45                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     157: athrow
     158: aload_0
     159: iload         5
     161: invokestatic  #48                 // Method createWheel:(I)[Lorg/apache/dubbo/common/timer/HashedWheelTimer$HashedWheelBucket;
     164: putfield      #10                 // Field wheel:[Lorg/apache/dubbo/common/timer/HashedWheelTimer$HashedWheelBucket;
     167: aload_0
     168: aload_0
     169: getfield      #10                 // Field wheel:[Lorg/apache/dubbo/common/timer/HashedWheelTimer$HashedWheelBucket;
     172: arraylength
     173: iconst_1
     174: isub
     175: putfield      #11                 // Field mask:I
     178: aload_0
     179: aload         4
     181: lload_2
     182: invokevirtual #49                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
     185: putfield      #7                  // Field tickDuration:J
     188: aload_0
     189: getfield      #7                  // Field tickDuration:J
     192: ldc2_w        #51                 // long 9223372036854775807l
     195: aload_0
     196: getfield      #10                 // Field wheel:[Lorg/apache/dubbo/common/timer/HashedWheelTimer$HashedWheelBucket;
     199: arraylength
     200: i2l
     201: ldiv
     202: lcmp
     203: iflt          246
     206: new           #38                 // class java/lang/IllegalArgumentException
     209: dup
     210: ldc           #53                 // String tickDuration: %d (expected: 0 < tickDuration in nanos < %d
     212: iconst_2
     213: anewarray     #54                 // class java/lang/Object
     216: dup
     217: iconst_0
     218: lload_2
     219: invokestatic  #55                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     222: aastore
     223: dup
     224: iconst_1
     225: ldc2_w        #51                 // long 9223372036854775807l
     228: aload_0
     229: getfield      #10                 // Field wheel:[Lorg/apache/dubbo/common/timer/HashedWheelTimer$HashedWheelBucket;
     232: arraylength
     233: i2l
     234: ldiv
     235: invokestatic  #55                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     238: aastore
     239: invokestatic  #56                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     242: invokespecial #45                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     245: athrow
     246: aload_0
     247: aload_1
     248: aload_0
     249: getfield      #27                 // Field worker:Lorg/apache/dubbo/common/timer/HashedWheelTimer$Worker;
     252: invokeinterface #57,  2           // InterfaceMethod java/util/concurrent/ThreadFactory.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;
     257: putfield      #58                 // Field workerThread:Ljava/lang/Thread;
     260: aload_0
     261: lload         6
     263: putfield      #59                 // Field maxPendingTimeouts:J
     266: getstatic     #60                 // Field INSTANCE_COUNTER:Ljava/util/concurrent/atomic/AtomicInteger;
     269: invokevirtual #61                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
     272: bipush        64
     274: if_icmple     291
     277: getstatic     #63                 // Field WARNED_TOO_MANY_INSTANCES:Ljava/util/concurrent/atomic/AtomicBoolean;
     280: iconst_0
     281: iconst_1
     282: invokevirtual #64                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
     285: ifeq          291
     288: invokestatic  #65                 // Method reportTooManyInstances:()V
     291: return

  protected void finalize() throws java.lang.Throwable;
    Code:
       0: aload_0
       1: invokespecial #66                 // Method java/lang/Object.finalize:()V
       4: getstatic     #9                  // Field WORKER_STATE_UPDATER:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: aload_0
       8: iconst_2
       9: invokevirtual #67                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndSet:(Ljava/lang/Object;I)I
      12: iconst_2
      13: if_icmpeq     48
      16: getstatic     #60                 // Field INSTANCE_COUNTER:Ljava/util/concurrent/atomic/AtomicInteger;
      19: invokevirtual #68                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      22: pop
      23: goto          48
      26: astore_1
      27: getstatic     #9                  // Field WORKER_STATE_UPDATER:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      30: aload_0
      31: iconst_2
      32: invokevirtual #67                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndSet:(Ljava/lang/Object;I)I
      35: iconst_2
      36: if_icmpeq     46
      39: getstatic     #60                 // Field INSTANCE_COUNTER:Ljava/util/concurrent/atomic/AtomicInteger;
      42: invokevirtual #68                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      45: pop
      46: aload_1
      47: athrow
      48: return
    Exception table:
       from    to  target type
           0     4    26   any

  private static org.apache.dubbo.common.timer.HashedWheelTimer$HashedWheelBucket[] createWheel(int);
    Code:
       0: iload_0
       1: ifgt          31
       4: new           #38                 // class java/lang/IllegalArgumentException
       7: dup
       8: new           #39                 // class java/lang/StringBuilder
      11: dup
      12: invokespecial #40                 // Method java/lang/StringBuilder."<init>":()V
      15: ldc           #46                 // String ticksPerWheel must be greater than 0:
      17: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      20: iload_0
      21: invokevirtual #47                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      24: invokevirtual #44                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      27: invokespecial #45                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      30: athrow
      31: iload_0
      32: ldc           #69                 // int 1073741824
      34: if_icmple     64
      37: new           #38                 // class java/lang/IllegalArgumentException
      40: dup
      41: new           #39                 // class java/lang/StringBuilder
      44: dup
      45: invokespecial #40                 // Method java/lang/StringBuilder."<init>":()V
      48: ldc           #70                 // String ticksPerWheel may not be greater than 2^30:
      50: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      53: iload_0
      54: invokevirtual #47                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      57: invokevirtual #44                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      60: invokespecial #45                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      63: athrow
      64: iload_0
      65: invokestatic  #71                 // Method normalizeTicksPerWheel:(I)I
      68: istore_0
      69: iload_0
      70: anewarray     #72                 // class org/apache/dubbo/common/timer/HashedWheelTimer$HashedWheelBucket
      73: astore_1
      74: iconst_0
      75: istore_2
      76: iload_2
      77: aload_1
      78: arraylength
      79: if_icmpge     99
      82: aload_1
      83: iload_2
      84: new           #72                 // class org/apache/dubbo/common/timer/HashedWheelTimer$HashedWheelBucket
      87: dup
      88: aconst_null
      89: invokespecial #73                 // Method org/apache/dubbo/common/timer/HashedWheelTimer$HashedWheelBucket."<init>":(Lorg/apache/dubbo/common/timer/HashedWheelTimer$1;)V
      92: aastore
      93: iinc          2, 1
      96: goto          76
      99: aload_1
     100: areturn

  private static int normalizeTicksPerWheel(int);
    Code:
       0: iload_0
       1: iconst_1
       2: isub
       3: istore_1
       4: iload_1
       5: iload_1
       6: iconst_1
       7: iushr
       8: ior
       9: istore_1
      10: iload_1
      11: iload_1
      12: iconst_2
      13: iushr
      14: ior
      15: istore_1
      16: iload_1
      17: iload_1
      18: iconst_4
      19: iushr
      20: ior
      21: istore_1
      22: iload_1
      23: iload_1
      24: bipush        8
      26: iushr
      27: ior
      28: istore_1
      29: iload_1
      30: iload_1
      31: bipush        16
      33: iushr
      34: ior
      35: istore_1
      36: iload_1
      37: iconst_1
      38: iadd
      39: ireturn

  public void start();
    Code:
       0: getstatic     #9                  // Field WORKER_STATE_UPDATER:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #74                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.get:(Ljava/lang/Object;)I
       7: tableswitch   { // 0 to 2
                     0: 32
                     1: 54
                     2: 57
               default: 67
          }
      32: getstatic     #9                  // Field WORKER_STATE_UPDATER:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      35: aload_0
      36: iconst_0
      37: iconst_1
      38: invokevirtual #75                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      41: ifeq          77
      44: aload_0
      45: getfield      #58                 // Field workerThread:Ljava/lang/Thread;
      48: invokevirtual #76                 // Method java/lang/Thread.start:()V
      51: goto          77
      54: goto          77
      57: new           #77                 // class java/lang/IllegalStateException
      60: dup
      61: ldc           #78                 // String cannot be started once stopped
      63: invokespecial #79                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      66: athrow
      67: new           #80                 // class java/lang/Error
      70: dup
      71: ldc           #81                 // String Invalid WorkerState
      73: invokespecial #82                 // Method java/lang/Error."<init>":(Ljava/lang/String;)V
      76: athrow
      77: aload_0
      78: getfield      #13                 // Field startTime:J
      81: lconst_0
      82: lcmp
      83: ifne          100
      86: aload_0
      87: getfield      #12                 // Field startTimeInitialized:Ljava/util/concurrent/CountDownLatch;
      90: invokevirtual #83                 // Method java/util/concurrent/CountDownLatch.await:()V
      93: goto          77
      96: astore_1
      97: goto          77
     100: return
    Exception table:
       from    to  target type
          86    93    96   Class java/lang/InterruptedException

  public java.util.Set<org.apache.dubbo.common.timer.Timeout> stop();
    Code:
       0: invokestatic  #85                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       3: aload_0
       4: getfield      #58                 // Field workerThread:Ljava/lang/Thread;
       7: if_acmpne     49
      10: new           #77                 // class java/lang/IllegalStateException
      13: dup
      14: new           #39                 // class java/lang/StringBuilder
      17: dup
      18: invokespecial #40                 // Method java/lang/StringBuilder."<init>":()V
      21: ldc           #62                 // class org/apache/dubbo/common/timer/HashedWheelTimer
      23: invokevirtual #86                 // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
      26: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: ldc           #87                 // String .stop() cannot be called from
      31: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: ldc           #88                 // class org/apache/dubbo/common/timer/TimerTask
      36: invokevirtual #86                 // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
      39: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: invokevirtual #44                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      45: invokespecial #79                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      48: athrow
      49: getstatic     #9                  // Field WORKER_STATE_UPDATER:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      52: aload_0
      53: iconst_1
      54: iconst_2
      55: invokevirtual #75                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      58: ifne          84
      61: getstatic     #9                  // Field WORKER_STATE_UPDATER:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      64: aload_0
      65: iconst_2
      66: invokevirtual #67                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndSet:(Ljava/lang/Object;I)I
      69: iconst_2
      70: if_icmpeq     80
      73: getstatic     #60                 // Field INSTANCE_COUNTER:Ljava/util/concurrent/atomic/AtomicInteger;
      76: invokevirtual #68                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      79: pop
      80: invokestatic  #89                 // Method java/util/Collections.emptySet:()Ljava/util/Set;
      83: areturn
      84: iconst_0
      85: istore_1
      86: aload_0
      87: getfield      #58                 // Field workerThread:Ljava/lang/Thread;
      90: invokevirtual #90                 // Method java/lang/Thread.isAlive:()Z
      93: ifeq          122
      96: aload_0
      97: getfield      #58                 // Field workerThread:Ljava/lang/Thread;
     100: invokevirtual #91                 // Method java/lang/Thread.interrupt:()V
     103: aload_0
     104: getfield      #58                 // Field workerThread:Ljava/lang/Thread;
     107: ldc2_w        #18                 // long 100l
     110: invokevirtual #92                 // Method java/lang/Thread.join:(J)V
     113: goto          86
     116: astore_2
     117: iconst_1
     118: istore_1
     119: goto          86
     122: iload_1
     123: ifeq          132
     126: invokestatic  #85                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
     129: invokevirtual #91                 // Method java/lang/Thread.interrupt:()V
     132: getstatic     #60                 // Field INSTANCE_COUNTER:Ljava/util/concurrent/atomic/AtomicInteger;
     135: invokevirtual #68                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
     138: pop
     139: goto          152
     142: astore_3
     143: getstatic     #60                 // Field INSTANCE_COUNTER:Ljava/util/concurrent/atomic/AtomicInteger;
     146: invokevirtual #68                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
     149: pop
     150: aload_3
     151: athrow
     152: aload_0
     153: getfield      #27                 // Field worker:Lorg/apache/dubbo/common/timer/HashedWheelTimer$Worker;
     156: invokevirtual #93                 // Method org/apache/dubbo/common/timer/HashedWheelTimer$Worker.unprocessedTimeouts:()Ljava/util/Set;
     159: areturn
    Exception table:
       from    to  target type
         103   113   116   Class java/lang/InterruptedException
          84   132   142   any

  public boolean isStop();
    Code:
       0: iconst_2
       1: getstatic     #9                  // Field WORKER_STATE_UPDATER:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       4: aload_0
       5: invokevirtual #74                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.get:(Ljava/lang/Object;)I
       8: if_icmpne     15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  public org.apache.dubbo.common.timer.Timeout newTimeout(org.apache.dubbo.common.timer.TimerTask, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #34                 // class java/lang/NullPointerException
       7: dup
       8: ldc           #94                 // String task
      10: invokespecial #36                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload         4
      16: ifnonnull     29
      19: new           #34                 // class java/lang/NullPointerException
      22: dup
      23: ldc           #37                 // String unit
      25: invokespecial #36                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      28: athrow
      29: aload_0
      30: getfield      #3                  // Field pendingTimeouts:Ljava/util/concurrent/atomic/AtomicLong;
      33: invokevirtual #95                 // Method java/util/concurrent/atomic/AtomicLong.incrementAndGet:()J
      36: lstore        5
      38: aload_0
      39: getfield      #59                 // Field maxPendingTimeouts:J
      42: lconst_0
      43: lcmp
      44: ifle          110
      47: lload         5
      49: aload_0
      50: getfield      #59                 // Field maxPendingTimeouts:J
      53: lcmp
      54: ifle          110
      57: aload_0
      58: getfield      #3                  // Field pendingTimeouts:Ljava/util/concurrent/atomic/AtomicLong;
      61: invokevirtual #96                 // Method java/util/concurrent/atomic/AtomicLong.decrementAndGet:()J
      64: pop2
      65: new           #97                 // class java/util/concurrent/RejectedExecutionException
      68: dup
      69: new           #39                 // class java/lang/StringBuilder
      72: dup
      73: invokespecial #40                 // Method java/lang/StringBuilder."<init>":()V
      76: ldc           #98                 // String Number of pending timeouts (
      78: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      81: lload         5
      83: invokevirtual #43                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      86: ldc           #99                 // String ) is greater than or equal to maximum allowed pending timeouts (
      88: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      91: aload_0
      92: getfield      #59                 // Field maxPendingTimeouts:J
      95: invokevirtual #43                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      98: ldc           #100                // String )
     100: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     103: invokevirtual #44                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     106: invokespecial #101                // Method java/util/concurrent/RejectedExecutionException."<init>":(Ljava/lang/String;)V
     109: athrow
     110: aload_0
     111: invokevirtual #102                // Method start:()V
     114: invokestatic  #103                // Method java/lang/System.nanoTime:()J
     117: aload         4
     119: lload_2
     120: invokevirtual #49                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
     123: ladd
     124: aload_0
     125: getfield      #13                 // Field startTime:J
     128: lsub
     129: lstore        7
     131: lload_2
     132: lconst_0
     133: lcmp
     134: ifle          149
     137: lload         7
     139: lconst_0
     140: lcmp
     141: ifge          149
     144: ldc2_w        #51                 // long 9223372036854775807l
     147: lstore        7
     149: new           #104                // class org/apache/dubbo/common/timer/HashedWheelTimer$HashedWheelTimeout
     152: dup
     153: aload_0
     154: aload_1
     155: lload         7
     157: invokespecial #105                // Method org/apache/dubbo/common/timer/HashedWheelTimer$HashedWheelTimeout."<init>":(Lorg/apache/dubbo/common/timer/HashedWheelTimer;Lorg/apache/dubbo/common/timer/TimerTask;J)V
     160: astore        9
     162: aload_0
     163: getfield      #8                  // Field timeouts:Ljava/util/Queue;
     166: aload         9
     168: invokeinterface #106,  2          // InterfaceMethod java/util/Queue.add:(Ljava/lang/Object;)Z
     173: pop
     174: aload         9
     176: areturn

  public long pendingTimeouts();
    Code:
       0: aload_0
       1: getfield      #3                  // Field pendingTimeouts:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #107                // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lreturn

  private static void reportTooManyInstances();
    Code:
       0: ldc           #62                 // class org/apache/dubbo/common/timer/HashedWheelTimer
       2: invokestatic  #108                // Method org/apache/dubbo/common/utils/ClassUtils.simpleClassName:(Ljava/lang/Class;)Ljava/lang/String;
       5: astore_0
       6: getstatic     #5                  // Field logger:Lorg/apache/dubbo/common/logger/ErrorTypeAwareLogger;
       9: ldc           #109                // String 0-21
      11: ldc           #110                // String
      13: ldc           #110                // String
      15: new           #39                 // class java/lang/StringBuilder
      18: dup
      19: invokespecial #40                 // Method java/lang/StringBuilder."<init>":()V
      22: ldc           #111                // String You are creating too many
      24: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: aload_0
      28: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      31: ldc           #112                // String  instances.
      33: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: aload_0
      37: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      40: ldc           #113                // String  is a shared resource that must be reused across the JVM, so that only a few instances are created.
      42: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      45: invokevirtual #44                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      48: invokeinterface #114,  5          // InterfaceMethod org/apache/dubbo/common/logger/ErrorTypeAwareLogger.error:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
      53: return

  private boolean isWindows();
    Code:
       0: getstatic     #115                // Field IS_OS_WINDOWS:Z
       3: ireturn

  static long access$202(org.apache.dubbo.common.timer.HashedWheelTimer, long);
    Code:
       0: aload_0
       1: lload_1
       2: dup2_x1
       3: putfield      #13                 // Field startTime:J
       6: lreturn

  static long access$200(org.apache.dubbo.common.timer.HashedWheelTimer);
    Code:
       0: aload_0
       1: getfield      #13                 // Field startTime:J
       4: lreturn

  static java.util.concurrent.CountDownLatch access$300(org.apache.dubbo.common.timer.HashedWheelTimer);
    Code:
       0: aload_0
       1: getfield      #12                 // Field startTimeInitialized:Ljava/util/concurrent/CountDownLatch;
       4: areturn

  static int access$400(org.apache.dubbo.common.timer.HashedWheelTimer);
    Code:
       0: aload_0
       1: getfield      #11                 // Field mask:I
       4: ireturn

  static org.apache.dubbo.common.timer.HashedWheelTimer$HashedWheelBucket[] access$500(org.apache.dubbo.common.timer.HashedWheelTimer);
    Code:
       0: aload_0
       1: getfield      #10                 // Field wheel:[Lorg/apache/dubbo/common/timer/HashedWheelTimer$HashedWheelBucket;
       4: areturn

  static java.util.concurrent.atomic.AtomicIntegerFieldUpdater access$600();
    Code:
       0: getstatic     #9                  // Field WORKER_STATE_UPDATER:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: areturn

  static java.util.Queue access$700(org.apache.dubbo.common.timer.HashedWheelTimer);
    Code:
       0: aload_0
       1: getfield      #8                  // Field timeouts:Ljava/util/Queue;
       4: areturn

  static long access$900(org.apache.dubbo.common.timer.HashedWheelTimer);
    Code:
       0: aload_0
       1: getfield      #7                  // Field tickDuration:J
       4: lreturn

  static java.util.Queue access$1000(org.apache.dubbo.common.timer.HashedWheelTimer);
    Code:
       0: aload_0
       1: getfield      #6                  // Field cancelledTimeouts:Ljava/util/Queue;
       4: areturn

  static org.apache.dubbo.common.logger.ErrorTypeAwareLogger access$1100();
    Code:
       0: getstatic     #5                  // Field logger:Lorg/apache/dubbo/common/logger/ErrorTypeAwareLogger;
       3: areturn

  static boolean access$1200(org.apache.dubbo.common.timer.HashedWheelTimer);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method isWindows:()Z
       4: ireturn

  static java.util.concurrent.atomic.AtomicLong access$1300(org.apache.dubbo.common.timer.HashedWheelTimer);
    Code:
       0: aload_0
       1: getfield      #3                  // Field pendingTimeouts:Ljava/util/concurrent/atomic/AtomicLong;
       4: areturn

  static {};
    Code:
       0: ldc           #62                 // class org/apache/dubbo/common/timer/HashedWheelTimer
       2: invokestatic  #116                // Method org/apache/dubbo/common/logger/LoggerFactory.getErrorTypeAwareLogger:(Ljava/lang/Class;)Lorg/apache/dubbo/common/logger/ErrorTypeAwareLogger;
       5: putstatic     #5                  // Field logger:Lorg/apache/dubbo/common/logger/ErrorTypeAwareLogger;
       8: new           #117                // class java/util/concurrent/atomic/AtomicInteger
      11: dup
      12: invokespecial #118                // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      15: putstatic     #60                 // Field INSTANCE_COUNTER:Ljava/util/concurrent/atomic/AtomicInteger;
      18: new           #119                // class java/util/concurrent/atomic/AtomicBoolean
      21: dup
      22: invokespecial #120                // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      25: putstatic     #63                 // Field WARNED_TOO_MANY_INSTANCES:Ljava/util/concurrent/atomic/AtomicBoolean;
      28: ldc           #62                 // class org/apache/dubbo/common/timer/HashedWheelTimer
      30: ldc           #121                // String workerState
      32: invokestatic  #122                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      35: putstatic     #9                  // Field WORKER_STATE_UPDATER:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      38: ldc           #123                // String os.name
      40: ldc           #110                // String
      42: invokestatic  #124                // Method java/lang/System.getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      45: getstatic     #125                // Field java/util/Locale.US:Ljava/util/Locale;
      48: invokevirtual #126                // Method java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;
      51: ldc           #127                // String win
      53: invokevirtual #128                // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      56: putstatic     #115                // Field IS_OS_WINDOWS:Z
      59: return
}

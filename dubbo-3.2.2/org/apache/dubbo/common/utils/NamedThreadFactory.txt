Compiled from "NamedThreadFactory.java"
public class org.apache.dubbo.common.utils.NamedThreadFactory implements java.util.concurrent.ThreadFactory {
  protected static final java.util.concurrent.atomic.AtomicInteger POOL_SEQ;

  protected final java.util.concurrent.atomic.AtomicInteger mThreadNum;

  protected final java.lang.String mPrefix;

  protected final boolean mDaemon;

  protected final java.lang.ThreadGroup mGroup;

  public org.apache.dubbo.common.utils.NamedThreadFactory();
    Code:
       0: aload_0
       1: new           #1                  // class java/lang/StringBuilder
       4: dup
       5: invokespecial #2                  // Method java/lang/StringBuilder."<init>":()V
       8: ldc           #3                  // String pool-
      10: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      13: getstatic     #5                  // Field POOL_SEQ:Ljava/util/concurrent/atomic/AtomicInteger;
      16: invokevirtual #6                  // Method java/util/concurrent/atomic/AtomicInteger.getAndIncrement:()I
      19: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      22: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      25: iconst_0
      26: invokespecial #9                  // Method "<init>":(Ljava/lang/String;Z)V
      29: return

  public org.apache.dubbo.common.utils.NamedThreadFactory(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: invokespecial #9                  // Method "<init>":(Ljava/lang/String;Z)V
       6: return

  public org.apache.dubbo.common.utils.NamedThreadFactory(java.lang.String, boolean);
    Code:
       0: aload_0
       1: invokespecial #10                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #11                 // class java/util/concurrent/atomic/AtomicInteger
       8: dup
       9: iconst_1
      10: invokespecial #12                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      13: putfield      #13                 // Field mThreadNum:Ljava/util/concurrent/atomic/AtomicInteger;
      16: aload_0
      17: new           #1                  // class java/lang/StringBuilder
      20: dup
      21: invokespecial #2                  // Method java/lang/StringBuilder."<init>":()V
      24: aload_1
      25: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: ldc           #14                 // String -thread-
      30: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      36: putfield      #15                 // Field mPrefix:Ljava/lang/String;
      39: aload_0
      40: iload_2
      41: putfield      #16                 // Field mDaemon:Z
      44: invokestatic  #17                 // Method java/lang/System.getSecurityManager:()Ljava/lang/SecurityManager;
      47: astore_3
      48: aload_0
      49: aload_3
      50: ifnonnull     62
      53: invokestatic  #18                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      56: invokevirtual #19                 // Method java/lang/Thread.getThreadGroup:()Ljava/lang/ThreadGroup;
      59: goto          66
      62: aload_3
      63: invokevirtual #20                 // Method java/lang/SecurityManager.getThreadGroup:()Ljava/lang/ThreadGroup;
      66: putfield      #21                 // Field mGroup:Ljava/lang/ThreadGroup;
      69: return

  public java.lang.Thread newThread(java.lang.Runnable);
    Code:
       0: new           #1                  // class java/lang/StringBuilder
       3: dup
       4: invokespecial #2                  // Method java/lang/StringBuilder."<init>":()V
       7: aload_0
       8: getfield      #15                 // Field mPrefix:Ljava/lang/String;
      11: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      14: aload_0
      15: getfield      #13                 // Field mThreadNum:Ljava/util/concurrent/atomic/AtomicInteger;
      18: invokevirtual #6                  // Method java/util/concurrent/atomic/AtomicInteger.getAndIncrement:()I
      21: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      24: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      27: astore_2
      28: new           #22                 // class java/lang/Thread
      31: dup
      32: aload_0
      33: getfield      #21                 // Field mGroup:Ljava/lang/ThreadGroup;
      36: aload_1
      37: aload_2
      38: lconst_0
      39: invokespecial #23                 // Method java/lang/Thread."<init>":(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J)V
      42: astore_3
      43: aload_3
      44: aload_0
      45: getfield      #16                 // Field mDaemon:Z
      48: invokevirtual #24                 // Method java/lang/Thread.setDaemon:(Z)V
      51: aload_3
      52: areturn

  public java.lang.ThreadGroup getThreadGroup();
    Code:
       0: aload_0
       1: getfield      #21                 // Field mGroup:Ljava/lang/ThreadGroup;
       4: areturn

  public java.util.concurrent.atomic.AtomicInteger getThreadNum();
    Code:
       0: aload_0
       1: getfield      #13                 // Field mThreadNum:Ljava/util/concurrent/atomic/AtomicInteger;
       4: areturn

  static {};
    Code:
       0: new           #11                 // class java/util/concurrent/atomic/AtomicInteger
       3: dup
       4: iconst_1
       5: invokespecial #12                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
       8: putstatic     #5                  // Field POOL_SEQ:Ljava/util/concurrent/atomic/AtomicInteger;
      11: return
}

Compiled from "MultiValueConverter.java"
public interface org.apache.dubbo.common.convert.multiple.MultiValueConverter<S> extends org.apache.dubbo.common.lang.Prioritized {
  public abstract boolean accept(java.lang.Class<S>, java.lang.Class<?>);

  public abstract java.lang.Object convert(S, java.lang.Class<?>, java.lang.Class<?>);

  public default java.lang.Class<S> getSourceType();
    Code:
       0: aload_0
       1: invokevirtual #1                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       4: ldc           #2                  // class org/apache/dubbo/common/convert/multiple/MultiValueConverter
       6: iconst_0
       7: invokestatic  #3                  // InterfaceMethod org/apache/dubbo/common/utils/TypeUtils.findActualTypeArgument:(Ljava/lang/reflect/Type;Ljava/lang/Class;I)Ljava/lang/Class;
      10: areturn

  public static org.apache.dubbo.common.convert.multiple.MultiValueConverter<?> find(java.lang.Class<?>, java.lang.Class<?>);
    Code:
       0: invokestatic  #4                  // Method org/apache/dubbo/rpc/model/FrameworkModel.defaultModel:()Lorg/apache/dubbo/rpc/model/FrameworkModel;
       3: ldc           #2                  // class org/apache/dubbo/common/convert/multiple/MultiValueConverter
       5: invokevirtual #5                  // Method org/apache/dubbo/rpc/model/FrameworkModel.getExtensionLoader:(Ljava/lang/Class;)Lorg/apache/dubbo/common/extension/ExtensionLoader;
       8: invokevirtual #6                  // Method org/apache/dubbo/common/extension/ExtensionLoader.getSupportedExtensionInstances:()Ljava/util/Set;
      11: invokeinterface #7,  1            // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
      16: aload_0
      17: aload_1
      18: invokedynamic #8,  0              // InvokeDynamic #0:test:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/function/Predicate;
      23: invokeinterface #9,  2            // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      28: invokeinterface #10,  1           // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      33: aconst_null
      34: invokevirtual #11                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      37: checkcast     #2                  // class org/apache/dubbo/common/convert/multiple/MultiValueConverter
      40: areturn

  public static <T> T convertIfPossible(java.lang.Object, java.lang.Class<?>, java.lang.Class<?>);
    Code:
       0: aload_0
       1: invokevirtual #1                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       4: astore_3
       5: aload_3
       6: aload_1
       7: invokestatic  #12                 // InterfaceMethod find:(Ljava/lang/Class;Ljava/lang/Class;)Lorg/apache/dubbo/common/convert/multiple/MultiValueConverter;
      10: astore        4
      12: aload         4
      14: ifnull        28
      17: aload         4
      19: aload_0
      20: aload_1
      21: aload_2
      22: invokeinterface #13,  4           // InterfaceMethod convert:(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/Object;
      27: areturn
      28: aconst_null
      29: areturn

  private static boolean lambda$find$0(java.lang.Class, java.lang.Class, org.apache.dubbo.common.convert.multiple.MultiValueConverter);
    Code:
       0: aload_2
       1: aload_0
       2: aload_1
       3: invokeinterface #14,  3           // InterfaceMethod accept:(Ljava/lang/Class;Ljava/lang/Class;)Z
       8: ireturn
}

Compiled from "ConverterUtil.java"
public class org.apache.dubbo.common.convert.ConverterUtil {
  private final org.apache.dubbo.rpc.model.FrameworkModel frameworkModel;

  private final java.util.concurrent.ConcurrentMap<java.lang.Class<?>, java.util.concurrent.ConcurrentMap<java.lang.Class<?>, java.util.List<org.apache.dubbo.common.convert.Converter>>> converterCache;

  public org.apache.dubbo.common.convert.ConverterUtil(org.apache.dubbo.rpc.model.FrameworkModel);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: putfield      #4                  // Field converterCache:Ljava/util/concurrent/ConcurrentMap;
      15: aload_0
      16: aload_1
      17: putfield      #5                  // Field frameworkModel:Lorg/apache/dubbo/rpc/model/FrameworkModel;
      20: return

  public org.apache.dubbo.common.convert.Converter<?, ?> getConverter(java.lang.Class<?>, java.lang.Class<?>);
    Code:
       0: aload_0
       1: getfield      #4                  // Field converterCache:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokedynamic #6,  0              // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      10: invokestatic  #7                  // Method org/apache/dubbo/common/utils/ConcurrentHashMapUtils.computeIfAbsent:(Ljava/util/concurrent/ConcurrentMap;Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      13: checkcast     #8                  // class java/util/concurrent/ConcurrentMap
      16: astore_3
      17: aload_3
      18: aload_2
      19: aload_0
      20: aload_1
      21: aload_2
      22: invokedynamic #9,  0              // InvokeDynamic #1:apply:(Lorg/apache/dubbo/common/convert/ConverterUtil;Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/function/Function;
      27: invokestatic  #7                  // Method org/apache/dubbo/common/utils/ConcurrentHashMapUtils.computeIfAbsent:(Ljava/util/concurrent/ConcurrentMap;Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      30: checkcast     #10                 // class java/util/List
      33: astore        4
      35: aload         4
      37: invokeinterface #11,  1           // InterfaceMethod java/util/List.size:()I
      42: ifle          59
      45: aload         4
      47: iconst_0
      48: invokeinterface #12,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      53: checkcast     #13                 // class org/apache/dubbo/common/convert/Converter
      56: goto          60
      59: aconst_null
      60: areturn

  public <T> T convertIfPossible(java.lang.Object, java.lang.Class<T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #14                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       5: aload_2
       6: invokevirtual #15                 // Method getConverter:(Ljava/lang/Class;Ljava/lang/Class;)Lorg/apache/dubbo/common/convert/Converter;
       9: astore_3
      10: aload_3
      11: ifnull        22
      14: aload_3
      15: aload_1
      16: invokeinterface #16,  2           // InterfaceMethod org/apache/dubbo/common/convert/Converter.convert:(Ljava/lang/Object;)Ljava/lang/Object;
      21: areturn
      22: aconst_null
      23: areturn

  private java.util.List lambda$getConverter$2(java.lang.Class, java.lang.Class, java.lang.Class);
    Code:
       0: aload_0
       1: getfield      #5                  // Field frameworkModel:Lorg/apache/dubbo/rpc/model/FrameworkModel;
       4: ldc           #13                 // class org/apache/dubbo/common/convert/Converter
       6: invokevirtual #17                 // Method org/apache/dubbo/rpc/model/FrameworkModel.getExtensionLoader:(Ljava/lang/Class;)Lorg/apache/dubbo/common/extension/ExtensionLoader;
       9: invokevirtual #18                 // Method org/apache/dubbo/common/extension/ExtensionLoader.getSupportedExtensionInstances:()Ljava/util/Set;
      12: invokeinterface #19,  1           // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
      17: aload_1
      18: aload_2
      19: invokedynamic #20,  0             // InvokeDynamic #2:test:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/function/Predicate;
      24: invokeinterface #21,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      29: invokestatic  #22                 // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
      32: invokeinterface #23,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      37: checkcast     #10                 // class java/util/List
      40: areturn

  private static boolean lambda$null$1(java.lang.Class, java.lang.Class, org.apache.dubbo.common.convert.Converter);
    Code:
       0: aload_2
       1: aload_0
       2: aload_1
       3: invokeinterface #24,  3           // InterfaceMethod org/apache/dubbo/common/convert/Converter.accept:(Ljava/lang/Class;Ljava/lang/Class;)Z
       8: ireturn

  private static java.util.concurrent.ConcurrentMap lambda$getConverter$0(java.lang.Class);
    Code:
       0: new           #2                  // class java/util/concurrent/ConcurrentHashMap
       3: dup
       4: invokespecial #3                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
       7: areturn
}

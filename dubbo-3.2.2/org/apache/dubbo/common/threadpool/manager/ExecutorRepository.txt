Compiled from "ExecutorRepository.java"
public interface org.apache.dubbo.common.threadpool.manager.ExecutorRepository {
  public abstract java.util.concurrent.ExecutorService createExecutorIfAbsent(org.apache.dubbo.common.URL);

  public abstract java.util.concurrent.ExecutorService getExecutor(org.apache.dubbo.common.URL);

  public abstract java.util.concurrent.ExecutorService getExecutor(org.apache.dubbo.rpc.model.ServiceModel, org.apache.dubbo.common.URL);

  public abstract void updateThreadpool(org.apache.dubbo.common.URL, java.util.concurrent.ExecutorService);

  public abstract java.util.concurrent.ScheduledExecutorService getServiceExportExecutor();

  public abstract void shutdownServiceExportExecutor();

  public abstract java.util.concurrent.ExecutorService getServiceReferExecutor();

  public abstract void shutdownServiceReferExecutor();

  public abstract void destroyAll();

  public abstract java.util.concurrent.ScheduledExecutorService nextScheduledExecutor();

  public abstract java.util.concurrent.ExecutorService nextExecutorExecutor();

  public abstract java.util.concurrent.ScheduledExecutorService getServiceDiscoveryAddressNotificationExecutor();

  public abstract java.util.concurrent.ScheduledExecutorService getMetadataRetryExecutor();

  public abstract java.util.concurrent.ScheduledExecutorService getRegistryNotificationExecutor();

  public abstract java.util.concurrent.ExecutorService getSharedExecutor();

  public abstract java.util.concurrent.ScheduledExecutorService getSharedScheduledExecutor();

  public abstract java.util.concurrent.ExecutorService getPoolRouterExecutor();

  public abstract java.util.concurrent.ScheduledExecutorService getConnectivityScheduledExecutor();

  public abstract java.util.concurrent.ScheduledExecutorService getCacheRefreshingScheduledExecutor();

  public abstract java.util.concurrent.ExecutorService getMappingRefreshingExecutor();

  public abstract org.apache.dubbo.rpc.executor.ExecutorSupport getExecutorSupport(org.apache.dubbo.common.URL);

  public static org.apache.dubbo.common.threadpool.manager.ExecutorRepository getInstance(org.apache.dubbo.rpc.model.ApplicationModel);
    Code:
       0: aload_0
       1: ldc           #2                  // class org/apache/dubbo/common/threadpool/manager/ExecutorRepository
       3: invokevirtual #3                  // Method org/apache/dubbo/rpc/model/ApplicationModel.getExtensionLoader:(Ljava/lang/Class;)Lorg/apache/dubbo/common/extension/ExtensionLoader;
       6: astore_1
       7: aload_0
       8: invokestatic  #4                  // InterfaceMethod getMode:(Lorg/apache/dubbo/rpc/model/ApplicationModel;)Ljava/lang/String;
      11: astore_2
      12: aload_2
      13: invokestatic  #5                  // Method org/apache/dubbo/common/utils/StringUtils.isNotEmpty:(Ljava/lang/String;)Z
      16: ifeq          30
      19: aload_1
      20: aload_2
      21: invokevirtual #6                  // Method org/apache/dubbo/common/extension/ExtensionLoader.getExtension:(Ljava/lang/String;)Ljava/lang/Object;
      24: checkcast     #2                  // class org/apache/dubbo/common/threadpool/manager/ExecutorRepository
      27: goto          37
      30: aload_1
      31: invokevirtual #7                  // Method org/apache/dubbo/common/extension/ExtensionLoader.getDefaultExtension:()Ljava/lang/Object;
      34: checkcast     #2                  // class org/apache/dubbo/common/threadpool/manager/ExecutorRepository
      37: areturn

  public static java.lang.String getMode(org.apache.dubbo.rpc.model.ApplicationModel);
    Code:
       0: aload_0
       1: invokevirtual #8                  // Method org/apache/dubbo/rpc/model/ApplicationModel.getApplicationConfigManager:()Lorg/apache/dubbo/config/context/ConfigManager;
       4: invokevirtual #9                  // Method org/apache/dubbo/config/context/ConfigManager.getApplication:()Ljava/util/Optional;
       7: astore_1
       8: aload_1
       9: invokedynamic #10,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      14: invokevirtual #11                 // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      17: ldc           #12                 // String isolation
      19: invokevirtual #13                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      22: checkcast     #14                 // class java/lang/String
      25: areturn
}

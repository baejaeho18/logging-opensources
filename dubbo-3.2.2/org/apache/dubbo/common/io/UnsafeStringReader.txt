Compiled from "UnsafeStringReader.java"
public class org.apache.dubbo.common.io.UnsafeStringReader extends java.io.Reader {
  private java.lang.String mString;

  private int mPosition;

  private int mLimit;

  private int mMark;

  public org.apache.dubbo.common.io.UnsafeStringReader(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/io/Reader."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field mString:Ljava/lang/String;
       9: aload_0
      10: aload_1
      11: invokevirtual #3                  // Method java/lang/String.length:()I
      14: putfield      #4                  // Field mLimit:I
      17: aload_0
      18: aload_0
      19: iconst_0
      20: dup_x1
      21: putfield      #5                  // Field mMark:I
      24: putfield      #6                  // Field mPosition:I
      27: return

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #7                  // Method ensureOpen:()V
       4: aload_0
       5: getfield      #6                  // Field mPosition:I
       8: aload_0
       9: getfield      #4                  // Field mLimit:I
      12: if_icmplt     17
      15: iconst_m1
      16: ireturn
      17: aload_0
      18: getfield      #2                  // Field mString:Ljava/lang/String;
      21: aload_0
      22: dup
      23: getfield      #6                  // Field mPosition:I
      26: dup_x1
      27: iconst_1
      28: iadd
      29: putfield      #6                  // Field mPosition:I
      32: invokevirtual #8                  // Method java/lang/String.charAt:(I)C
      35: ireturn

  public int read(char[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #7                  // Method ensureOpen:()V
       4: iload_2
       5: iflt          32
       8: iload_2
       9: aload_1
      10: arraylength
      11: if_icmpgt     32
      14: iload_3
      15: iflt          32
      18: iload_2
      19: iload_3
      20: iadd
      21: aload_1
      22: arraylength
      23: if_icmpgt     32
      26: iload_2
      27: iload_3
      28: iadd
      29: ifge          40
      32: new           #9                  // class java/lang/IndexOutOfBoundsException
      35: dup
      36: invokespecial #10                 // Method java/lang/IndexOutOfBoundsException."<init>":()V
      39: athrow
      40: iload_3
      41: ifne          46
      44: iconst_0
      45: ireturn
      46: aload_0
      47: getfield      #6                  // Field mPosition:I
      50: aload_0
      51: getfield      #4                  // Field mLimit:I
      54: if_icmplt     59
      57: iconst_m1
      58: ireturn
      59: aload_0
      60: getfield      #4                  // Field mLimit:I
      63: aload_0
      64: getfield      #6                  // Field mPosition:I
      67: isub
      68: iload_3
      69: invokestatic  #11                 // Method java/lang/Math.min:(II)I
      72: istore        4
      74: aload_0
      75: getfield      #2                  // Field mString:Ljava/lang/String;
      78: aload_0
      79: getfield      #6                  // Field mPosition:I
      82: aload_0
      83: getfield      #6                  // Field mPosition:I
      86: iload         4
      88: iadd
      89: aload_1
      90: iload_2
      91: invokevirtual #12                 // Method java/lang/String.getChars:(II[CI)V
      94: aload_0
      95: dup
      96: getfield      #6                  // Field mPosition:I
      99: iload         4
     101: iadd
     102: putfield      #6                  // Field mPosition:I
     105: iload         4
     107: ireturn

  public long skip(long) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #7                  // Method ensureOpen:()V
       4: aload_0
       5: getfield      #6                  // Field mPosition:I
       8: aload_0
       9: getfield      #4                  // Field mLimit:I
      12: if_icmplt     17
      15: lconst_0
      16: lreturn
      17: aload_0
      18: getfield      #4                  // Field mLimit:I
      21: aload_0
      22: getfield      #6                  // Field mPosition:I
      25: isub
      26: i2l
      27: lload_1
      28: invokestatic  #13                 // Method java/lang/Math.min:(JJ)J
      31: lstore_3
      32: aload_0
      33: getfield      #6                  // Field mPosition:I
      36: ineg
      37: i2l
      38: lload_3
      39: invokestatic  #14                 // Method java/lang/Math.max:(JJ)J
      42: lstore_3
      43: aload_0
      44: dup
      45: getfield      #6                  // Field mPosition:I
      48: i2l
      49: lload_3
      50: ladd
      51: l2i
      52: putfield      #6                  // Field mPosition:I
      55: lload_3
      56: lreturn

  public boolean ready() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #7                  // Method ensureOpen:()V
       4: iconst_1
       5: ireturn

  public boolean markSupported();
    Code:
       0: iconst_1
       1: ireturn

  public void mark(int) throws java.io.IOException;
    Code:
       0: iload_1
       1: ifge          14
       4: new           #15                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #16                 // String Read-ahead limit < 0
      10: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: invokespecial #7                  // Method ensureOpen:()V
      18: aload_0
      19: aload_0
      20: getfield      #6                  // Field mPosition:I
      23: putfield      #5                  // Field mMark:I
      26: return

  public void reset() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #7                  // Method ensureOpen:()V
       4: aload_0
       5: aload_0
       6: getfield      #5                  // Field mMark:I
       9: putfield      #6                  // Field mPosition:I
      12: return

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: aconst_null
       2: putfield      #2                  // Field mString:Ljava/lang/String;
       5: return

  private void ensureOpen() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field mString:Ljava/lang/String;
       4: ifnonnull     17
       7: new           #18                 // class java/io/IOException
      10: dup
      11: ldc           #19                 // String Stream closed
      13: invokespecial #20                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: return
}

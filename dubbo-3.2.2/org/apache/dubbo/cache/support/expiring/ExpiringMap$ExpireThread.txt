Compiled from "ExpiringMap.java"
public class org.apache.dubbo.cache.support.expiring.ExpiringMap$ExpireThread implements java.lang.Runnable {
  private long timeToLiveMillis;

  private long expirationIntervalMillis;

  private volatile boolean running;

  private final java.lang.Thread expirerThread;

  final org.apache.dubbo.cache.support.expiring.ExpiringMap this$0;

  public java.lang.String toString();
    Code:
       0: new           #1                  // class java/lang/StringBuilder
       3: dup
       4: invokespecial #2                  // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #3                  // String ExpireThread{, timeToLiveMillis=
       9: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #5                  // Field timeToLiveMillis:J
      16: invokevirtual #6                  // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      19: ldc           #7                  // String , expirationIntervalMillis=
      21: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: aload_0
      25: getfield      #8                  // Field expirationIntervalMillis:J
      28: invokevirtual #6                  // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      31: ldc           #9                  // String , running=
      33: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: aload_0
      37: getfield      #10                 // Field running:Z
      40: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
      43: ldc           #12                 // String , expirerThread=
      45: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: aload_0
      49: getfield      #13                 // Field expirerThread:Ljava/lang/Thread;
      52: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      55: bipush        125
      57: invokevirtual #15                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      60: invokevirtual #16                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      63: areturn

  public org.apache.dubbo.cache.support.expiring.ExpiringMap$ExpireThread(org.apache.dubbo.cache.support.expiring.ExpiringMap);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #17                 // Field this$0:Lorg/apache/dubbo/cache/support/expiring/ExpiringMap;
       5: aload_0
       6: invokespecial #18                 // Method java/lang/Object."<init>":()V
       9: aload_0
      10: iconst_0
      11: putfield      #10                 // Field running:Z
      14: aload_0
      15: new           #19                 // class java/lang/Thread
      18: dup
      19: aload_0
      20: new           #1                  // class java/lang/StringBuilder
      23: dup
      24: invokespecial #2                  // Method java/lang/StringBuilder."<init>":()V
      27: ldc           #20                 // String ExpiryMapExpire-
      29: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      32: invokestatic  #21                 // Method org/apache/dubbo/cache/support/expiring/ExpiringMap.access$000:()Ljava/util/concurrent/atomic/AtomicInteger;
      35: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicInteger.getAndIncrement:()I
      38: invokevirtual #23                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      41: invokevirtual #16                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      44: invokespecial #24                 // Method java/lang/Thread."<init>":(Ljava/lang/Runnable;Ljava/lang/String;)V
      47: putfield      #13                 // Field expirerThread:Ljava/lang/Thread;
      50: aload_0
      51: getfield      #13                 // Field expirerThread:Ljava/lang/Thread;
      54: iconst_1
      55: invokevirtual #25                 // Method java/lang/Thread.setDaemon:(Z)V
      58: return

  public void run();
    Code:
       0: aload_0
       1: getfield      #10                 // Field running:Z
       4: ifeq          30
       7: aload_0
       8: invokespecial #26                 // Method processExpires:()V
      11: aload_0
      12: getfield      #8                  // Field expirationIntervalMillis:J
      15: invokestatic  #27                 // Method java/lang/Thread.sleep:(J)V
      18: goto          0
      21: astore_1
      22: aload_0
      23: iconst_0
      24: putfield      #10                 // Field running:Z
      27: goto          0
      30: return
    Exception table:
       from    to  target type
          11    18    21   Class java/lang/InterruptedException

  private void processExpires();
    Code:
       0: invokestatic  #29                 // Method java/lang/System.currentTimeMillis:()J
       3: lstore_1
       4: aload_0
       5: getfield      #5                  // Field timeToLiveMillis:J
       8: lconst_0
       9: lcmp
      10: ifgt          14
      13: return
      14: aload_0
      15: getfield      #17                 // Field this$0:Lorg/apache/dubbo/cache/support/expiring/ExpiringMap;
      18: invokestatic  #30                 // Method org/apache/dubbo/cache/support/expiring/ExpiringMap.access$100:(Lorg/apache/dubbo/cache/support/expiring/ExpiringMap;)Ljava/util/concurrent/ConcurrentHashMap;
      21: invokevirtual #31                 // Method java/util/concurrent/ConcurrentHashMap.values:()Ljava/util/Collection;
      24: invokeinterface #32,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      29: astore_3
      30: aload_3
      31: invokeinterface #33,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      36: ifeq          88
      39: aload_3
      40: invokeinterface #34,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      45: checkcast     #35                 // class org/apache/dubbo/cache/support/expiring/ExpiringMap$ExpiryObject
      48: astore        4
      50: lload_1
      51: aload         4
      53: invokevirtual #36                 // Method org/apache/dubbo/cache/support/expiring/ExpiringMap$ExpiryObject.getLastAccessTime:()J
      56: lsub
      57: lstore        5
      59: lload         5
      61: aload_0
      62: getfield      #5                  // Field timeToLiveMillis:J
      65: lcmp
      66: iflt          85
      69: aload_0
      70: getfield      #17                 // Field this$0:Lorg/apache/dubbo/cache/support/expiring/ExpiringMap;
      73: invokestatic  #30                 // Method org/apache/dubbo/cache/support/expiring/ExpiringMap.access$100:(Lorg/apache/dubbo/cache/support/expiring/ExpiringMap;)Ljava/util/concurrent/ConcurrentHashMap;
      76: aload         4
      78: invokevirtual #37                 // Method org/apache/dubbo/cache/support/expiring/ExpiringMap$ExpiryObject.getKey:()Ljava/lang/Object;
      81: invokevirtual #38                 // Method java/util/concurrent/ConcurrentHashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      84: pop
      85: goto          30
      88: return

  public void startExpiring();
    Code:
       0: aload_0
       1: getfield      #10                 // Field running:Z
       4: ifne          19
       7: aload_0
       8: iconst_1
       9: putfield      #10                 // Field running:Z
      12: aload_0
      13: getfield      #13                 // Field expirerThread:Ljava/lang/Thread;
      16: invokevirtual #39                 // Method java/lang/Thread.start:()V
      19: return

  public void startExpiryIfNotStarted();
    Code:
       0: aload_0
       1: getfield      #10                 // Field running:Z
       4: ifeq          17
       7: aload_0
       8: getfield      #5                  // Field timeToLiveMillis:J
      11: lconst_0
      12: lcmp
      13: ifgt          17
      16: return
      17: aload_0
      18: invokevirtual #40                 // Method startExpiring:()V
      21: return

  public void stopExpiring();
    Code:
       0: aload_0
       1: getfield      #10                 // Field running:Z
       4: ifeq          19
       7: aload_0
       8: iconst_0
       9: putfield      #10                 // Field running:Z
      12: aload_0
      13: getfield      #13                 // Field expirerThread:Ljava/lang/Thread;
      16: invokevirtual #41                 // Method java/lang/Thread.interrupt:()V
      19: return

  public boolean isRunning();
    Code:
       0: aload_0
       1: getfield      #10                 // Field running:Z
       4: ireturn

  public int getTimeToLive();
    Code:
       0: aload_0
       1: getfield      #5                  // Field timeToLiveMillis:J
       4: l2i
       5: sipush        1000
       8: idiv
       9: ireturn

  public void setTimeToLive(long);
    Code:
       0: aload_0
       1: lload_1
       2: ldc2_w        #42                 // long 1000l
       5: lmul
       6: putfield      #5                  // Field timeToLiveMillis:J
       9: return

  public int getExpirationInterval();
    Code:
       0: aload_0
       1: getfield      #8                  // Field expirationIntervalMillis:J
       4: l2i
       5: sipush        1000
       8: idiv
       9: ireturn

  public void setExpirationInterval(long);
    Code:
       0: aload_0
       1: lload_1
       2: ldc2_w        #42                 // long 1000l
       5: lmul
       6: putfield      #8                  // Field expirationIntervalMillis:J
       9: return
}

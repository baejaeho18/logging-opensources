Compiled from "ExpiringMap.java"
public class org.apache.dubbo.cache.support.expiring.ExpiringMap<K, V> implements java.util.Map<K, V> {
  private static final int DEFAULT_TIME_TO_LIVE;

  private static final int DEFAULT_EXPIRATION_INTERVAL;

  private static final java.util.concurrent.atomic.AtomicInteger expireCount;

  private final java.util.concurrent.ConcurrentHashMap<K, org.apache.dubbo.cache.support.expiring.ExpiringMap<K, V>.ExpiryObject> delegateMap;

  private final org.apache.dubbo.cache.support.expiring.ExpiringMap<K, V>.ExpireThread expireThread;

  public org.apache.dubbo.cache.support.expiring.ExpiringMap();
    Code:
       0: aload_0
       1: sipush        180
       4: iconst_1
       5: invokespecial #4                  // Method "<init>":(II)V
       8: return

  public org.apache.dubbo.cache.support.expiring.ExpiringMap(int);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_1
       3: invokespecial #4                  // Method "<init>":(II)V
       6: return

  public org.apache.dubbo.cache.support.expiring.ExpiringMap(int, int);
    Code:
       0: aload_0
       1: new           #5                  // class java/util/concurrent/ConcurrentHashMap
       4: dup
       5: invokespecial #6                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
       8: iload_1
       9: iload_2
      10: invokespecial #7                  // Method "<init>":(Ljava/util/concurrent/ConcurrentHashMap;II)V
      13: return

  private org.apache.dubbo.cache.support.expiring.ExpiringMap(java.util.concurrent.ConcurrentHashMap<K, org.apache.dubbo.cache.support.expiring.ExpiringMap<K, V>.ExpiryObject>, int, int);
    Code:
       0: aload_0
       1: invokespecial #8                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #1                  // Field delegateMap:Ljava/util/concurrent/ConcurrentHashMap;
       9: aload_0
      10: new           #9                  // class org/apache/dubbo/cache/support/expiring/ExpiringMap$ExpireThread
      13: dup
      14: aload_0
      15: invokespecial #10                 // Method org/apache/dubbo/cache/support/expiring/ExpiringMap$ExpireThread."<init>":(Lorg/apache/dubbo/cache/support/expiring/ExpiringMap;)V
      18: putfield      #11                 // Field expireThread:Lorg/apache/dubbo/cache/support/expiring/ExpiringMap$ExpireThread;
      21: aload_0
      22: getfield      #11                 // Field expireThread:Lorg/apache/dubbo/cache/support/expiring/ExpiringMap$ExpireThread;
      25: iload_2
      26: i2l
      27: invokevirtual #12                 // Method org/apache/dubbo/cache/support/expiring/ExpiringMap$ExpireThread.setTimeToLive:(J)V
      30: aload_0
      31: getfield      #11                 // Field expireThread:Lorg/apache/dubbo/cache/support/expiring/ExpiringMap$ExpireThread;
      34: iload_3
      35: i2l
      36: invokevirtual #13                 // Method org/apache/dubbo/cache/support/expiring/ExpiringMap$ExpireThread.setExpirationInterval:(J)V
      39: return

  public V put(K, V);
    Code:
       0: aload_0
       1: getfield      #1                  // Field delegateMap:Ljava/util/concurrent/ConcurrentHashMap;
       4: aload_1
       5: new           #14                 // class org/apache/dubbo/cache/support/expiring/ExpiringMap$ExpiryObject
       8: dup
       9: aload_0
      10: aload_1
      11: aload_2
      12: invokestatic  #15                 // Method java/lang/System.currentTimeMillis:()J
      15: invokespecial #16                 // Method org/apache/dubbo/cache/support/expiring/ExpiringMap$ExpiryObject."<init>":(Lorg/apache/dubbo/cache/support/expiring/ExpiringMap;Ljava/lang/Object;Ljava/lang/Object;J)V
      18: invokevirtual #17                 // Method java/util/concurrent/ConcurrentHashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      21: checkcast     #14                 // class org/apache/dubbo/cache/support/expiring/ExpiringMap$ExpiryObject
      24: astore_3
      25: aload_3
      26: ifnonnull     31
      29: aconst_null
      30: areturn
      31: aload_3
      32: invokevirtual #18                 // Method org/apache/dubbo/cache/support/expiring/ExpiringMap$ExpiryObject.getValue:()Ljava/lang/Object;
      35: areturn

  public V get(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #1                  // Field delegateMap:Ljava/util/concurrent/ConcurrentHashMap;
       4: aload_1
       5: invokevirtual #19                 // Method java/util/concurrent/ConcurrentHashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #14                 // class org/apache/dubbo/cache/support/expiring/ExpiringMap$ExpiryObject
      11: astore_2
      12: aload_2
      13: ifnull        77
      16: invokestatic  #15                 // Method java/lang/System.currentTimeMillis:()J
      19: aload_2
      20: invokevirtual #20                 // Method org/apache/dubbo/cache/support/expiring/ExpiringMap$ExpiryObject.getLastAccessTime:()J
      23: lsub
      24: lstore_3
      25: aload_0
      26: getfield      #11                 // Field expireThread:Lorg/apache/dubbo/cache/support/expiring/ExpiringMap$ExpireThread;
      29: invokevirtual #21                 // Method org/apache/dubbo/cache/support/expiring/ExpiringMap$ExpireThread.getTimeToLive:()I
      32: istore        5
      34: iload         5
      36: ifle          65
      39: lload_3
      40: iload         5
      42: i2l
      43: ldc2_w        #22                 // long 1000l
      46: lmul
      47: lcmp
      48: iflt          65
      51: aload_0
      52: getfield      #1                  // Field delegateMap:Ljava/util/concurrent/ConcurrentHashMap;
      55: aload_2
      56: invokevirtual #24                 // Method org/apache/dubbo/cache/support/expiring/ExpiringMap$ExpiryObject.getKey:()Ljava/lang/Object;
      59: invokevirtual #25                 // Method java/util/concurrent/ConcurrentHashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      62: pop
      63: aconst_null
      64: areturn
      65: aload_2
      66: invokestatic  #15                 // Method java/lang/System.currentTimeMillis:()J
      69: invokevirtual #26                 // Method org/apache/dubbo/cache/support/expiring/ExpiringMap$ExpiryObject.setLastAccessTime:(J)V
      72: aload_2
      73: invokevirtual #18                 // Method org/apache/dubbo/cache/support/expiring/ExpiringMap$ExpiryObject.getValue:()Ljava/lang/Object;
      76: areturn
      77: aconst_null
      78: areturn

  public V remove(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #1                  // Field delegateMap:Ljava/util/concurrent/ConcurrentHashMap;
       4: aload_1
       5: invokevirtual #25                 // Method java/util/concurrent/ConcurrentHashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #14                 // class org/apache/dubbo/cache/support/expiring/ExpiringMap$ExpiryObject
      11: astore_2
      12: aload_2
      13: ifnonnull     18
      16: aconst_null
      17: areturn
      18: aload_2
      19: invokevirtual #18                 // Method org/apache/dubbo/cache/support/expiring/ExpiringMap$ExpiryObject.getValue:()Ljava/lang/Object;
      22: areturn

  public boolean containsKey(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #1                  // Field delegateMap:Ljava/util/concurrent/ConcurrentHashMap;
       4: aload_1
       5: invokevirtual #27                 // Method java/util/concurrent/ConcurrentHashMap.containsKey:(Ljava/lang/Object;)Z
       8: ireturn

  public boolean containsValue(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #1                  // Field delegateMap:Ljava/util/concurrent/ConcurrentHashMap;
       4: aload_1
       5: invokevirtual #28                 // Method java/util/concurrent/ConcurrentHashMap.containsValue:(Ljava/lang/Object;)Z
       8: ireturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #1                  // Field delegateMap:Ljava/util/concurrent/ConcurrentHashMap;
       4: invokevirtual #29                 // Method java/util/concurrent/ConcurrentHashMap.size:()I
       7: ireturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #1                  // Field delegateMap:Ljava/util/concurrent/ConcurrentHashMap;
       4: invokevirtual #30                 // Method java/util/concurrent/ConcurrentHashMap.isEmpty:()Z
       7: ireturn

  public void clear();
    Code:
       0: aload_0
       1: getfield      #1                  // Field delegateMap:Ljava/util/concurrent/ConcurrentHashMap;
       4: invokevirtual #31                 // Method java/util/concurrent/ConcurrentHashMap.clear:()V
       7: aload_0
       8: getfield      #11                 // Field expireThread:Lorg/apache/dubbo/cache/support/expiring/ExpiringMap$ExpireThread;
      11: invokevirtual #32                 // Method org/apache/dubbo/cache/support/expiring/ExpiringMap$ExpireThread.stopExpiring:()V
      14: return

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #1                  // Field delegateMap:Ljava/util/concurrent/ConcurrentHashMap;
       4: invokevirtual #33                 // Method java/util/concurrent/ConcurrentHashMap.hashCode:()I
       7: ireturn

  public java.util.Set<K> keySet();
    Code:
       0: aload_0
       1: getfield      #1                  // Field delegateMap:Ljava/util/concurrent/ConcurrentHashMap;
       4: invokevirtual #34                 // Method java/util/concurrent/ConcurrentHashMap.keySet:()Ljava/util/concurrent/ConcurrentHashMap$KeySetView;
       7: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_0
       8: getfield      #1                  // Field delegateMap:Ljava/util/concurrent/ConcurrentHashMap;
      11: aload_1
      12: invokevirtual #35                 // Method java/util/concurrent/ConcurrentHashMap.equals:(Ljava/lang/Object;)Z
      15: ireturn

  public void putAll(java.util.Map<? extends K, ? extends V>);
    Code:
       0: aload_1
       1: invokeinterface #36,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
       6: invokeinterface #37,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      11: astore_2
      12: aload_2
      13: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifeq          51
      21: aload_2
      22: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      27: checkcast     #40                 // class java/util/Map$Entry
      30: astore_3
      31: aload_0
      32: aload_3
      33: invokeinterface #41,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      38: aload_3
      39: invokeinterface #42,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      44: invokevirtual #43                 // Method put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      47: pop
      48: goto          12
      51: return

  public java.util.Collection<V> values();
    Code:
       0: new           #44                 // class java/util/ArrayList
       3: dup
       4: invokespecial #45                 // Method java/util/ArrayList."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #1                  // Field delegateMap:Ljava/util/concurrent/ConcurrentHashMap;
      12: invokevirtual #46                 // Method java/util/concurrent/ConcurrentHashMap.entrySet:()Ljava/util/Set;
      15: astore_2
      16: aload_2
      17: invokeinterface #37,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      22: astore_3
      23: aload_3
      24: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      29: ifeq          70
      32: aload_3
      33: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      38: checkcast     #40                 // class java/util/Map$Entry
      41: astore        4
      43: aload         4
      45: invokeinterface #42,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      50: checkcast     #14                 // class org/apache/dubbo/cache/support/expiring/ExpiringMap$ExpiryObject
      53: astore        5
      55: aload_1
      56: aload         5
      58: invokevirtual #18                 // Method org/apache/dubbo/cache/support/expiring/ExpiringMap$ExpiryObject.getValue:()Ljava/lang/Object;
      61: invokeinterface #47,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      66: pop
      67: goto          23
      70: aload_1
      71: areturn

  public java.util.Set<java.util.Map$Entry<K, V>> entrySet();
    Code:
       0: new           #48                 // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #49                 // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  public org.apache.dubbo.cache.support.expiring.ExpiringMap<K, V>.ExpireThread getExpireThread();
    Code:
       0: aload_0
       1: getfield      #11                 // Field expireThread:Lorg/apache/dubbo/cache/support/expiring/ExpiringMap$ExpireThread;
       4: areturn

  public int getExpirationInterval();
    Code:
       0: aload_0
       1: getfield      #11                 // Field expireThread:Lorg/apache/dubbo/cache/support/expiring/ExpiringMap$ExpireThread;
       4: invokevirtual #50                 // Method org/apache/dubbo/cache/support/expiring/ExpiringMap$ExpireThread.getExpirationInterval:()I
       7: ireturn

  public void setExpirationInterval(int);
    Code:
       0: aload_0
       1: getfield      #11                 // Field expireThread:Lorg/apache/dubbo/cache/support/expiring/ExpiringMap$ExpireThread;
       4: iload_1
       5: i2l
       6: invokevirtual #13                 // Method org/apache/dubbo/cache/support/expiring/ExpiringMap$ExpireThread.setExpirationInterval:(J)V
       9: return

  public int getTimeToLive();
    Code:
       0: aload_0
       1: getfield      #11                 // Field expireThread:Lorg/apache/dubbo/cache/support/expiring/ExpiringMap$ExpireThread;
       4: invokevirtual #21                 // Method org/apache/dubbo/cache/support/expiring/ExpiringMap$ExpireThread.getTimeToLive:()I
       7: ireturn

  public void setTimeToLive(int);
    Code:
       0: aload_0
       1: getfield      #11                 // Field expireThread:Lorg/apache/dubbo/cache/support/expiring/ExpiringMap$ExpireThread;
       4: iload_1
       5: i2l
       6: invokevirtual #12                 // Method org/apache/dubbo/cache/support/expiring/ExpiringMap$ExpireThread.setTimeToLive:(J)V
       9: return

  public java.lang.String toString();
    Code:
       0: new           #51                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #52                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #53                 // String ExpiringMap{delegateMap=
       9: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #1                  // Field delegateMap:Ljava/util/concurrent/ConcurrentHashMap;
      16: invokevirtual #55                 // Method java/util/concurrent/ConcurrentHashMap.toString:()Ljava/lang/String;
      19: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: ldc           #56                 // String , expireThread=
      24: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: aload_0
      28: getfield      #11                 // Field expireThread:Lorg/apache/dubbo/cache/support/expiring/ExpiringMap$ExpireThread;
      31: invokevirtual #57                 // Method org/apache/dubbo/cache/support/expiring/ExpiringMap$ExpireThread.toString:()Ljava/lang/String;
      34: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      37: bipush        125
      39: invokevirtual #58                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      42: invokevirtual #59                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      45: areturn

  static java.util.concurrent.atomic.AtomicInteger access$000();
    Code:
       0: getstatic     #2                  // Field expireCount:Ljava/util/concurrent/atomic/AtomicInteger;
       3: areturn

  static java.util.concurrent.ConcurrentHashMap access$100(org.apache.dubbo.cache.support.expiring.ExpiringMap);
    Code:
       0: aload_0
       1: getfield      #1                  // Field delegateMap:Ljava/util/concurrent/ConcurrentHashMap;
       4: areturn

  static {};
    Code:
       0: new           #60                 // class java/util/concurrent/atomic/AtomicInteger
       3: dup
       4: iconst_1
       5: invokespecial #61                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
       8: putstatic     #2                  // Field expireCount:Ljava/util/concurrent/atomic/AtomicInteger;
      11: return
}

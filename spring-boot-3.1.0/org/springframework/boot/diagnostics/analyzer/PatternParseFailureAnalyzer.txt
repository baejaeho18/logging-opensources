Compiled from "PatternParseFailureAnalyzer.java"
class org.springframework.boot.diagnostics.analyzer.PatternParseFailureAnalyzer extends org.springframework.boot.diagnostics.AbstractFailureAnalyzer<org.springframework.web.util.pattern.PatternParseException> {
  org.springframework.boot.diagnostics.analyzer.PatternParseFailureAnalyzer();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/springframework/boot/diagnostics/AbstractFailureAnalyzer."<init>":()V
       4: return

  protected org.springframework.boot.diagnostics.FailureAnalysis analyze(java.lang.Throwable, org.springframework.web.util.pattern.PatternParseException);
    Code:
       0: new           #7                  // class org/springframework/boot/diagnostics/FailureAnalysis
       3: dup
       4: aload_2
       5: invokevirtual #9                  // Method org/springframework/web/util/pattern/PatternParseException.toDetailedString:()Ljava/lang/String;
       8: invokedynamic #15,  0             // InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
      13: ldc           #19                 // String Fix this pattern in your application or switch to the legacy parser implementation with \'spring.mvc.pathmatch.matching-strategy=ant_path_matcher\'.
      15: aload_2
      16: invokespecial #21                 // Method org/springframework/boot/diagnostics/FailureAnalysis."<init>":(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
      19: areturn

  protected org.springframework.boot.diagnostics.FailureAnalysis analyze(java.lang.Throwable, java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: checkcast     #10                 // class org/springframework/web/util/pattern/PatternParseException
       6: invokevirtual #24                 // Method analyze:(Ljava/lang/Throwable;Lorg/springframework/web/util/pattern/PatternParseException;)Lorg/springframework/boot/diagnostics/FailureAnalysis;
       9: areturn
}

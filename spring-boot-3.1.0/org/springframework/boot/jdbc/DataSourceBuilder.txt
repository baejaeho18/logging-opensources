Compiled from "DataSourceBuilder.java"
public final class org.springframework.boot.jdbc.DataSourceBuilder<T extends javax.sql.DataSource> {
  private final java.lang.ClassLoader classLoader;

  private final java.util.Map<org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty, java.lang.String> values;

  private java.lang.Class<T> type;

  private final javax.sql.DataSource deriveFrom;

  private org.springframework.boot.jdbc.DataSourceBuilder(java.lang.ClassLoader);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #7                  // class java/util/HashMap
       8: dup
       9: invokespecial #9                  // Method java/util/HashMap."<init>":()V
      12: putfield      #10                 // Field values:Ljava/util/Map;
      15: aload_0
      16: aload_1
      17: putfield      #16                 // Field classLoader:Ljava/lang/ClassLoader;
      20: aload_0
      21: aconst_null
      22: putfield      #20                 // Field deriveFrom:Ljavax/sql/DataSource;
      25: return

  private org.springframework.boot.jdbc.DataSourceBuilder(T);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #7                  // class java/util/HashMap
       8: dup
       9: invokespecial #9                  // Method java/util/HashMap."<init>":()V
      12: putfield      #10                 // Field values:Ljava/util/Map;
      15: aload_1
      16: ldc           #24                 // String DataSource must not be null
      18: invokestatic  #26                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      21: aload_0
      22: aload_1
      23: invokevirtual #32                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      26: invokevirtual #36                 // Method java/lang/Class.getClassLoader:()Ljava/lang/ClassLoader;
      29: putfield      #16                 // Field classLoader:Ljava/lang/ClassLoader;
      32: aload_0
      33: aload_1
      34: invokevirtual #32                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      37: putfield      #42                 // Field type:Ljava/lang/Class;
      40: aload_0
      41: aload_1
      42: putfield      #20                 // Field deriveFrom:Ljavax/sql/DataSource;
      45: return

  public <D extends javax.sql.DataSource> org.springframework.boot.jdbc.DataSourceBuilder<D> type(java.lang.Class<D>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #42                 // Field type:Ljava/lang/Class;
       5: aload_0
       6: areturn

  public org.springframework.boot.jdbc.DataSourceBuilder<T> url(java.lang.String);
    Code:
       0: aload_0
       1: getstatic     #46                 // Field org/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty.URL:Lorg/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty;
       4: aload_1
       5: invokevirtual #52                 // Method set:(Lorg/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty;Ljava/lang/String;)V
       8: aload_0
       9: areturn

  public org.springframework.boot.jdbc.DataSourceBuilder<T> driverClassName(java.lang.String);
    Code:
       0: aload_0
       1: getstatic     #56                 // Field org/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty.DRIVER_CLASS_NAME:Lorg/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty;
       4: aload_1
       5: invokevirtual #52                 // Method set:(Lorg/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty;Ljava/lang/String;)V
       8: aload_0
       9: areturn

  public org.springframework.boot.jdbc.DataSourceBuilder<T> username(java.lang.String);
    Code:
       0: aload_0
       1: getstatic     #59                 // Field org/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty.USERNAME:Lorg/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty;
       4: aload_1
       5: invokevirtual #52                 // Method set:(Lorg/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty;Ljava/lang/String;)V
       8: aload_0
       9: areturn

  public org.springframework.boot.jdbc.DataSourceBuilder<T> password(java.lang.String);
    Code:
       0: aload_0
       1: getstatic     #62                 // Field org/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty.PASSWORD:Lorg/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty;
       4: aload_1
       5: invokevirtual #52                 // Method set:(Lorg/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty;Ljava/lang/String;)V
       8: aload_0
       9: areturn

  private void set(org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #10                 // Field values:Ljava/util/Map;
       4: aload_1
       5: aload_2
       6: invokeinterface #65,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: pop
      12: return

  public T build();
    Code:
       0: aload_0
       1: getfield      #16                 // Field classLoader:Ljava/lang/ClassLoader;
       4: aload_0
       5: getfield      #42                 // Field type:Ljava/lang/Class;
       8: invokestatic  #71                 // InterfaceMethod org/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperties.forType:(Ljava/lang/ClassLoader;Ljava/lang/Class;)Lorg/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperties;
      11: astore_1
      12: aload_0
      13: invokevirtual #77                 // Method getDeriveFromProperties:()Lorg/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperties;
      16: astore_2
      17: aload_0
      18: getfield      #42                 // Field type:Ljava/lang/Class;
      21: ifnull        31
      24: aload_0
      25: getfield      #42                 // Field type:Ljava/lang/Class;
      28: goto          37
      31: aload_1
      32: invokeinterface #81,  1           // InterfaceMethod org/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperties.getDataSourceInstanceType:()Ljava/lang/Class;
      37: astore_3
      38: aload_3
      39: invokestatic  #84                 // Method org/springframework/beans/BeanUtils.instantiateClass:(Ljava/lang/Class;)Ljava/lang/Object;
      42: checkcast     #90                 // class javax/sql/DataSource
      45: astore        4
      47: new           #92                 // class java/util/HashSet
      50: dup
      51: invokespecial #94                 // Method java/util/HashSet."<init>":()V
      54: astore        5
      56: invokestatic  #95                 // Method org/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty.values:()[Lorg/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty;
      59: astore        6
      61: aload         6
      63: arraylength
      64: istore        7
      66: iconst_0
      67: istore        8
      69: iload         8
      71: iload         7
      73: if_icmpge     166
      76: aload         6
      78: iload         8
      80: aaload
      81: astore        9
      83: aload_0
      84: getfield      #10                 // Field values:Ljava/util/Map;
      87: aload         9
      89: invokeinterface #98,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      94: checkcast     #102                // class java/lang/String
      97: astore        10
      99: aload         10
     101: ifnonnull     133
     104: aload_2
     105: ifnull        133
     108: aload_1
     109: aload         9
     111: invokeinterface #104,  2          // InterfaceMethod org/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperties.canSet:(Lorg/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty;)Z
     116: ifeq          133
     119: aload_2
     120: aload_0
     121: getfield      #20                 // Field deriveFrom:Ljavax/sql/DataSource;
     124: aload         9
     126: invokeinterface #108,  3          // InterfaceMethod org/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperties.get:(Ljavax/sql/DataSource;Lorg/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty;)Ljava/lang/String;
     131: astore        10
     133: aload         10
     135: ifnull        160
     138: aload_1
     139: aload         4
     141: aload         9
     143: aload         10
     145: invokeinterface #111,  4          // InterfaceMethod org/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperties.set:(Ljavax/sql/DataSource;Lorg/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty;Ljava/lang/String;)V
     150: aload         5
     152: aload         9
     154: invokeinterface #114,  2          // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
     159: pop
     160: iinc          8, 1
     163: goto          69
     166: aload         5
     168: getstatic     #56                 // Field org/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty.DRIVER_CLASS_NAME:Lorg/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty;
     171: invokeinterface #120,  2          // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
     176: ifne          246
     179: aload_1
     180: getstatic     #56                 // Field org/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty.DRIVER_CLASS_NAME:Lorg/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty;
     183: invokeinterface #104,  2          // InterfaceMethod org/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperties.canSet:(Lorg/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty;)Z
     188: ifeq          246
     191: aload_0
     192: getfield      #10                 // Field values:Ljava/util/Map;
     195: getstatic     #46                 // Field org/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty.URL:Lorg/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty;
     198: invokeinterface #123,  2          // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
     203: ifeq          246
     206: aload_0
     207: getfield      #10                 // Field values:Ljava/util/Map;
     210: getstatic     #46                 // Field org/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty.URL:Lorg/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty;
     213: invokeinterface #98,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     218: checkcast     #102                // class java/lang/String
     221: astore        6
     223: aload         6
     225: invokestatic  #126                // Method org/springframework/boot/jdbc/DatabaseDriver.fromJdbcUrl:(Ljava/lang/String;)Lorg/springframework/boot/jdbc/DatabaseDriver;
     228: astore        7
     230: aload_1
     231: aload         4
     233: getstatic     #56                 // Field org/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty.DRIVER_CLASS_NAME:Lorg/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty;
     236: aload         7
     238: invokevirtual #132                // Method org/springframework/boot/jdbc/DatabaseDriver.getDriverClassName:()Ljava/lang/String;
     241: invokeinterface #111,  4          // InterfaceMethod org/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperties.set:(Ljavax/sql/DataSource;Lorg/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty;Ljava/lang/String;)V
     246: aload         4
     248: areturn

  private org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperties<javax.sql.DataSource> getDeriveFromProperties();
    Code:
       0: aload_0
       1: getfield      #20                 // Field deriveFrom:Ljavax/sql/DataSource;
       4: ifnonnull     9
       7: aconst_null
       8: areturn
       9: aload_0
      10: getfield      #16                 // Field classLoader:Ljava/lang/ClassLoader;
      13: aload_0
      14: getfield      #20                 // Field deriveFrom:Ljavax/sql/DataSource;
      17: invokevirtual #32                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      20: invokestatic  #71                 // InterfaceMethod org/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperties.forType:(Ljava/lang/ClassLoader;Ljava/lang/Class;)Lorg/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperties;
      23: areturn

  public static org.springframework.boot.jdbc.DataSourceBuilder<?> create();
    Code:
       0: aconst_null
       1: invokestatic  #136                // Method create:(Ljava/lang/ClassLoader;)Lorg/springframework/boot/jdbc/DataSourceBuilder;
       4: areturn

  public static org.springframework.boot.jdbc.DataSourceBuilder<?> create(java.lang.ClassLoader);
    Code:
       0: new           #11                 // class org/springframework/boot/jdbc/DataSourceBuilder
       3: dup
       4: aload_0
       5: invokespecial #140                // Method "<init>":(Ljava/lang/ClassLoader;)V
       8: areturn

  public static org.springframework.boot.jdbc.DataSourceBuilder<?> derivedFrom(javax.sql.DataSource);
    Code:
       0: aload_0
       1: instanceof    #143                // class org/springframework/jdbc/datasource/embedded/EmbeddedDatabase
       4: ifeq          34
       7: aload_0
       8: ldc           #90                 // class javax/sql/DataSource
      10: invokeinterface #145,  2          // InterfaceMethod javax/sql/DataSource.unwrap:(Ljava/lang/Class;)Ljava/lang/Object;
      15: checkcast     #90                 // class javax/sql/DataSource
      18: astore_0
      19: goto          34
      22: astore_1
      23: new           #150                // class java/lang/IllegalStateException
      26: dup
      27: ldc           #152                // String Unable to unwrap embedded database
      29: aload_1
      30: invokespecial #154                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      33: athrow
      34: new           #11                 // class org/springframework/boot/jdbc/DataSourceBuilder
      37: dup
      38: aload_0
      39: invokestatic  #157                // Method unwrap:(Ljavax/sql/DataSource;)Ljavax/sql/DataSource;
      42: invokespecial #160                // Method "<init>":(Ljavax/sql/DataSource;)V
      45: areturn
    Exception table:
       from    to  target type
           7    19    22   Class java/sql/SQLException

  private static javax.sql.DataSource unwrap(javax.sql.DataSource);
    Code:
       0: aload_0
       1: ldc           #90                 // class javax/sql/DataSource
       3: invokeinterface #163,  2          // InterfaceMethod javax/sql/DataSource.isWrapperFor:(Ljava/lang/Class;)Z
       8: ifeq          35
      11: aload_0
      12: ldc           #90                 // class javax/sql/DataSource
      14: invokeinterface #145,  2          // InterfaceMethod javax/sql/DataSource.unwrap:(Ljava/lang/Class;)Ljava/lang/Object;
      19: checkcast     #90                 // class javax/sql/DataSource
      22: astore_1
      23: aload_1
      24: aload_0
      25: if_acmpne     30
      28: aload_1
      29: areturn
      30: aload_1
      31: astore_0
      32: goto          0
      35: goto          39
      38: astore_1
      39: aload_0
      40: areturn
    Exception table:
       from    to  target type
           0    29    38   Class java/sql/SQLException
          30    35    38   Class java/sql/SQLException

  public static java.lang.Class<? extends javax.sql.DataSource> findType(java.lang.ClassLoader);
    Code:
       0: aload_0
       1: aconst_null
       2: invokestatic  #167                // Method org/springframework/boot/jdbc/DataSourceBuilder$MappedDataSourceProperties.forType:(Ljava/lang/ClassLoader;Ljava/lang/Class;)Lorg/springframework/boot/jdbc/DataSourceBuilder$MappedDataSourceProperties;
       5: astore_1
       6: aload_1
       7: ifnull        17
      10: aload_1
      11: invokevirtual #172                // Method org/springframework/boot/jdbc/DataSourceBuilder$MappedDataSourceProperties.getDataSourceInstanceType:()Ljava/lang/Class;
      14: goto          18
      17: aconst_null
      18: areturn
}

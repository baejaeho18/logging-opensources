Compiled from "DataSourceBuilder.java"
interface org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperties<T extends javax.sql.DataSource> {
  public abstract java.lang.Class<? extends T> getDataSourceInstanceType();

  public abstract boolean canSet(org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty);

  public abstract void set(T, org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty, java.lang.String);

  public abstract java.lang.String get(T, org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty);

  public static <T extends javax.sql.DataSource> org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperties<T> forType(java.lang.ClassLoader, java.lang.Class<T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1                  // Method org/springframework/boot/jdbc/DataSourceBuilder$MappedDataSourceProperties.forType:(Ljava/lang/ClassLoader;Ljava/lang/Class;)Lorg/springframework/boot/jdbc/DataSourceBuilder$MappedDataSourceProperties;
       5: astore_2
       6: aload_2
       7: ifnull        14
      10: aload_2
      11: goto          22
      14: new           #7                  // class org/springframework/boot/jdbc/DataSourceBuilder$ReflectionDataSourceProperties
      17: dup
      18: aload_1
      19: invokespecial #9                  // Method org/springframework/boot/jdbc/DataSourceBuilder$ReflectionDataSourceProperties."<init>":(Ljava/lang/Class;)V
      22: areturn
}

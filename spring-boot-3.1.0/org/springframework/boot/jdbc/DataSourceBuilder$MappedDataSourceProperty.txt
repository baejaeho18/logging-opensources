Compiled from "DataSourceBuilder.java"
class org.springframework.boot.jdbc.DataSourceBuilder$MappedDataSourceProperty<T extends javax.sql.DataSource, V> {
  private final org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty property;

  private final java.lang.Class<V> type;

  private final org.springframework.boot.jdbc.DataSourceBuilder$Getter<T, V> getter;

  private final org.springframework.boot.jdbc.DataSourceBuilder$Setter<T, V> setter;

  org.springframework.boot.jdbc.DataSourceBuilder$MappedDataSourceProperty(org.springframework.boot.jdbc.DataSourceBuilder$DataSourceProperty, java.lang.Class<V>, org.springframework.boot.jdbc.DataSourceBuilder$Getter<T, V>, org.springframework.boot.jdbc.DataSourceBuilder$Setter<T, V>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #7                  // Field property:Lorg/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty;
       9: aload_0
      10: aload_2
      11: putfield      #13                 // Field type:Ljava/lang/Class;
      14: aload_0
      15: aload_3
      16: putfield      #17                 // Field getter:Lorg/springframework/boot/jdbc/DataSourceBuilder$Getter;
      19: aload_0
      20: aload         4
      22: putfield      #21                 // Field setter:Lorg/springframework/boot/jdbc/DataSourceBuilder$Setter;
      25: return

  void set(T, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #21                 // Field setter:Lorg/springframework/boot/jdbc/DataSourceBuilder$Setter;
       4: ifnonnull     32
       7: aload_0
       8: getfield      #7                  // Field property:Lorg/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty;
      11: invokevirtual #25                 // Method org/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty.isOptional:()Z
      14: ifne          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: aload_0
      23: invokedynamic #31,  0             // InvokeDynamic #0:get:(Lorg/springframework/boot/jdbc/DataSourceBuilder$MappedDataSourceProperty;)Ljava/util/function/Supplier;
      28: invokestatic  #35                 // Method org/springframework/boot/jdbc/UnsupportedDataSourcePropertyException.throwIf:(ZLjava/util/function/Supplier;)V
      31: return
      32: aload_0
      33: getfield      #21                 // Field setter:Lorg/springframework/boot/jdbc/DataSourceBuilder$Setter;
      36: aload_1
      37: aload_0
      38: aload_2
      39: invokevirtual #41                 // Method convertFromString:(Ljava/lang/String;)Ljava/lang/Object;
      42: invokeinterface #45,  3           // InterfaceMethod org/springframework/boot/jdbc/DataSourceBuilder$Setter.set:(Ljava/lang/Object;Ljava/lang/Object;)V
      47: goto          60
      50: astore_3
      51: new           #53                 // class java/lang/IllegalStateException
      54: dup
      55: aload_3
      56: invokespecial #55                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/Throwable;)V
      59: athrow
      60: return
    Exception table:
       from    to  target type
           0    31    50   Class java/sql/SQLException
          32    47    50   Class java/sql/SQLException

  java.lang.String get(T);
    Code:
       0: aload_0
       1: getfield      #17                 // Field getter:Lorg/springframework/boot/jdbc/DataSourceBuilder$Getter;
       4: ifnonnull     33
       7: aload_0
       8: getfield      #7                  // Field property:Lorg/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty;
      11: invokevirtual #25                 // Method org/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty.isOptional:()Z
      14: ifne          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: aload_0
      23: invokedynamic #58,  0             // InvokeDynamic #1:get:(Lorg/springframework/boot/jdbc/DataSourceBuilder$MappedDataSourceProperty;)Ljava/util/function/Supplier;
      28: invokestatic  #35                 // Method org/springframework/boot/jdbc/UnsupportedDataSourcePropertyException.throwIf:(ZLjava/util/function/Supplier;)V
      31: aconst_null
      32: areturn
      33: aload_0
      34: aload_0
      35: getfield      #17                 // Field getter:Lorg/springframework/boot/jdbc/DataSourceBuilder$Getter;
      38: aload_1
      39: invokeinterface #59,  2           // InterfaceMethod org/springframework/boot/jdbc/DataSourceBuilder$Getter.get:(Ljava/lang/Object;)Ljava/lang/Object;
      44: invokevirtual #64                 // Method convertToString:(Ljava/lang/Object;)Ljava/lang/String;
      47: areturn
      48: astore_2
      49: new           #53                 // class java/lang/IllegalStateException
      52: dup
      53: aload_2
      54: invokespecial #55                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/Throwable;)V
      57: athrow
    Exception table:
       from    to  target type
           0    32    48   Class java/sql/SQLException
          33    47    48   Class java/sql/SQLException

  private V convertFromString(java.lang.String);
    Code:
       0: ldc           #68                 // class java/lang/String
       2: aload_0
       3: getfield      #13                 // Field type:Ljava/lang/Class;
       6: invokevirtual #70                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
       9: ifeq          14
      12: aload_1
      13: areturn
      14: ldc           #74                 // class java/lang/Class
      16: aload_0
      17: getfield      #13                 // Field type:Ljava/lang/Class;
      20: invokevirtual #70                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      23: ifeq          32
      26: aload_1
      27: aconst_null
      28: invokestatic  #76                 // Method org/springframework/util/ClassUtils.resolveClassName:(Ljava/lang/String;Ljava/lang/ClassLoader;)Ljava/lang/Class;
      31: areturn
      32: new           #53                 // class java/lang/IllegalStateException
      35: dup
      36: aload_0
      37: getfield      #13                 // Field type:Ljava/lang/Class;
      40: invokedynamic #82,  0             // InvokeDynamic #2:makeConcatWithConstants:(Ljava/lang/Class;)Ljava/lang/String;
      45: invokespecial #86                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      48: athrow

  private java.lang.String convertToString(V);
    Code:
       0: ldc           #68                 // class java/lang/String
       2: aload_0
       3: getfield      #13                 // Field type:Ljava/lang/Class;
       6: invokevirtual #70                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
       9: ifeq          17
      12: aload_1
      13: checkcast     #68                 // class java/lang/String
      16: areturn
      17: ldc           #74                 // class java/lang/Class
      19: aload_0
      20: getfield      #13                 // Field type:Ljava/lang/Class;
      23: invokevirtual #70                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      26: ifeq          37
      29: aload_1
      30: checkcast     #74                 // class java/lang/Class
      33: invokevirtual #89                 // Method java/lang/Class.getName:()Ljava/lang/String;
      36: areturn
      37: new           #53                 // class java/lang/IllegalStateException
      40: dup
      41: aload_0
      42: getfield      #13                 // Field type:Ljava/lang/Class;
      45: invokedynamic #82,  0             // InvokeDynamic #2:makeConcatWithConstants:(Ljava/lang/Class;)Ljava/lang/String;
      50: invokespecial #86                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      53: athrow

  private java.lang.String lambda$get$1();
    Code:
       0: aload_0
       1: getfield      #7                  // Field property:Lorg/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty;
       4: invokedynamic #93,  0             // InvokeDynamic #3:makeConcatWithConstants:(Lorg/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty;)Ljava/lang/String;
       9: areturn

  private java.lang.String lambda$set$0();
    Code:
       0: aload_0
       1: getfield      #7                  // Field property:Lorg/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty;
       4: invokedynamic #96,  0             // InvokeDynamic #4:makeConcatWithConstants:(Lorg/springframework/boot/jdbc/DataSourceBuilder$DataSourceProperty;)Ljava/lang/String;
       9: areturn
}

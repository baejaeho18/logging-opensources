Compiled from "LogbackLoggingSystemProperties.java"
public class org.springframework.boot.logging.logback.LogbackLoggingSystemProperties extends org.springframework.boot.logging.LoggingSystemProperties {
  private static final boolean JBOSS_LOGGING_PRESENT;

  public static final java.lang.String ROLLINGPOLICY_FILE_NAME_PATTERN;

  public static final java.lang.String ROLLINGPOLICY_CLEAN_HISTORY_ON_START;

  public static final java.lang.String ROLLINGPOLICY_MAX_FILE_SIZE;

  public static final java.lang.String ROLLINGPOLICY_TOTAL_SIZE_CAP;

  public static final java.lang.String ROLLINGPOLICY_MAX_HISTORY;

  public org.springframework.boot.logging.logback.LogbackLoggingSystemProperties(org.springframework.core.env.Environment);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method org/springframework/boot/logging/LoggingSystemProperties."<init>":(Lorg/springframework/core/env/Environment;)V
       5: return

  public org.springframework.boot.logging.logback.LogbackLoggingSystemProperties(org.springframework.core.env.Environment, java.util.function.BiConsumer<java.lang.String, java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #7                  // Method org/springframework/boot/logging/LoggingSystemProperties."<init>":(Lorg/springframework/core/env/Environment;Ljava/util/function/BiConsumer;)V
       6: return

  protected java.nio.charset.Charset getDefaultCharset();
    Code:
       0: invokestatic  #10                 // Method java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;
       3: areturn

  protected void apply(org.springframework.boot.logging.LogFile, org.springframework.core.env.PropertyResolver);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #16                 // Method org/springframework/boot/logging/LoggingSystemProperties.apply:(Lorg/springframework/boot/logging/LogFile;Lorg/springframework/core/env/PropertyResolver;)V
       6: aload_0
       7: invokevirtual #20                 // Method applyJBossLoggingProperties:()V
      10: aload_0
      11: aload_2
      12: invokevirtual #26                 // Method applyRollingPolicyProperties:(Lorg/springframework/core/env/PropertyResolver;)V
      15: return

  private void applyJBossLoggingProperties();
    Code:
       0: getstatic     #30                 // Field JBOSS_LOGGING_PRESENT:Z
       3: ifeq          14
       6: aload_0
       7: ldc           #34                 // String org.jboss.logging.provider
       9: ldc           #36                 // String slf4j
      11: invokevirtual #38                 // Method setSystemProperty:(Ljava/lang/String;Ljava/lang/String;)V
      14: return

  private void applyRollingPolicyProperties(org.springframework.core.env.PropertyResolver);
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #42                 // String LOGBACK_ROLLINGPOLICY_FILE_NAME_PATTERN
       4: ldc           #44                 // String logging.logback.rollingpolicy.file-name-pattern
       6: ldc           #46                 // String logging.pattern.rolling-file-name
       8: invokevirtual #48                 // Method applyRollingPolicy:(Lorg/springframework/core/env/PropertyResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
      11: aload_0
      12: aload_1
      13: ldc           #52                 // String LOGBACK_ROLLINGPOLICY_CLEAN_HISTORY_ON_START
      15: ldc           #54                 // String logging.logback.rollingpolicy.clean-history-on-start
      17: ldc           #56                 // String logging.file.clean-history-on-start
      19: invokevirtual #48                 // Method applyRollingPolicy:(Lorg/springframework/core/env/PropertyResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
      22: aload_0
      23: aload_1
      24: ldc           #58                 // String LOGBACK_ROLLINGPOLICY_MAX_FILE_SIZE
      26: ldc           #60                 // String logging.logback.rollingpolicy.max-file-size
      28: ldc           #62                 // String logging.file.max-size
      30: ldc           #64                 // class org/springframework/util/unit/DataSize
      32: invokevirtual #66                 // Method applyRollingPolicy:(Lorg/springframework/core/env/PropertyResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Class;)V
      35: aload_0
      36: aload_1
      37: ldc           #69                 // String LOGBACK_ROLLINGPOLICY_TOTAL_SIZE_CAP
      39: ldc           #71                 // String logging.logback.rollingpolicy.total-size-cap
      41: ldc           #73                 // String logging.file.total-size-cap
      43: ldc           #64                 // class org/springframework/util/unit/DataSize
      45: invokevirtual #66                 // Method applyRollingPolicy:(Lorg/springframework/core/env/PropertyResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Class;)V
      48: aload_0
      49: aload_1
      50: ldc           #75                 // String LOGBACK_ROLLINGPOLICY_MAX_HISTORY
      52: ldc           #77                 // String logging.logback.rollingpolicy.max-history
      54: ldc           #79                 // String logging.file.max-history
      56: invokevirtual #48                 // Method applyRollingPolicy:(Lorg/springframework/core/env/PropertyResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
      59: return

  private void applyRollingPolicy(org.springframework.core.env.PropertyResolver, java.lang.String, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: ldc           #81                 // class java/lang/String
       8: invokevirtual #66                 // Method applyRollingPolicy:(Lorg/springframework/core/env/PropertyResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Class;)V
      11: return

  private <T> void applyRollingPolicy(org.springframework.core.env.PropertyResolver, java.lang.String, java.lang.String, java.lang.String, java.lang.Class<T>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_3
       3: aload         5
       5: invokevirtual #83                 // Method getProperty:(Lorg/springframework/core/env/PropertyResolver;Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;
       8: astore        6
      10: aload         6
      12: ifnonnull     26
      15: aload_0
      16: aload_1
      17: aload         4
      19: aload         5
      21: invokevirtual #83                 // Method getProperty:(Lorg/springframework/core/env/PropertyResolver;Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;
      24: astore        6
      26: aload         6
      28: ifnull        71
      31: aload         6
      33: instanceof    #64                 // class org/springframework/util/unit/DataSize
      36: ifeq          57
      39: aload         6
      41: checkcast     #64                 // class org/springframework/util/unit/DataSize
      44: astore        8
      46: aload         8
      48: invokevirtual #87                 // Method org/springframework/util/unit/DataSize.toBytes:()J
      51: invokestatic  #91                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      54: goto          59
      57: aload         6
      59: invokestatic  #97                 // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
      62: astore        7
      64: aload_0
      65: aload_2
      66: aload         7
      68: invokevirtual #38                 // Method setSystemProperty:(Ljava/lang/String;Ljava/lang/String;)V
      71: return

  private <T> T getProperty(org.springframework.core.env.PropertyResolver, java.lang.String, java.lang.Class<T>);
    Code:
       0: aload_1
       1: aload_2
       2: aload_3
       3: invokeinterface #100,  3          // InterfaceMethod org/springframework/core/env/PropertyResolver.getProperty:(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;
       8: areturn
       9: astore        4
      11: aload_3
      12: ldc           #64                 // class org/springframework/util/unit/DataSize
      14: if_acmpeq     20
      17: aload         4
      19: athrow
      20: aload_1
      21: aload_2
      22: invokeinterface #109,  2          // InterfaceMethod org/springframework/core/env/PropertyResolver.getProperty:(Ljava/lang/String;)Ljava/lang/String;
      27: astore        5
      29: aload         5
      31: invokestatic  #112                // Method ch/qos/logback/core/util/FileSize.valueOf:(Ljava/lang/String;)Lch/qos/logback/core/util/FileSize;
      34: invokevirtual #117                // Method ch/qos/logback/core/util/FileSize.getSize:()J
      37: invokestatic  #120                // Method org/springframework/util/unit/DataSize.ofBytes:(J)Lorg/springframework/util/unit/DataSize;
      40: areturn
    Exception table:
       from    to  target type
           0     8     9   Class org/springframework/core/convert/ConversionFailedException
           0     8     9   Class org/springframework/core/convert/ConverterNotFoundException

  static {};
    Code:
       0: ldc           #124                // String org.jboss.logging.Logger
       2: ldc           #21                 // class org/springframework/boot/logging/logback/LogbackLoggingSystemProperties
       4: invokevirtual #126                // Method java/lang/Class.getClassLoader:()Ljava/lang/ClassLoader;
       7: invokestatic  #132                // Method org/springframework/util/ClassUtils.isPresent:(Ljava/lang/String;Ljava/lang/ClassLoader;)Z
      10: putstatic     #30                 // Field JBOSS_LOGGING_PRESENT:Z
      13: return
}

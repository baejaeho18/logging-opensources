Compiled from "ApplicationPid.java"
public class org.springframework.boot.system.ApplicationPid {
  private static final java.nio.file.attribute.PosixFilePermission[] WRITE_PERMISSIONS;

  private final java.lang.String pid;

  public org.springframework.boot.system.ApplicationPid();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: invokevirtual #7                  // Method getPid:()Ljava/lang/String;
       9: putfield      #13                 // Field pid:Ljava/lang/String;
      12: return

  protected org.springframework.boot.system.ApplicationPid(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #13                 // Field pid:Ljava/lang/String;
       9: return

  private java.lang.String getPid();
    Code:
       0: invokestatic  #17                 // InterfaceMethod java/lang/ProcessHandle.current:()Ljava/lang/ProcessHandle;
       3: invokeinterface #23,  1           // InterfaceMethod java/lang/ProcessHandle.pid:()J
       8: invokestatic  #26                 // Method java/lang/Long.toString:(J)Ljava/lang/String;
      11: areturn
      12: astore_1
      13: aconst_null
      14: areturn
    Exception table:
       from    to  target type
           0    11    12   Class java/lang/Throwable

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: aload_0
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #8                  // class org/springframework/boot/system/ApplicationPid
      11: ifeq          31
      14: aload_1
      15: checkcast     #8                  // class org/springframework/boot/system/ApplicationPid
      18: astore_2
      19: aload_0
      20: getfield      #13                 // Field pid:Ljava/lang/String;
      23: aload_2
      24: getfield      #13                 // Field pid:Ljava/lang/String;
      27: invokestatic  #34                 // Method org/springframework/util/ObjectUtils.nullSafeEquals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      30: ireturn
      31: iconst_0
      32: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #13                 // Field pid:Ljava/lang/String;
       4: invokestatic  #40                 // Method org/springframework/util/ObjectUtils.nullSafeHashCode:(Ljava/lang/Object;)I
       7: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #13                 // Field pid:Ljava/lang/String;
       4: ifnull        14
       7: aload_0
       8: getfield      #13                 // Field pid:Ljava/lang/String;
      11: goto          16
      14: ldc           #44                 // String ???
      16: areturn

  public void write(java.io.File) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field pid:Ljava/lang/String;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ldc           #46                 // String No PID available
      14: invokestatic  #48                 // Method org/springframework/util/Assert.state:(ZLjava/lang/String;)V
      17: aload_0
      18: aload_1
      19: invokevirtual #54                 // Method createParentDirectory:(Ljava/io/File;)V
      22: aload_1
      23: invokevirtual #58                 // Method java/io/File.exists:()Z
      26: ifeq          34
      29: aload_0
      30: aload_1
      31: invokevirtual #64                 // Method assertCanOverwrite:(Ljava/io/File;)V
      34: new           #67                 // class java/io/FileWriter
      37: dup
      38: aload_1
      39: invokespecial #69                 // Method java/io/FileWriter."<init>":(Ljava/io/File;)V
      42: astore_2
      43: aload_2
      44: aload_0
      45: getfield      #13                 // Field pid:Ljava/lang/String;
      48: invokevirtual #71                 // Method java/io/FileWriter.append:(Ljava/lang/CharSequence;)Ljava/io/Writer;
      51: pop
      52: aload_2
      53: invokevirtual #75                 // Method java/io/FileWriter.close:()V
      56: goto          77
      59: astore_3
      60: aload_2
      61: invokevirtual #75                 // Method java/io/FileWriter.close:()V
      64: goto          75
      67: astore        4
      69: aload_3
      70: aload         4
      72: invokevirtual #78                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
      75: aload_3
      76: athrow
      77: return
    Exception table:
       from    to  target type
          43    52    59   Class java/lang/Throwable
          60    64    67   Class java/lang/Throwable

  private void createParentDirectory(java.io.File);
    Code:
       0: aload_1
       1: invokevirtual #82                 // Method java/io/File.getParentFile:()Ljava/io/File;
       4: astore_2
       5: aload_2
       6: ifnull        14
       9: aload_2
      10: invokevirtual #86                 // Method java/io/File.mkdirs:()Z
      13: pop
      14: return

  private void assertCanOverwrite(java.io.File) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #89                 // Method java/io/File.canWrite:()Z
       4: ifeq          15
       7: aload_0
       8: aload_1
       9: invokevirtual #92                 // Method canWritePosixFile:(Ljava/io/File;)Z
      12: ifne          32
      15: new           #96                 // class java/io/FileNotFoundException
      18: dup
      19: aload_1
      20: invokevirtual #98                 // Method java/io/File.toString:()Ljava/lang/String;
      23: invokedynamic #100,  0            // InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
      28: invokespecial #104                // Method java/io/FileNotFoundException."<init>":(Ljava/lang/String;)V
      31: athrow
      32: return

  private boolean canWritePosixFile(java.io.File) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #107                // Method java/io/File.toPath:()Ljava/nio/file/Path;
       4: iconst_0
       5: anewarray     #111                // class java/nio/file/LinkOption
       8: invokestatic  #113                // Method java/nio/file/Files.getPosixFilePermissions:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Ljava/util/Set;
      11: astore_2
      12: getstatic     #119                // Field WRITE_PERMISSIONS:[Ljava/nio/file/attribute/PosixFilePermission;
      15: astore_3
      16: aload_3
      17: arraylength
      18: istore        4
      20: iconst_0
      21: istore        5
      23: iload         5
      25: iload         4
      27: if_icmpge     55
      30: aload_3
      31: iload         5
      33: aaload
      34: astore        6
      36: aload_2
      37: aload         6
      39: invokeinterface #123,  2          // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      44: ifeq          49
      47: iconst_1
      48: ireturn
      49: iinc          5, 1
      52: goto          23
      55: iconst_0
      56: ireturn
      57: astore_2
      58: iconst_1
      59: ireturn
    Exception table:
       from    to  target type
           0    48    57   Class java/lang/UnsupportedOperationException
          49    56    57   Class java/lang/UnsupportedOperationException

  static {};
    Code:
       0: iconst_3
       1: anewarray     #131                // class java/nio/file/attribute/PosixFilePermission
       4: dup
       5: iconst_0
       6: getstatic     #133                // Field java/nio/file/attribute/PosixFilePermission.OWNER_WRITE:Ljava/nio/file/attribute/PosixFilePermission;
       9: aastore
      10: dup
      11: iconst_1
      12: getstatic     #137                // Field java/nio/file/attribute/PosixFilePermission.GROUP_WRITE:Ljava/nio/file/attribute/PosixFilePermission;
      15: aastore
      16: dup
      17: iconst_2
      18: getstatic     #140                // Field java/nio/file/attribute/PosixFilePermission.OTHERS_WRITE:Ljava/nio/file/attribute/PosixFilePermission;
      21: aastore
      22: putstatic     #119                // Field WRITE_PERMISSIONS:[Ljava/nio/file/attribute/PosixFilePermission;
      25: return
}

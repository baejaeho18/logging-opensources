Compiled from "Scheduler.java"
public abstract class io.reactivex.rxjava3.core.Scheduler {
  static boolean IS_DRIFT_USE_NANOTIME;

  static final long CLOCK_DRIFT_TOLERANCE_NANOSECONDS;

  public io.reactivex.rxjava3.core.Scheduler();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  static long computeNow(java.util.concurrent.TimeUnit);
    Code:
       0: getstatic     #2                  // Field IS_DRIFT_USE_NANOTIME:Z
       3: ifne          17
       6: aload_0
       7: invokestatic  #3                  // Method java/lang/System.currentTimeMillis:()J
      10: getstatic     #4                  // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      13: invokevirtual #5                  // Method java/util/concurrent/TimeUnit.convert:(JLjava/util/concurrent/TimeUnit;)J
      16: lreturn
      17: aload_0
      18: invokestatic  #6                  // Method java/lang/System.nanoTime:()J
      21: getstatic     #7                  // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      24: invokevirtual #5                  // Method java/util/concurrent/TimeUnit.convert:(JLjava/util/concurrent/TimeUnit;)J
      27: lreturn

  static long computeClockDrift(long, java.lang.String);
    Code:
       0: ldc           #8                  // String seconds
       2: aload_2
       3: invokevirtual #9                  // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
       6: ifeq          17
       9: getstatic     #10                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      12: lload_0
      13: invokevirtual #11                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      16: lreturn
      17: ldc           #12                 // String milliseconds
      19: aload_2
      20: invokevirtual #9                  // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      23: ifeq          34
      26: getstatic     #4                  // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      29: lload_0
      30: invokevirtual #11                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      33: lreturn
      34: getstatic     #13                 // Field java/util/concurrent/TimeUnit.MINUTES:Ljava/util/concurrent/TimeUnit;
      37: lload_0
      38: invokevirtual #11                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      41: lreturn

  public static long clockDriftTolerance();
    Code:
       0: getstatic     #14                 // Field CLOCK_DRIFT_TOLERANCE_NANOSECONDS:J
       3: lreturn

  public abstract io.reactivex.rxjava3.core.Scheduler$Worker createWorker();

  public long now(java.util.concurrent.TimeUnit);
    Code:
       0: aload_1
       1: invokestatic  #15                 // Method computeNow:(Ljava/util/concurrent/TimeUnit;)J
       4: lreturn

  public void start();
    Code:
       0: return

  public void shutdown();
    Code:
       0: return

  public io.reactivex.rxjava3.disposables.Disposable scheduleDirect(java.lang.Runnable);
    Code:
       0: aload_0
       1: aload_1
       2: lconst_0
       3: getstatic     #7                  // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
       6: invokevirtual #16                 // Method scheduleDirect:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;
       9: areturn

  public io.reactivex.rxjava3.disposables.Disposable scheduleDirect(java.lang.Runnable, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method createWorker:()Lio/reactivex/rxjava3/core/Scheduler$Worker;
       4: astore        5
       6: aload_1
       7: invokestatic  #18                 // Method io/reactivex/rxjava3/plugins/RxJavaPlugins.onSchedule:(Ljava/lang/Runnable;)Ljava/lang/Runnable;
      10: astore        6
      12: new           #19                 // class io/reactivex/rxjava3/core/Scheduler$DisposeTask
      15: dup
      16: aload         6
      18: aload         5
      20: invokespecial #20                 // Method io/reactivex/rxjava3/core/Scheduler$DisposeTask."<init>":(Ljava/lang/Runnable;Lio/reactivex/rxjava3/core/Scheduler$Worker;)V
      23: astore        7
      25: aload         5
      27: aload         7
      29: lload_2
      30: aload         4
      32: invokevirtual #21                 // Method io/reactivex/rxjava3/core/Scheduler$Worker.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;
      35: pop
      36: aload         7
      38: areturn

  public io.reactivex.rxjava3.disposables.Disposable schedulePeriodicallyDirect(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method createWorker:()Lio/reactivex/rxjava3/core/Scheduler$Worker;
       4: astore        7
       6: aload_1
       7: invokestatic  #18                 // Method io/reactivex/rxjava3/plugins/RxJavaPlugins.onSchedule:(Ljava/lang/Runnable;)Ljava/lang/Runnable;
      10: astore        8
      12: new           #22                 // class io/reactivex/rxjava3/core/Scheduler$PeriodicDirectTask
      15: dup
      16: aload         8
      18: aload         7
      20: invokespecial #23                 // Method io/reactivex/rxjava3/core/Scheduler$PeriodicDirectTask."<init>":(Ljava/lang/Runnable;Lio/reactivex/rxjava3/core/Scheduler$Worker;)V
      23: astore        9
      25: aload         7
      27: aload         9
      29: lload_2
      30: lload         4
      32: aload         6
      34: invokevirtual #24                 // Method io/reactivex/rxjava3/core/Scheduler$Worker.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;
      37: astore        10
      39: aload         10
      41: getstatic     #25                 // Field io/reactivex/rxjava3/internal/disposables/EmptyDisposable.INSTANCE:Lio/reactivex/rxjava3/internal/disposables/EmptyDisposable;
      44: if_acmpne     50
      47: aload         10
      49: areturn
      50: aload         9
      52: areturn

  public <S extends io.reactivex.rxjava3.core.Scheduler & io.reactivex.rxjava3.disposables.Disposable> S when(io.reactivex.rxjava3.functions.Function<io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.core.Flowable<io.reactivex.rxjava3.core.Completable>>, io.reactivex.rxjava3.core.Completable>);
    Code:
       0: aload_1
       1: ldc           #26                 // String combine is null
       3: invokestatic  #27                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: new           #28                 // class io/reactivex/rxjava3/internal/schedulers/SchedulerWhen
      10: dup
      11: aload_1
      12: aload_0
      13: invokespecial #29                 // Method io/reactivex/rxjava3/internal/schedulers/SchedulerWhen."<init>":(Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/core/Scheduler;)V
      16: areturn

  static {};
    Code:
       0: ldc           #30                 // String rx3.scheduler.use-nanotime
       2: invokestatic  #31                 // Method java/lang/Boolean.getBoolean:(Ljava/lang/String;)Z
       5: putstatic     #2                  // Field IS_DRIFT_USE_NANOTIME:Z
       8: ldc           #32                 // String rx3.scheduler.drift-tolerance
      10: ldc2_w        #33                 // long 15l
      13: invokestatic  #35                 // Method java/lang/Long.getLong:(Ljava/lang/String;J)Ljava/lang/Long;
      16: invokevirtual #36                 // Method java/lang/Long.longValue:()J
      19: ldc           #37                 // String rx3.scheduler.drift-tolerance-unit
      21: ldc           #38                 // String minutes
      23: invokestatic  #39                 // Method java/lang/System.getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      26: invokestatic  #40                 // Method computeClockDrift:(JLjava/lang/String;)J
      29: putstatic     #14                 // Field CLOCK_DRIFT_TOLERANCE_NANOSECONDS:J
      32: return
}

Compiled from "ComputationScheduler.java"
public final class io.reactivex.rxjava3.internal.schedulers.ComputationScheduler extends io.reactivex.rxjava3.core.Scheduler implements io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport {
  static final io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$FixedSchedulerPool NONE;

  private static final java.lang.String THREAD_NAME_PREFIX;

  static final io.reactivex.rxjava3.internal.schedulers.RxThreadFactory THREAD_FACTORY;

  static final java.lang.String KEY_MAX_THREADS;

  static final int MAX_THREADS;

  static final io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$PoolWorker SHUTDOWN_WORKER;

  final java.util.concurrent.ThreadFactory threadFactory;

  final java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$FixedSchedulerPool> pool;

  private static final java.lang.String KEY_COMPUTATION_PRIORITY;

  static int cap(int, int);
    Code:
       0: iload_1
       1: ifle          9
       4: iload_1
       5: iload_0
       6: if_icmple     13
       9: iload_0
      10: goto          14
      13: iload_1
      14: ireturn

  public io.reactivex.rxjava3.internal.schedulers.ComputationScheduler();
    Code:
       0: aload_0
       1: getstatic     #1                  // Field THREAD_FACTORY:Lio/reactivex/rxjava3/internal/schedulers/RxThreadFactory;
       4: invokespecial #2                  // Method "<init>":(Ljava/util/concurrent/ThreadFactory;)V
       7: return

  public io.reactivex.rxjava3.internal.schedulers.ComputationScheduler(java.util.concurrent.ThreadFactory);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method io/reactivex/rxjava3/core/Scheduler."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #4                  // Field threadFactory:Ljava/util/concurrent/ThreadFactory;
       9: aload_0
      10: new           #5                  // class java/util/concurrent/atomic/AtomicReference
      13: dup
      14: getstatic     #6                  // Field NONE:Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$FixedSchedulerPool;
      17: invokespecial #7                  // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      20: putfield      #8                  // Field pool:Ljava/util/concurrent/atomic/AtomicReference;
      23: aload_0
      24: invokevirtual #9                  // Method start:()V
      27: return

  public io.reactivex.rxjava3.core.Scheduler$Worker createWorker();
    Code:
       0: new           #10                 // class io/reactivex/rxjava3/internal/schedulers/ComputationScheduler$EventLoopWorker
       3: dup
       4: aload_0
       5: getfield      #8                  // Field pool:Ljava/util/concurrent/atomic/AtomicReference;
       8: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      11: checkcast     #12                 // class io/reactivex/rxjava3/internal/schedulers/ComputationScheduler$FixedSchedulerPool
      14: invokevirtual #13                 // Method io/reactivex/rxjava3/internal/schedulers/ComputationScheduler$FixedSchedulerPool.getEventLoop:()Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$PoolWorker;
      17: invokespecial #14                 // Method io/reactivex/rxjava3/internal/schedulers/ComputationScheduler$EventLoopWorker."<init>":(Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$PoolWorker;)V
      20: areturn

  public void createWorkers(int, io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport$WorkerCallback);
    Code:
       0: iload_1
       1: ldc           #15                 // String number > 0 required
       3: invokestatic  #16                 // Method io/reactivex/rxjava3/internal/functions/ObjectHelper.verifyPositive:(ILjava/lang/String;)I
       6: pop
       7: aload_0
       8: getfield      #8                  // Field pool:Ljava/util/concurrent/atomic/AtomicReference;
      11: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      14: checkcast     #12                 // class io/reactivex/rxjava3/internal/schedulers/ComputationScheduler$FixedSchedulerPool
      17: iload_1
      18: aload_2
      19: invokevirtual #17                 // Method io/reactivex/rxjava3/internal/schedulers/ComputationScheduler$FixedSchedulerPool.createWorkers:(ILio/reactivex/rxjava3/internal/schedulers/SchedulerMultiWorkerSupport$WorkerCallback;)V
      22: return

  public io.reactivex.rxjava3.disposables.Disposable scheduleDirect(java.lang.Runnable, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: getfield      #8                  // Field pool:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #12                 // class io/reactivex/rxjava3/internal/schedulers/ComputationScheduler$FixedSchedulerPool
      10: invokevirtual #13                 // Method io/reactivex/rxjava3/internal/schedulers/ComputationScheduler$FixedSchedulerPool.getEventLoop:()Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$PoolWorker;
      13: astore        5
      15: aload         5
      17: aload_1
      18: lload_2
      19: aload         4
      21: invokevirtual #18                 // Method io/reactivex/rxjava3/internal/schedulers/ComputationScheduler$PoolWorker.scheduleDirect:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;
      24: areturn

  public io.reactivex.rxjava3.disposables.Disposable schedulePeriodicallyDirect(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: getfield      #8                  // Field pool:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #12                 // class io/reactivex/rxjava3/internal/schedulers/ComputationScheduler$FixedSchedulerPool
      10: invokevirtual #13                 // Method io/reactivex/rxjava3/internal/schedulers/ComputationScheduler$FixedSchedulerPool.getEventLoop:()Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$PoolWorker;
      13: astore        7
      15: aload         7
      17: aload_1
      18: lload_2
      19: lload         4
      21: aload         6
      23: invokevirtual #19                 // Method io/reactivex/rxjava3/internal/schedulers/ComputationScheduler$PoolWorker.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;
      26: areturn

  public void start();
    Code:
       0: new           #12                 // class io/reactivex/rxjava3/internal/schedulers/ComputationScheduler$FixedSchedulerPool
       3: dup
       4: getstatic     #20                 // Field MAX_THREADS:I
       7: aload_0
       8: getfield      #4                  // Field threadFactory:Ljava/util/concurrent/ThreadFactory;
      11: invokespecial #21                 // Method io/reactivex/rxjava3/internal/schedulers/ComputationScheduler$FixedSchedulerPool."<init>":(ILjava/util/concurrent/ThreadFactory;)V
      14: astore_1
      15: aload_0
      16: getfield      #8                  // Field pool:Ljava/util/concurrent/atomic/AtomicReference;
      19: getstatic     #6                  // Field NONE:Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$FixedSchedulerPool;
      22: aload_1
      23: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      26: ifne          33
      29: aload_1
      30: invokevirtual #23                 // Method io/reactivex/rxjava3/internal/schedulers/ComputationScheduler$FixedSchedulerPool.shutdown:()V
      33: return

  public void shutdown();
    Code:
       0: aload_0
       1: getfield      #8                  // Field pool:Ljava/util/concurrent/atomic/AtomicReference;
       4: getstatic     #6                  // Field NONE:Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$FixedSchedulerPool;
       7: invokevirtual #24                 // Method java/util/concurrent/atomic/AtomicReference.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #12                 // class io/reactivex/rxjava3/internal/schedulers/ComputationScheduler$FixedSchedulerPool
      13: astore_1
      14: aload_1
      15: getstatic     #6                  // Field NONE:Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$FixedSchedulerPool;
      18: if_acmpeq     25
      21: aload_1
      22: invokevirtual #23                 // Method io/reactivex/rxjava3/internal/schedulers/ComputationScheduler$FixedSchedulerPool.shutdown:()V
      25: return

  static {};
    Code:
       0: invokestatic  #25                 // Method java/lang/Runtime.getRuntime:()Ljava/lang/Runtime;
       3: invokevirtual #26                 // Method java/lang/Runtime.availableProcessors:()I
       6: ldc           #28                 // String rx3.computation-threads
       8: iconst_0
       9: invokestatic  #29                 // Method java/lang/Integer.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;
      12: invokevirtual #30                 // Method java/lang/Integer.intValue:()I
      15: invokestatic  #31                 // Method cap:(II)I
      18: putstatic     #20                 // Field MAX_THREADS:I
      21: new           #32                 // class io/reactivex/rxjava3/internal/schedulers/ComputationScheduler$PoolWorker
      24: dup
      25: new           #33                 // class io/reactivex/rxjava3/internal/schedulers/RxThreadFactory
      28: dup
      29: ldc           #34                 // String RxComputationShutdown
      31: invokespecial #35                 // Method io/reactivex/rxjava3/internal/schedulers/RxThreadFactory."<init>":(Ljava/lang/String;)V
      34: invokespecial #36                 // Method io/reactivex/rxjava3/internal/schedulers/ComputationScheduler$PoolWorker."<init>":(Ljava/util/concurrent/ThreadFactory;)V
      37: putstatic     #37                 // Field SHUTDOWN_WORKER:Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$PoolWorker;
      40: getstatic     #37                 // Field SHUTDOWN_WORKER:Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$PoolWorker;
      43: invokevirtual #38                 // Method io/reactivex/rxjava3/internal/schedulers/ComputationScheduler$PoolWorker.dispose:()V
      46: iconst_1
      47: bipush        10
      49: ldc           #40                 // String rx3.computation-priority
      51: iconst_5
      52: invokestatic  #29                 // Method java/lang/Integer.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;
      55: invokevirtual #30                 // Method java/lang/Integer.intValue:()I
      58: invokestatic  #41                 // Method java/lang/Math.min:(II)I
      61: invokestatic  #42                 // Method java/lang/Math.max:(II)I
      64: istore_0
      65: new           #33                 // class io/reactivex/rxjava3/internal/schedulers/RxThreadFactory
      68: dup
      69: ldc           #43                 // String RxComputationThreadPool
      71: iload_0
      72: iconst_1
      73: invokespecial #44                 // Method io/reactivex/rxjava3/internal/schedulers/RxThreadFactory."<init>":(Ljava/lang/String;IZ)V
      76: putstatic     #1                  // Field THREAD_FACTORY:Lio/reactivex/rxjava3/internal/schedulers/RxThreadFactory;
      79: new           #12                 // class io/reactivex/rxjava3/internal/schedulers/ComputationScheduler$FixedSchedulerPool
      82: dup
      83: iconst_0
      84: getstatic     #1                  // Field THREAD_FACTORY:Lio/reactivex/rxjava3/internal/schedulers/RxThreadFactory;
      87: invokespecial #21                 // Method io/reactivex/rxjava3/internal/schedulers/ComputationScheduler$FixedSchedulerPool."<init>":(ILjava/util/concurrent/ThreadFactory;)V
      90: putstatic     #6                  // Field NONE:Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$FixedSchedulerPool;
      93: getstatic     #6                  // Field NONE:Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$FixedSchedulerPool;
      96: invokevirtual #23                 // Method io/reactivex/rxjava3/internal/schedulers/ComputationScheduler$FixedSchedulerPool.shutdown:()V
      99: return
}

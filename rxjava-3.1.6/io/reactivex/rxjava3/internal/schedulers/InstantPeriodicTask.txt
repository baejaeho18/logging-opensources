Compiled from "InstantPeriodicTask.java"
final class io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask implements java.util.concurrent.Callable<java.lang.Void>, io.reactivex.rxjava3.disposables.Disposable {
  final java.lang.Runnable task;

  final java.util.concurrent.atomic.AtomicReference<java.util.concurrent.Future<?>> rest;

  final java.util.concurrent.atomic.AtomicReference<java.util.concurrent.Future<?>> first;

  final java.util.concurrent.ExecutorService executor;

  java.lang.Thread runner;

  static final java.util.concurrent.FutureTask<java.lang.Void> CANCELLED;

  io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask(java.lang.Runnable, java.util.concurrent.ExecutorService);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field task:Ljava/lang/Runnable;
       9: aload_0
      10: new           #3                  // class java/util/concurrent/atomic/AtomicReference
      13: dup
      14: invokespecial #4                  // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      17: putfield      #5                  // Field first:Ljava/util/concurrent/atomic/AtomicReference;
      20: aload_0
      21: new           #3                  // class java/util/concurrent/atomic/AtomicReference
      24: dup
      25: invokespecial #4                  // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      28: putfield      #6                  // Field rest:Ljava/util/concurrent/atomic/AtomicReference;
      31: aload_0
      32: aload_2
      33: putfield      #7                  // Field executor:Ljava/util/concurrent/ExecutorService;
      36: return

  public java.lang.Void call();
    Code:
       0: aload_0
       1: invokestatic  #8                  // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       4: putfield      #9                  // Field runner:Ljava/lang/Thread;
       7: aload_0
       8: getfield      #2                  // Field task:Ljava/lang/Runnable;
      11: invokeinterface #10,  1           // InterfaceMethod java/lang/Runnable.run:()V
      16: aload_0
      17: aconst_null
      18: putfield      #9                  // Field runner:Ljava/lang/Thread;
      21: aload_0
      22: aload_0
      23: getfield      #7                  // Field executor:Ljava/util/concurrent/ExecutorService;
      26: aload_0
      27: invokeinterface #11,  2           // InterfaceMethod java/util/concurrent/ExecutorService.submit:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;
      32: invokevirtual #12                 // Method setRest:(Ljava/util/concurrent/Future;)V
      35: goto          50
      38: astore_1
      39: aload_0
      40: aconst_null
      41: putfield      #9                  // Field runner:Ljava/lang/Thread;
      44: aload_1
      45: invokestatic  #14                 // Method io/reactivex/rxjava3/plugins/RxJavaPlugins.onError:(Ljava/lang/Throwable;)V
      48: aload_1
      49: athrow
      50: aconst_null
      51: areturn
    Exception table:
       from    to  target type
           7    35    38   Class java/lang/Throwable

  public void dispose();
    Code:
       0: aload_0
       1: getfield      #5                  // Field first:Ljava/util/concurrent/atomic/AtomicReference;
       4: getstatic     #15                 // Field CANCELLED:Ljava/util/concurrent/FutureTask;
       7: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicReference.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #17                 // class java/util/concurrent/Future
      13: astore_1
      14: aload_1
      15: ifnull        47
      18: aload_1
      19: getstatic     #15                 // Field CANCELLED:Ljava/util/concurrent/FutureTask;
      22: if_acmpeq     47
      25: aload_1
      26: aload_0
      27: getfield      #9                  // Field runner:Ljava/lang/Thread;
      30: invokestatic  #8                  // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      33: if_acmpeq     40
      36: iconst_1
      37: goto          41
      40: iconst_0
      41: invokeinterface #18,  2           // InterfaceMethod java/util/concurrent/Future.cancel:(Z)Z
      46: pop
      47: aload_0
      48: getfield      #6                  // Field rest:Ljava/util/concurrent/atomic/AtomicReference;
      51: getstatic     #15                 // Field CANCELLED:Ljava/util/concurrent/FutureTask;
      54: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicReference.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;
      57: checkcast     #17                 // class java/util/concurrent/Future
      60: astore_1
      61: aload_1
      62: ifnull        94
      65: aload_1
      66: getstatic     #15                 // Field CANCELLED:Ljava/util/concurrent/FutureTask;
      69: if_acmpeq     94
      72: aload_1
      73: aload_0
      74: getfield      #9                  // Field runner:Ljava/lang/Thread;
      77: invokestatic  #8                  // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      80: if_acmpeq     87
      83: iconst_1
      84: goto          88
      87: iconst_0
      88: invokeinterface #18,  2           // InterfaceMethod java/util/concurrent/Future.cancel:(Z)Z
      93: pop
      94: return

  public boolean isDisposed();
    Code:
       0: aload_0
       1: getfield      #5                  // Field first:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: getstatic     #15                 // Field CANCELLED:Ljava/util/concurrent/FutureTask;
      10: if_acmpne     17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn

  void setFirst(java.util.concurrent.Future<?>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field first:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #17                 // class java/util/concurrent/Future
      10: astore_2
      11: aload_2
      12: getstatic     #15                 // Field CANCELLED:Ljava/util/concurrent/FutureTask;
      15: if_acmpne     41
      18: aload_1
      19: aload_0
      20: getfield      #9                  // Field runner:Ljava/lang/Thread;
      23: invokestatic  #8                  // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      26: if_acmpeq     33
      29: iconst_1
      30: goto          34
      33: iconst_0
      34: invokeinterface #18,  2           // InterfaceMethod java/util/concurrent/Future.cancel:(Z)Z
      39: pop
      40: return
      41: aload_0
      42: getfield      #5                  // Field first:Ljava/util/concurrent/atomic/AtomicReference;
      45: aload_2
      46: aload_1
      47: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      50: ifeq          54
      53: return
      54: goto          0

  void setRest(java.util.concurrent.Future<?>);
    Code:
       0: aload_0
       1: getfield      #6                  // Field rest:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #17                 // class java/util/concurrent/Future
      10: astore_2
      11: aload_2
      12: getstatic     #15                 // Field CANCELLED:Ljava/util/concurrent/FutureTask;
      15: if_acmpne     41
      18: aload_1
      19: aload_0
      20: getfield      #9                  // Field runner:Ljava/lang/Thread;
      23: invokestatic  #8                  // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      26: if_acmpeq     33
      29: iconst_1
      30: goto          34
      33: iconst_0
      34: invokeinterface #18,  2           // InterfaceMethod java/util/concurrent/Future.cancel:(Z)Z
      39: pop
      40: return
      41: aload_0
      42: getfield      #6                  // Field rest:Ljava/util/concurrent/atomic/AtomicReference;
      45: aload_2
      46: aload_1
      47: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      50: ifeq          54
      53: return
      54: goto          0

  public java.lang.Object call() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokevirtual #21                 // Method call:()Ljava/lang/Void;
       4: areturn

  static {};
    Code:
       0: new           #22                 // class java/util/concurrent/FutureTask
       3: dup
       4: getstatic     #23                 // Field io/reactivex/rxjava3/internal/functions/Functions.EMPTY_RUNNABLE:Ljava/lang/Runnable;
       7: aconst_null
       8: invokespecial #24                 // Method java/util/concurrent/FutureTask."<init>":(Ljava/lang/Runnable;Ljava/lang/Object;)V
      11: putstatic     #15                 // Field CANCELLED:Ljava/util/concurrent/FutureTask;
      14: return
}

Compiled from "IoScheduler.java"
final class io.reactivex.rxjava3.internal.schedulers.IoScheduler$EventLoopWorker extends io.reactivex.rxjava3.core.Scheduler$Worker implements java.lang.Runnable {
  private final io.reactivex.rxjava3.disposables.CompositeDisposable tasks;

  private final io.reactivex.rxjava3.internal.schedulers.IoScheduler$CachedWorkerPool pool;

  private final io.reactivex.rxjava3.internal.schedulers.IoScheduler$ThreadWorker threadWorker;

  final java.util.concurrent.atomic.AtomicBoolean once;

  io.reactivex.rxjava3.internal.schedulers.IoScheduler$EventLoopWorker(io.reactivex.rxjava3.internal.schedulers.IoScheduler$CachedWorkerPool);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method io/reactivex/rxjava3/core/Scheduler$Worker."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicBoolean
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      12: putfield      #4                  // Field once:Ljava/util/concurrent/atomic/AtomicBoolean;
      15: aload_0
      16: aload_1
      17: putfield      #5                  // Field pool:Lio/reactivex/rxjava3/internal/schedulers/IoScheduler$CachedWorkerPool;
      20: aload_0
      21: new           #6                  // class io/reactivex/rxjava3/disposables/CompositeDisposable
      24: dup
      25: invokespecial #7                  // Method io/reactivex/rxjava3/disposables/CompositeDisposable."<init>":()V
      28: putfield      #8                  // Field tasks:Lio/reactivex/rxjava3/disposables/CompositeDisposable;
      31: aload_0
      32: aload_1
      33: invokevirtual #9                  // Method io/reactivex/rxjava3/internal/schedulers/IoScheduler$CachedWorkerPool.get:()Lio/reactivex/rxjava3/internal/schedulers/IoScheduler$ThreadWorker;
      36: putfield      #10                 // Field threadWorker:Lio/reactivex/rxjava3/internal/schedulers/IoScheduler$ThreadWorker;
      39: return

  public void dispose();
    Code:
       0: aload_0
       1: getfield      #4                  // Field once:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_0
       5: iconst_1
       6: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
       9: ifeq          53
      12: aload_0
      13: getfield      #8                  // Field tasks:Lio/reactivex/rxjava3/disposables/CompositeDisposable;
      16: invokevirtual #12                 // Method io/reactivex/rxjava3/disposables/CompositeDisposable.dispose:()V
      19: getstatic     #13                 // Field io/reactivex/rxjava3/internal/schedulers/IoScheduler.USE_SCHEDULED_RELEASE:Z
      22: ifeq          42
      25: aload_0
      26: getfield      #10                 // Field threadWorker:Lio/reactivex/rxjava3/internal/schedulers/IoScheduler$ThreadWorker;
      29: aload_0
      30: lconst_0
      31: getstatic     #14                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      34: aconst_null
      35: invokevirtual #15                 // Method io/reactivex/rxjava3/internal/schedulers/IoScheduler$ThreadWorker.scheduleActual:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/disposables/DisposableContainer;)Lio/reactivex/rxjava3/internal/schedulers/ScheduledRunnable;
      38: pop
      39: goto          53
      42: aload_0
      43: getfield      #5                  // Field pool:Lio/reactivex/rxjava3/internal/schedulers/IoScheduler$CachedWorkerPool;
      46: aload_0
      47: getfield      #10                 // Field threadWorker:Lio/reactivex/rxjava3/internal/schedulers/IoScheduler$ThreadWorker;
      50: invokevirtual #16                 // Method io/reactivex/rxjava3/internal/schedulers/IoScheduler$CachedWorkerPool.release:(Lio/reactivex/rxjava3/internal/schedulers/IoScheduler$ThreadWorker;)V
      53: return

  public void run();
    Code:
       0: aload_0
       1: getfield      #5                  // Field pool:Lio/reactivex/rxjava3/internal/schedulers/IoScheduler$CachedWorkerPool;
       4: aload_0
       5: getfield      #10                 // Field threadWorker:Lio/reactivex/rxjava3/internal/schedulers/IoScheduler$ThreadWorker;
       8: invokevirtual #16                 // Method io/reactivex/rxjava3/internal/schedulers/IoScheduler$CachedWorkerPool.release:(Lio/reactivex/rxjava3/internal/schedulers/IoScheduler$ThreadWorker;)V
      11: return

  public boolean isDisposed();
    Code:
       0: aload_0
       1: getfield      #4                  // Field once:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ireturn

  public io.reactivex.rxjava3.disposables.Disposable schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: getfield      #8                  // Field tasks:Lio/reactivex/rxjava3/disposables/CompositeDisposable;
       4: invokevirtual #18                 // Method io/reactivex/rxjava3/disposables/CompositeDisposable.isDisposed:()Z
       7: ifeq          14
      10: getstatic     #19                 // Field io/reactivex/rxjava3/internal/disposables/EmptyDisposable.INSTANCE:Lio/reactivex/rxjava3/internal/disposables/EmptyDisposable;
      13: areturn
      14: aload_0
      15: getfield      #10                 // Field threadWorker:Lio/reactivex/rxjava3/internal/schedulers/IoScheduler$ThreadWorker;
      18: aload_1
      19: lload_2
      20: aload         4
      22: aload_0
      23: getfield      #8                  // Field tasks:Lio/reactivex/rxjava3/disposables/CompositeDisposable;
      26: invokevirtual #15                 // Method io/reactivex/rxjava3/internal/schedulers/IoScheduler$ThreadWorker.scheduleActual:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/disposables/DisposableContainer;)Lio/reactivex/rxjava3/internal/schedulers/ScheduledRunnable;
      29: areturn
}

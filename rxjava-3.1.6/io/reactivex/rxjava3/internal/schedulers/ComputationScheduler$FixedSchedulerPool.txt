Compiled from "ComputationScheduler.java"
final class io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$FixedSchedulerPool implements io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport {
  final int cores;

  final io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$PoolWorker[] eventLoops;

  long n;

  io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$FixedSchedulerPool(int, java.util.concurrent.ThreadFactory);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iload_1
       6: putfield      #2                  // Field cores:I
       9: aload_0
      10: iload_1
      11: anewarray     #3                  // class io/reactivex/rxjava3/internal/schedulers/ComputationScheduler$PoolWorker
      14: putfield      #4                  // Field eventLoops:[Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$PoolWorker;
      17: iconst_0
      18: istore_3
      19: iload_3
      20: iload_1
      21: if_icmpge     44
      24: aload_0
      25: getfield      #4                  // Field eventLoops:[Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$PoolWorker;
      28: iload_3
      29: new           #3                  // class io/reactivex/rxjava3/internal/schedulers/ComputationScheduler$PoolWorker
      32: dup
      33: aload_2
      34: invokespecial #5                  // Method io/reactivex/rxjava3/internal/schedulers/ComputationScheduler$PoolWorker."<init>":(Ljava/util/concurrent/ThreadFactory;)V
      37: aastore
      38: iinc          3, 1
      41: goto          19
      44: return

  public io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$PoolWorker getEventLoop();
    Code:
       0: aload_0
       1: getfield      #2                  // Field cores:I
       4: istore_1
       5: iload_1
       6: ifne          13
       9: getstatic     #6                  // Field io/reactivex/rxjava3/internal/schedulers/ComputationScheduler.SHUTDOWN_WORKER:Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$PoolWorker;
      12: areturn
      13: aload_0
      14: getfield      #4                  // Field eventLoops:[Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$PoolWorker;
      17: aload_0
      18: dup
      19: getfield      #7                  // Field n:J
      22: dup2_x1
      23: lconst_1
      24: ladd
      25: putfield      #7                  // Field n:J
      28: iload_1
      29: i2l
      30: lrem
      31: l2i
      32: aaload
      33: areturn

  public void shutdown();
    Code:
       0: aload_0
       1: getfield      #4                  // Field eventLoops:[Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$PoolWorker;
       4: astore_1
       5: aload_1
       6: arraylength
       7: istore_2
       8: iconst_0
       9: istore_3
      10: iload_3
      11: iload_2
      12: if_icmpge     31
      15: aload_1
      16: iload_3
      17: aaload
      18: astore        4
      20: aload         4
      22: invokevirtual #8                  // Method io/reactivex/rxjava3/internal/schedulers/ComputationScheduler$PoolWorker.dispose:()V
      25: iinc          3, 1
      28: goto          10
      31: return

  public void createWorkers(int, io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport$WorkerCallback);
    Code:
       0: aload_0
       1: getfield      #2                  // Field cores:I
       4: istore_3
       5: iload_3
       6: ifne          38
       9: iconst_0
      10: istore        4
      12: iload         4
      14: iload_1
      15: if_icmpge     35
      18: aload_2
      19: iload         4
      21: getstatic     #6                  // Field io/reactivex/rxjava3/internal/schedulers/ComputationScheduler.SHUTDOWN_WORKER:Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$PoolWorker;
      24: invokeinterface #9,  3            // InterfaceMethod io/reactivex/rxjava3/internal/schedulers/SchedulerMultiWorkerSupport$WorkerCallback.onWorker:(ILio/reactivex/rxjava3/core/Scheduler$Worker;)V
      29: iinc          4, 1
      32: goto          12
      35: goto          103
      38: aload_0
      39: getfield      #7                  // Field n:J
      42: l2i
      43: iload_3
      44: irem
      45: istore        4
      47: iconst_0
      48: istore        5
      50: iload         5
      52: iload_1
      53: if_icmpge     96
      56: aload_2
      57: iload         5
      59: new           #10                 // class io/reactivex/rxjava3/internal/schedulers/ComputationScheduler$EventLoopWorker
      62: dup
      63: aload_0
      64: getfield      #4                  // Field eventLoops:[Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$PoolWorker;
      67: iload         4
      69: aaload
      70: invokespecial #11                 // Method io/reactivex/rxjava3/internal/schedulers/ComputationScheduler$EventLoopWorker."<init>":(Lio/reactivex/rxjava3/internal/schedulers/ComputationScheduler$PoolWorker;)V
      73: invokeinterface #9,  3            // InterfaceMethod io/reactivex/rxjava3/internal/schedulers/SchedulerMultiWorkerSupport$WorkerCallback.onWorker:(ILio/reactivex/rxjava3/core/Scheduler$Worker;)V
      78: iinc          4, 1
      81: iload         4
      83: iload_3
      84: if_icmpne     90
      87: iconst_0
      88: istore        4
      90: iinc          5, 1
      93: goto          50
      96: aload_0
      97: iload         4
      99: i2l
     100: putfield      #7                  // Field n:J
     103: return
}

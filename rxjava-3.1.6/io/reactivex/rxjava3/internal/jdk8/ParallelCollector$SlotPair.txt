Compiled from "ParallelCollector.java"
final class io.reactivex.rxjava3.internal.jdk8.ParallelCollector$SlotPair<T> extends java.util.concurrent.atomic.AtomicInteger {
  private static final long serialVersionUID;

  T first;

  T second;

  final java.util.concurrent.atomic.AtomicInteger releaseIndex;

  io.reactivex.rxjava3.internal.jdk8.ParallelCollector$SlotPair();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicInteger
       8: dup
       9: invokespecial #1                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      12: putfield      #3                  // Field releaseIndex:Ljava/util/concurrent/atomic/AtomicInteger;
      15: return

  int tryAcquireSlot();
    Code:
       0: aload_0
       1: invokevirtual #4                  // Method get:()I
       4: istore_1
       5: iload_1
       6: iconst_2
       7: if_icmplt     12
      10: iconst_m1
      11: ireturn
      12: aload_0
      13: iload_1
      14: iload_1
      15: iconst_1
      16: iadd
      17: invokevirtual #5                  // Method compareAndSet:(II)Z
      20: ifeq          25
      23: iload_1
      24: ireturn
      25: goto          0

  boolean releaseSlot();
    Code:
       0: aload_0
       1: getfield      #3                  // Field releaseIndex:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #6                  // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
       7: iconst_2
       8: if_icmpne     15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn
}

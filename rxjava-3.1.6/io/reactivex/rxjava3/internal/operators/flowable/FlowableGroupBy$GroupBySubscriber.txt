Compiled from "FlowableGroupBy.java"
public final class io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber<T, K, V> extends java.util.concurrent.atomic.AtomicLong implements io.reactivex.rxjava3.core.FlowableSubscriber<T>, org.reactivestreams.Subscription {
  private static final long serialVersionUID;

  final org.reactivestreams.Subscriber<? super io.reactivex.rxjava3.flowables.GroupedFlowable<K, V>> downstream;

  final io.reactivex.rxjava3.functions.Function<? super T, ? extends K> keySelector;

  final io.reactivex.rxjava3.functions.Function<? super T, ? extends V> valueSelector;

  final int bufferSize;

  final int limit;

  final boolean delayError;

  final java.util.Map<java.lang.Object, io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupedUnicast<K, V>> groups;

  final java.util.Queue<io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupedUnicast<K, V>> evictedGroups;

  static final java.lang.Object NULL_KEY;

  org.reactivestreams.Subscription upstream;

  final java.util.concurrent.atomic.AtomicBoolean cancelled;

  long emittedGroups;

  final java.util.concurrent.atomic.AtomicInteger groupCount;

  final java.util.concurrent.atomic.AtomicLong groupConsumed;

  boolean done;

  public io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber(org.reactivestreams.Subscriber<? super io.reactivex.rxjava3.flowables.GroupedFlowable<K, V>>, io.reactivex.rxjava3.functions.Function<? super T, ? extends K>, io.reactivex.rxjava3.functions.Function<? super T, ? extends V>, int, boolean, java.util.Map<java.lang.Object, io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupedUnicast<K, V>>, java.util.Queue<io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupedUnicast<K, V>>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicBoolean
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      12: putfield      #4                  // Field cancelled:Ljava/util/concurrent/atomic/AtomicBoolean;
      15: aload_0
      16: new           #5                  // class java/util/concurrent/atomic/AtomicInteger
      19: dup
      20: iconst_1
      21: invokespecial #6                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      24: putfield      #7                  // Field groupCount:Ljava/util/concurrent/atomic/AtomicInteger;
      27: aload_0
      28: new           #8                  // class java/util/concurrent/atomic/AtomicLong
      31: dup
      32: invokespecial #1                  // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
      35: putfield      #9                  // Field groupConsumed:Ljava/util/concurrent/atomic/AtomicLong;
      38: aload_0
      39: aload_1
      40: putfield      #10                 // Field downstream:Lorg/reactivestreams/Subscriber;
      43: aload_0
      44: aload_2
      45: putfield      #11                 // Field keySelector:Lio/reactivex/rxjava3/functions/Function;
      48: aload_0
      49: aload_3
      50: putfield      #12                 // Field valueSelector:Lio/reactivex/rxjava3/functions/Function;
      53: aload_0
      54: iload         4
      56: putfield      #13                 // Field bufferSize:I
      59: aload_0
      60: iload         4
      62: iload         4
      64: iconst_2
      65: ishr
      66: isub
      67: putfield      #14                 // Field limit:I
      70: aload_0
      71: iload         5
      73: putfield      #15                 // Field delayError:Z
      76: aload_0
      77: aload         6
      79: putfield      #16                 // Field groups:Ljava/util/Map;
      82: aload_0
      83: aload         7
      85: putfield      #17                 // Field evictedGroups:Ljava/util/Queue;
      88: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #18                 // Field upstream:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #19                 // Method io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          37
      11: aload_0
      12: aload_1
      13: putfield      #18                 // Field upstream:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: getfield      #10                 // Field downstream:Lorg/reactivestreams/Subscriber;
      20: aload_0
      21: invokeinterface #20,  2           // InterfaceMethod org/reactivestreams/Subscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      26: aload_1
      27: aload_0
      28: getfield      #13                 // Field bufferSize:I
      31: i2l
      32: invokeinterface #21,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      37: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #22                 // Field done:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: getfield      #11                 // Field keySelector:Lio/reactivex/rxjava3/functions/Function;
      12: aload_1
      13: invokeinterface #23,  2           // InterfaceMethod io/reactivex/rxjava3/functions/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      18: astore_2
      19: goto          42
      22: astore_3
      23: aload_3
      24: invokestatic  #25                 // Method io/reactivex/rxjava3/exceptions/Exceptions.throwIfFatal:(Ljava/lang/Throwable;)V
      27: aload_0
      28: getfield      #18                 // Field upstream:Lorg/reactivestreams/Subscription;
      31: invokeinterface #26,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      36: aload_0
      37: aload_3
      38: invokevirtual #27                 // Method onError:(Ljava/lang/Throwable;)V
      41: return
      42: iconst_0
      43: istore_3
      44: aload_2
      45: ifnull        52
      48: aload_2
      49: goto          55
      52: getstatic     #28                 // Field NULL_KEY:Ljava/lang/Object;
      55: astore        4
      57: aload_0
      58: getfield      #16                 // Field groups:Ljava/util/Map;
      61: aload         4
      63: invokeinterface #29,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      68: checkcast     #30                 // class io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupedUnicast
      71: astore        5
      73: aload         5
      75: ifnonnull     128
      78: aload_0
      79: getfield      #4                  // Field cancelled:Ljava/util/concurrent/atomic/AtomicBoolean;
      82: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      85: ifeq          89
      88: return
      89: aload_2
      90: aload_0
      91: getfield      #13                 // Field bufferSize:I
      94: aload_0
      95: aload_0
      96: getfield      #15                 // Field delayError:Z
      99: invokestatic  #32                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupedUnicast.createWith:(Ljava/lang/Object;ILio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;Z)Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupedUnicast;
     102: astore        5
     104: aload_0
     105: getfield      #16                 // Field groups:Ljava/util/Map;
     108: aload         4
     110: aload         5
     112: invokeinterface #33,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     117: pop
     118: aload_0
     119: getfield      #7                  // Field groupCount:Ljava/util/concurrent/atomic/AtomicInteger;
     122: invokevirtual #34                 // Method java/util/concurrent/atomic/AtomicInteger.getAndIncrement:()I
     125: pop
     126: iconst_1
     127: istore_3
     128: aload_0
     129: getfield      #12                 // Field valueSelector:Lio/reactivex/rxjava3/functions/Function;
     132: aload_1
     133: invokeinterface #23,  2           // InterfaceMethod io/reactivex/rxjava3/functions/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
     138: ldc           #35                 // String The valueSelector returned a null value.
     140: invokestatic  #36                 // Method io/reactivex/rxjava3/internal/util/ExceptionHelper.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
     143: astore        6
     145: goto          225
     148: astore        7
     150: aload         7
     152: invokestatic  #25                 // Method io/reactivex/rxjava3/exceptions/Exceptions.throwIfFatal:(Ljava/lang/Throwable;)V
     155: aload_0
     156: getfield      #18                 // Field upstream:Lorg/reactivestreams/Subscription;
     159: invokeinterface #26,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
     164: iload_3
     165: ifeq          218
     168: aload_0
     169: getfield      #37                 // Field emittedGroups:J
     172: aload_0
     173: invokevirtual #38                 // Method get:()J
     176: lcmp
     177: ifeq          194
     180: aload_0
     181: getfield      #10                 // Field downstream:Lorg/reactivestreams/Subscriber;
     184: aload         5
     186: invokeinterface #39,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
     191: goto          218
     194: aload_0
     195: getfield      #37                 // Field emittedGroups:J
     198: invokestatic  #40                 // Method groupHangWarning:(J)Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;
     201: astore        8
     203: aload         8
     205: aload         7
     207: invokevirtual #41                 // Method io/reactivex/rxjava3/exceptions/MissingBackpressureException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;
     210: pop
     211: aload_0
     212: aload         8
     214: invokevirtual #27                 // Method onError:(Ljava/lang/Throwable;)V
     217: return
     218: aload_0
     219: aload         7
     221: invokevirtual #27                 // Method onError:(Ljava/lang/Throwable;)V
     224: return
     225: aload         5
     227: aload         6
     229: invokevirtual #42                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupedUnicast.onNext:(Ljava/lang/Object;)V
     232: aload_0
     233: invokespecial #43                 // Method completeEvictions:()V
     236: iload_3
     237: ifeq          322
     240: aload_0
     241: getfield      #37                 // Field emittedGroups:J
     244: aload_0
     245: invokevirtual #38                 // Method get:()J
     248: lcmp
     249: ifeq          302
     252: aload_0
     253: dup
     254: getfield      #37                 // Field emittedGroups:J
     257: lconst_1
     258: ladd
     259: putfield      #37                 // Field emittedGroups:J
     262: aload_0
     263: getfield      #10                 // Field downstream:Lorg/reactivestreams/Subscriber;
     266: aload         5
     268: invokeinterface #39,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
     273: aload         5
     275: getfield      #44                 // Field io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupedUnicast.state:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$State;
     278: invokevirtual #45                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$State.tryAbandon:()Z
     281: ifeq          322
     284: aload_0
     285: aload_2
     286: invokevirtual #46                 // Method cancel:(Ljava/lang/Object;)V
     289: aload         5
     291: invokevirtual #47                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupedUnicast.onComplete:()V
     294: aload_0
     295: lconst_1
     296: invokevirtual #48                 // Method requestGroup:(J)V
     299: goto          322
     302: aload_0
     303: getfield      #18                 // Field upstream:Lorg/reactivestreams/Subscription;
     306: invokeinterface #26,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
     311: aload_0
     312: aload_0
     313: getfield      #37                 // Field emittedGroups:J
     316: invokestatic  #40                 // Method groupHangWarning:(J)Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;
     319: invokevirtual #27                 // Method onError:(Ljava/lang/Throwable;)V
     322: return
    Exception table:
       from    to  target type
           8    19    22   Class java/lang/Throwable
         128   145   148   Class java/lang/Throwable

  static io.reactivex.rxjava3.exceptions.MissingBackpressureException groupHangWarning(long);
    Code:
       0: new           #49                 // class io/reactivex/rxjava3/exceptions/MissingBackpressureException
       3: dup
       4: new           #50                 // class java/lang/StringBuilder
       7: dup
       8: invokespecial #51                 // Method java/lang/StringBuilder."<init>":()V
      11: ldc           #52                 // String Unable to emit a new group (#
      13: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      16: lload_0
      17: invokevirtual #54                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      20: ldc           #55                 // String ) due to lack of requests. Please make sure the downstream can always accept a new group as well as each group is consumed in order for the whole operator to be able to proceed.
      22: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      25: invokevirtual #56                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      28: invokespecial #57                 // Method io/reactivex/rxjava3/exceptions/MissingBackpressureException."<init>":(Ljava/lang/String;)V
      31: areturn

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #22                 // Field done:Z
       4: ifeq          12
       7: aload_1
       8: invokestatic  #58                 // Method io/reactivex/rxjava3/plugins/RxJavaPlugins.onError:(Ljava/lang/Throwable;)V
      11: return
      12: aload_0
      13: iconst_1
      14: putfield      #22                 // Field done:Z
      17: aload_0
      18: getfield      #16                 // Field groups:Ljava/util/Map;
      21: invokeinterface #59,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      26: invokeinterface #60,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      31: astore_2
      32: aload_2
      33: invokeinterface #61,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      38: ifeq          59
      41: aload_2
      42: invokeinterface #62,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      47: checkcast     #30                 // class io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupedUnicast
      50: astore_3
      51: aload_3
      52: aload_1
      53: invokevirtual #63                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupedUnicast.onError:(Ljava/lang/Throwable;)V
      56: goto          32
      59: aload_0
      60: getfield      #16                 // Field groups:Ljava/util/Map;
      63: invokeinterface #64,  1           // InterfaceMethod java/util/Map.clear:()V
      68: aload_0
      69: invokespecial #43                 // Method completeEvictions:()V
      72: aload_0
      73: getfield      #10                 // Field downstream:Lorg/reactivestreams/Subscriber;
      76: aload_1
      77: invokeinterface #65,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      82: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #22                 // Field done:Z
       4: ifne          75
       7: aload_0
       8: getfield      #16                 // Field groups:Ljava/util/Map;
      11: invokeinterface #59,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      16: invokeinterface #60,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      21: astore_1
      22: aload_1
      23: invokeinterface #61,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      28: ifeq          48
      31: aload_1
      32: invokeinterface #62,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      37: checkcast     #30                 // class io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupedUnicast
      40: astore_2
      41: aload_2
      42: invokevirtual #47                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupedUnicast.onComplete:()V
      45: goto          22
      48: aload_0
      49: getfield      #16                 // Field groups:Ljava/util/Map;
      52: invokeinterface #64,  1           // InterfaceMethod java/util/Map.clear:()V
      57: aload_0
      58: invokespecial #43                 // Method completeEvictions:()V
      61: aload_0
      62: iconst_1
      63: putfield      #22                 // Field done:Z
      66: aload_0
      67: getfield      #10                 // Field downstream:Lorg/reactivestreams/Subscriber;
      70: invokeinterface #66,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      75: return

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #67                 // Method io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.validate:(J)Z
       4: ifeq          13
       7: aload_0
       8: lload_1
       9: invokestatic  #68                 // Method io/reactivex/rxjava3/internal/util/BackpressureHelper.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J
      12: pop2
      13: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #4                  // Field cancelled:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_0
       5: iconst_1
       6: invokevirtual #69                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
       9: ifeq          35
      12: aload_0
      13: invokespecial #43                 // Method completeEvictions:()V
      16: aload_0
      17: getfield      #7                  // Field groupCount:Ljava/util/concurrent/atomic/AtomicInteger;
      20: invokevirtual #70                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      23: ifne          35
      26: aload_0
      27: getfield      #18                 // Field upstream:Lorg/reactivestreams/Subscription;
      30: invokeinterface #26,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      35: return

  private void completeEvictions();
    Code:
       0: aload_0
       1: getfield      #17                 // Field evictedGroups:Ljava/util/Queue;
       4: ifnull        56
       7: iconst_0
       8: istore_1
       9: aload_0
      10: getfield      #17                 // Field evictedGroups:Ljava/util/Queue;
      13: invokeinterface #71,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      18: checkcast     #30                 // class io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupedUnicast
      21: dup
      22: astore_2
      23: ifnull        42
      26: aload_2
      27: getfield      #44                 // Field io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$GroupedUnicast.state:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$State;
      30: invokevirtual #72                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupBy$State.tryComplete:()Z
      33: ifeq          9
      36: iinc          1, 1
      39: goto          9
      42: iload_1
      43: ifeq          56
      46: aload_0
      47: getfield      #7                  // Field groupCount:Ljava/util/concurrent/atomic/AtomicInteger;
      50: iload_1
      51: ineg
      52: invokevirtual #73                 // Method java/util/concurrent/atomic/AtomicInteger.addAndGet:(I)I
      55: pop
      56: return

  public void cancel(K);
    Code:
       0: aload_1
       1: ifnull        8
       4: aload_1
       5: goto          11
       8: getstatic     #28                 // Field NULL_KEY:Ljava/lang/Object;
      11: astore_2
      12: aload_0
      13: getfield      #16                 // Field groups:Ljava/util/Map;
      16: aload_2
      17: invokeinterface #74,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      22: ifnull        44
      25: aload_0
      26: getfield      #7                  // Field groupCount:Ljava/util/concurrent/atomic/AtomicInteger;
      29: invokevirtual #70                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      32: ifne          44
      35: aload_0
      36: getfield      #18                 // Field upstream:Lorg/reactivestreams/Subscription;
      39: invokeinterface #26,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      44: return

  void requestGroup(long);
    Code:
       0: aload_0
       1: getfield      #9                  // Field groupConsumed:Ljava/util/concurrent/atomic/AtomicLong;
       4: astore_3
       5: aload_0
       6: getfield      #14                 // Field limit:I
       9: istore        4
      11: aload_3
      12: invokevirtual #75                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
      15: lstore        5
      17: lload         5
      19: lload_1
      20: invokestatic  #76                 // Method io/reactivex/rxjava3/internal/util/BackpressureHelper.addCap:(JJ)J
      23: lstore        7
      25: aload_3
      26: lload         5
      28: lload         7
      30: invokevirtual #77                 // Method java/util/concurrent/atomic/AtomicLong.compareAndSet:(JJ)Z
      33: ifeq          86
      36: lload         7
      38: iload         4
      40: i2l
      41: lcmp
      42: ifge          46
      45: return
      46: lload         7
      48: iload         4
      50: i2l
      51: lsub
      52: lstore        9
      54: aload_3
      55: lload         7
      57: lload         9
      59: invokevirtual #77                 // Method java/util/concurrent/atomic/AtomicLong.compareAndSet:(JJ)Z
      62: ifeq          77
      65: aload_0
      66: getfield      #18                 // Field upstream:Lorg/reactivestreams/Subscription;
      69: iload         4
      71: i2l
      72: invokeinterface #21,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      77: aload_3
      78: invokevirtual #75                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
      81: lstore        7
      83: goto          36
      86: goto          11

  static {};
    Code:
       0: new           #78                 // class java/lang/Object
       3: dup
       4: invokespecial #79                 // Method java/lang/Object."<init>":()V
       7: putstatic     #28                 // Field NULL_KEY:Ljava/lang/Object;
      10: return
}

Compiled from "FlowableSequenceEqual.java"
final class io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator<T> extends io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription<java.lang.Boolean> implements io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinatorHelper {
  private static final long serialVersionUID;

  final io.reactivex.rxjava3.functions.BiPredicate<? super T, ? super T> comparer;

  final io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber<T> first;

  final io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber<T> second;

  final io.reactivex.rxjava3.internal.util.AtomicThrowable errors;

  final java.util.concurrent.atomic.AtomicInteger wip;

  T v1;

  T v2;

  io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator(org.reactivestreams.Subscriber<? super java.lang.Boolean>, int, io.reactivex.rxjava3.functions.BiPredicate<? super T, ? super T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method io/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription."<init>":(Lorg/reactivestreams/Subscriber;)V
       5: aload_0
       6: aload_3
       7: putfield      #2                  // Field comparer:Lio/reactivex/rxjava3/functions/BiPredicate;
      10: aload_0
      11: new           #3                  // class java/util/concurrent/atomic/AtomicInteger
      14: dup
      15: invokespecial #4                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      18: putfield      #5                  // Field wip:Ljava/util/concurrent/atomic/AtomicInteger;
      21: aload_0
      22: new           #6                  // class io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber
      25: dup
      26: aload_0
      27: iload_2
      28: invokespecial #7                  // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber."<init>":(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinatorHelper;I)V
      31: putfield      #8                  // Field first:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
      34: aload_0
      35: new           #6                  // class io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber
      38: dup
      39: aload_0
      40: iload_2
      41: invokespecial #7                  // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber."<init>":(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinatorHelper;I)V
      44: putfield      #9                  // Field second:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
      47: aload_0
      48: new           #10                 // class io/reactivex/rxjava3/internal/util/AtomicThrowable
      51: dup
      52: invokespecial #11                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable."<init>":()V
      55: putfield      #12                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
      58: return

  void subscribe(org.reactivestreams.Publisher<? extends T>, org.reactivestreams.Publisher<? extends T>);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #8                  // Field first:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
       5: invokeinterface #13,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      10: aload_2
      11: aload_0
      12: getfield      #9                  // Field second:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
      15: invokeinterface #13,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      20: return

  public void cancel();
    Code:
       0: aload_0
       1: invokespecial #14                 // Method io/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription.cancel:()V
       4: aload_0
       5: getfield      #8                  // Field first:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
       8: invokevirtual #15                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.cancel:()V
      11: aload_0
      12: getfield      #9                  // Field second:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
      15: invokevirtual #15                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.cancel:()V
      18: aload_0
      19: getfield      #12                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
      22: invokevirtual #16                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.tryTerminateAndReport:()V
      25: aload_0
      26: getfield      #5                  // Field wip:Ljava/util/concurrent/atomic/AtomicInteger;
      29: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicInteger.getAndIncrement:()I
      32: ifne          49
      35: aload_0
      36: getfield      #8                  // Field first:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
      39: invokevirtual #18                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.clear:()V
      42: aload_0
      43: getfield      #9                  // Field second:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
      46: invokevirtual #18                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.clear:()V
      49: return

  void cancelAndClear();
    Code:
       0: aload_0
       1: getfield      #8                  // Field first:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
       4: invokevirtual #15                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.cancel:()V
       7: aload_0
       8: getfield      #8                  // Field first:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
      11: invokevirtual #18                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.clear:()V
      14: aload_0
      15: getfield      #9                  // Field second:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
      18: invokevirtual #15                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.cancel:()V
      21: aload_0
      22: getfield      #9                  // Field second:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
      25: invokevirtual #18                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.clear:()V
      28: return

  public void drain();
    Code:
       0: aload_0
       1: getfield      #5                  // Field wip:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicInteger.getAndIncrement:()I
       7: ifeq          11
      10: return
      11: iconst_1
      12: istore_1
      13: aload_0
      14: getfield      #8                  // Field first:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
      17: getfield      #19                 // Field io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.queue:Lio/reactivex/rxjava3/operators/SimpleQueue;
      20: astore_2
      21: aload_0
      22: getfield      #9                  // Field second:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
      25: getfield      #19                 // Field io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.queue:Lio/reactivex/rxjava3/operators/SimpleQueue;
      28: astore_3
      29: aload_2
      30: ifnull        424
      33: aload_3
      34: ifnull        424
      37: aload_0
      38: invokevirtual #20                 // Method isCancelled:()Z
      41: ifeq          59
      44: aload_0
      45: getfield      #8                  // Field first:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
      48: invokevirtual #18                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.clear:()V
      51: aload_0
      52: getfield      #9                  // Field second:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
      55: invokevirtual #18                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.clear:()V
      58: return
      59: aload_0
      60: getfield      #12                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
      63: invokevirtual #21                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.get:()Ljava/lang/Object;
      66: checkcast     #22                 // class java/lang/Throwable
      69: astore        4
      71: aload         4
      73: ifnull        92
      76: aload_0
      77: invokevirtual #23                 // Method cancelAndClear:()V
      80: aload_0
      81: getfield      #12                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
      84: aload_0
      85: getfield      #24                 // Field downstream:Lorg/reactivestreams/Subscriber;
      88: invokevirtual #25                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V
      91: return
      92: aload_0
      93: getfield      #8                  // Field first:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
      96: getfield      #26                 // Field io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.done:Z
      99: istore        5
     101: aload_0
     102: getfield      #27                 // Field v1:Ljava/lang/Object;
     105: astore        6
     107: aload         6
     109: ifnonnull     162
     112: aload_2
     113: invokeinterface #28,  1           // InterfaceMethod io/reactivex/rxjava3/operators/SimpleQueue.poll:()Ljava/lang/Object;
     118: astore        6
     120: goto          156
     123: astore        7
     125: aload         7
     127: invokestatic  #29                 // Method io/reactivex/rxjava3/exceptions/Exceptions.throwIfFatal:(Ljava/lang/Throwable;)V
     130: aload_0
     131: invokevirtual #23                 // Method cancelAndClear:()V
     134: aload_0
     135: getfield      #12                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
     138: aload         7
     140: invokevirtual #30                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z
     143: pop
     144: aload_0
     145: getfield      #12                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
     148: aload_0
     149: getfield      #24                 // Field downstream:Lorg/reactivestreams/Subscriber;
     152: invokevirtual #25                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V
     155: return
     156: aload_0
     157: aload         6
     159: putfield      #27                 // Field v1:Ljava/lang/Object;
     162: aload         6
     164: ifnonnull     171
     167: iconst_1
     168: goto          172
     171: iconst_0
     172: istore        7
     174: aload_0
     175: getfield      #9                  // Field second:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
     178: getfield      #26                 // Field io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.done:Z
     181: istore        8
     183: aload_0
     184: getfield      #31                 // Field v2:Ljava/lang/Object;
     187: astore        9
     189: aload         9
     191: ifnonnull     244
     194: aload_3
     195: invokeinterface #28,  1           // InterfaceMethod io/reactivex/rxjava3/operators/SimpleQueue.poll:()Ljava/lang/Object;
     200: astore        9
     202: goto          238
     205: astore        10
     207: aload         10
     209: invokestatic  #29                 // Method io/reactivex/rxjava3/exceptions/Exceptions.throwIfFatal:(Ljava/lang/Throwable;)V
     212: aload_0
     213: invokevirtual #23                 // Method cancelAndClear:()V
     216: aload_0
     217: getfield      #12                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
     220: aload         10
     222: invokevirtual #30                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z
     225: pop
     226: aload_0
     227: getfield      #12                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
     230: aload_0
     231: getfield      #24                 // Field downstream:Lorg/reactivestreams/Subscriber;
     234: invokevirtual #25                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V
     237: return
     238: aload_0
     239: aload         9
     241: putfield      #31                 // Field v2:Ljava/lang/Object;
     244: aload         9
     246: ifnonnull     253
     249: iconst_1
     250: goto          254
     253: iconst_0
     254: istore        10
     256: iload         5
     258: ifeq          285
     261: iload         8
     263: ifeq          285
     266: iload         7
     268: ifeq          285
     271: iload         10
     273: ifeq          285
     276: aload_0
     277: iconst_1
     278: invokestatic  #32                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     281: invokevirtual #33                 // Method complete:(Ljava/lang/Object;)V
     284: return
     285: iload         5
     287: ifeq          315
     290: iload         8
     292: ifeq          315
     295: iload         7
     297: iload         10
     299: if_icmpeq     315
     302: aload_0
     303: invokevirtual #23                 // Method cancelAndClear:()V
     306: aload_0
     307: iconst_0
     308: invokestatic  #32                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     311: invokevirtual #33                 // Method complete:(Ljava/lang/Object;)V
     314: return
     315: iload         7
     317: ifne          479
     320: iload         10
     322: ifeq          328
     325: goto          479
     328: aload_0
     329: getfield      #2                  // Field comparer:Lio/reactivex/rxjava3/functions/BiPredicate;
     332: aload         6
     334: aload         9
     336: invokeinterface #34,  3           // InterfaceMethod io/reactivex/rxjava3/functions/BiPredicate.test:(Ljava/lang/Object;Ljava/lang/Object;)Z
     341: istore        11
     343: goto          379
     346: astore        12
     348: aload         12
     350: invokestatic  #29                 // Method io/reactivex/rxjava3/exceptions/Exceptions.throwIfFatal:(Ljava/lang/Throwable;)V
     353: aload_0
     354: invokevirtual #23                 // Method cancelAndClear:()V
     357: aload_0
     358: getfield      #12                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
     361: aload         12
     363: invokevirtual #30                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z
     366: pop
     367: aload_0
     368: getfield      #12                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
     371: aload_0
     372: getfield      #24                 // Field downstream:Lorg/reactivestreams/Subscriber;
     375: invokevirtual #25                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V
     378: return
     379: iload         11
     381: ifne          397
     384: aload_0
     385: invokevirtual #23                 // Method cancelAndClear:()V
     388: aload_0
     389: iconst_0
     390: invokestatic  #32                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     393: invokevirtual #33                 // Method complete:(Ljava/lang/Object;)V
     396: return
     397: aload_0
     398: aconst_null
     399: putfield      #27                 // Field v1:Ljava/lang/Object;
     402: aload_0
     403: aconst_null
     404: putfield      #31                 // Field v2:Ljava/lang/Object;
     407: aload_0
     408: getfield      #8                  // Field first:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
     411: invokevirtual #35                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.request:()V
     414: aload_0
     415: getfield      #9                  // Field second:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
     418: invokevirtual #35                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.request:()V
     421: goto          37
     424: aload_0
     425: invokevirtual #20                 // Method isCancelled:()Z
     428: ifeq          446
     431: aload_0
     432: getfield      #8                  // Field first:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
     435: invokevirtual #18                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.clear:()V
     438: aload_0
     439: getfield      #9                  // Field second:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
     442: invokevirtual #18                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.clear:()V
     445: return
     446: aload_0
     447: getfield      #12                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
     450: invokevirtual #21                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.get:()Ljava/lang/Object;
     453: checkcast     #22                 // class java/lang/Throwable
     456: astore        4
     458: aload         4
     460: ifnull        479
     463: aload_0
     464: invokevirtual #23                 // Method cancelAndClear:()V
     467: aload_0
     468: getfield      #12                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
     471: aload_0
     472: getfield      #24                 // Field downstream:Lorg/reactivestreams/Subscriber;
     475: invokevirtual #25                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V
     478: return
     479: aload_0
     480: getfield      #5                  // Field wip:Ljava/util/concurrent/atomic/AtomicInteger;
     483: iload_1
     484: ineg
     485: invokevirtual #36                 // Method java/util/concurrent/atomic/AtomicInteger.addAndGet:(I)I
     488: istore_1
     489: iload_1
     490: ifne          496
     493: goto          499
     496: goto          13
     499: return
    Exception table:
       from    to  target type
         112   120   123   Class java/lang/Throwable
         194   202   205   Class java/lang/Throwable
         328   343   346   Class java/lang/Throwable

  public void innerError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #12                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
       4: aload_1
       5: invokevirtual #30                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z
       8: ifeq          15
      11: aload_0
      12: invokevirtual #37                 // Method drain:()V
      15: return
}

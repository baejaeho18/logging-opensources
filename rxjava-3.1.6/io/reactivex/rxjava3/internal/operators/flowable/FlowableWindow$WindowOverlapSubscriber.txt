Compiled from "FlowableWindow.java"
final class io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.core.FlowableSubscriber<T>, org.reactivestreams.Subscription, java.lang.Runnable {
  private static final long serialVersionUID;

  final org.reactivestreams.Subscriber<? super io.reactivex.rxjava3.core.Flowable<T>> downstream;

  final io.reactivex.rxjava3.operators.SpscLinkedArrayQueue<io.reactivex.rxjava3.processors.UnicastProcessor<T>> queue;

  final long size;

  final long skip;

  final java.util.ArrayDeque<io.reactivex.rxjava3.processors.UnicastProcessor<T>> windows;

  final java.util.concurrent.atomic.AtomicBoolean once;

  final java.util.concurrent.atomic.AtomicBoolean firstRequest;

  final java.util.concurrent.atomic.AtomicLong requested;

  final java.util.concurrent.atomic.AtomicInteger wip;

  final int bufferSize;

  long index;

  long produced;

  org.reactivestreams.Subscription upstream;

  volatile boolean done;

  java.lang.Throwable error;

  volatile boolean cancelled;

  io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$WindowOverlapSubscriber(org.reactivestreams.Subscriber<? super io.reactivex.rxjava3.core.Flowable<T>>, long, long, int);
    Code:
       0: aload_0
       1: iconst_1
       2: invokespecial #1                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
       5: aload_0
       6: aload_1
       7: putfield      #2                  // Field downstream:Lorg/reactivestreams/Subscriber;
      10: aload_0
      11: lload_2
      12: putfield      #3                  // Field size:J
      15: aload_0
      16: lload         4
      18: putfield      #4                  // Field skip:J
      21: aload_0
      22: new           #5                  // class io/reactivex/rxjava3/operators/SpscLinkedArrayQueue
      25: dup
      26: iload         6
      28: invokespecial #6                  // Method io/reactivex/rxjava3/operators/SpscLinkedArrayQueue."<init>":(I)V
      31: putfield      #7                  // Field queue:Lio/reactivex/rxjava3/operators/SpscLinkedArrayQueue;
      34: aload_0
      35: new           #8                  // class java/util/ArrayDeque
      38: dup
      39: invokespecial #9                  // Method java/util/ArrayDeque."<init>":()V
      42: putfield      #10                 // Field windows:Ljava/util/ArrayDeque;
      45: aload_0
      46: new           #11                 // class java/util/concurrent/atomic/AtomicBoolean
      49: dup
      50: invokespecial #12                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      53: putfield      #13                 // Field once:Ljava/util/concurrent/atomic/AtomicBoolean;
      56: aload_0
      57: new           #11                 // class java/util/concurrent/atomic/AtomicBoolean
      60: dup
      61: invokespecial #12                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      64: putfield      #14                 // Field firstRequest:Ljava/util/concurrent/atomic/AtomicBoolean;
      67: aload_0
      68: new           #15                 // class java/util/concurrent/atomic/AtomicLong
      71: dup
      72: invokespecial #16                 // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
      75: putfield      #17                 // Field requested:Ljava/util/concurrent/atomic/AtomicLong;
      78: aload_0
      79: new           #18                 // class java/util/concurrent/atomic/AtomicInteger
      82: dup
      83: invokespecial #19                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      86: putfield      #20                 // Field wip:Ljava/util/concurrent/atomic/AtomicInteger;
      89: aload_0
      90: iload         6
      92: putfield      #21                 // Field bufferSize:I
      95: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #22                 // Field upstream:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #23                 // Method io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          26
      11: aload_0
      12: aload_1
      13: putfield      #22                 // Field upstream:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: getfield      #2                  // Field downstream:Lorg/reactivestreams/Subscriber;
      20: aload_0
      21: invokeinterface #24,  2           // InterfaceMethod org/reactivestreams/Subscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      26: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #25                 // Field index:J
       4: lstore_2
       5: aconst_null
       6: astore        4
       8: lload_2
       9: lconst_0
      10: lcmp
      11: ifne          46
      14: aload_0
      15: getfield      #26                 // Field cancelled:Z
      18: ifne          46
      21: aload_0
      22: invokevirtual #27                 // Method getAndIncrement:()I
      25: pop
      26: aload_0
      27: getfield      #21                 // Field bufferSize:I
      30: aload_0
      31: invokestatic  #28                 // Method io/reactivex/rxjava3/processors/UnicastProcessor.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/processors/UnicastProcessor;
      34: astore        4
      36: aload_0
      37: getfield      #10                 // Field windows:Ljava/util/ArrayDeque;
      40: aload         4
      42: invokevirtual #29                 // Method java/util/ArrayDeque.offer:(Ljava/lang/Object;)Z
      45: pop
      46: lload_2
      47: lconst_1
      48: ladd
      49: lstore_2
      50: aload_0
      51: getfield      #10                 // Field windows:Ljava/util/ArrayDeque;
      54: invokevirtual #30                 // Method java/util/ArrayDeque.iterator:()Ljava/util/Iterator;
      57: astore        5
      59: aload         5
      61: invokeinterface #31,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      66: ifeq          92
      69: aload         5
      71: invokeinterface #32,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      76: checkcast     #33                 // class org/reactivestreams/Processor
      79: astore        6
      81: aload         6
      83: aload_1
      84: invokeinterface #34,  2           // InterfaceMethod org/reactivestreams/Processor.onNext:(Ljava/lang/Object;)V
      89: goto          59
      92: aload         4
      94: ifnull        111
      97: aload_0
      98: getfield      #7                  // Field queue:Lio/reactivex/rxjava3/operators/SpscLinkedArrayQueue;
     101: aload         4
     103: invokevirtual #35                 // Method io/reactivex/rxjava3/operators/SpscLinkedArrayQueue.offer:(Ljava/lang/Object;)Z
     106: pop
     107: aload_0
     108: invokevirtual #36                 // Method drain:()V
     111: aload_0
     112: getfield      #37                 // Field produced:J
     115: lconst_1
     116: ladd
     117: lstore        5
     119: lload         5
     121: aload_0
     122: getfield      #3                  // Field size:J
     125: lcmp
     126: ifne          167
     129: aload_0
     130: lload         5
     132: aload_0
     133: getfield      #4                  // Field skip:J
     136: lsub
     137: putfield      #37                 // Field produced:J
     140: aload_0
     141: getfield      #10                 // Field windows:Ljava/util/ArrayDeque;
     144: invokevirtual #38                 // Method java/util/ArrayDeque.poll:()Ljava/lang/Object;
     147: checkcast     #33                 // class org/reactivestreams/Processor
     150: astore        7
     152: aload         7
     154: ifnull        164
     157: aload         7
     159: invokeinterface #39,  1           // InterfaceMethod org/reactivestreams/Processor.onComplete:()V
     164: goto          173
     167: aload_0
     168: lload         5
     170: putfield      #37                 // Field produced:J
     173: lload_2
     174: aload_0
     175: getfield      #4                  // Field skip:J
     178: lcmp
     179: ifne          190
     182: aload_0
     183: lconst_0
     184: putfield      #25                 // Field index:J
     187: goto          195
     190: aload_0
     191: lload_2
     192: putfield      #25                 // Field index:J
     195: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #10                 // Field windows:Ljava/util/ArrayDeque;
       4: invokevirtual #30                 // Method java/util/ArrayDeque.iterator:()Ljava/util/Iterator;
       7: astore_2
       8: aload_2
       9: invokeinterface #31,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      14: ifeq          37
      17: aload_2
      18: invokeinterface #32,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      23: checkcast     #33                 // class org/reactivestreams/Processor
      26: astore_3
      27: aload_3
      28: aload_1
      29: invokeinterface #40,  2           // InterfaceMethod org/reactivestreams/Processor.onError:(Ljava/lang/Throwable;)V
      34: goto          8
      37: aload_0
      38: getfield      #10                 // Field windows:Ljava/util/ArrayDeque;
      41: invokevirtual #41                 // Method java/util/ArrayDeque.clear:()V
      44: aload_0
      45: aload_1
      46: putfield      #42                 // Field error:Ljava/lang/Throwable;
      49: aload_0
      50: iconst_1
      51: putfield      #43                 // Field done:Z
      54: aload_0
      55: invokevirtual #36                 // Method drain:()V
      58: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #10                 // Field windows:Ljava/util/ArrayDeque;
       4: invokevirtual #30                 // Method java/util/ArrayDeque.iterator:()Ljava/util/Iterator;
       7: astore_1
       8: aload_1
       9: invokeinterface #31,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      14: ifeq          36
      17: aload_1
      18: invokeinterface #32,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      23: checkcast     #33                 // class org/reactivestreams/Processor
      26: astore_2
      27: aload_2
      28: invokeinterface #39,  1           // InterfaceMethod org/reactivestreams/Processor.onComplete:()V
      33: goto          8
      36: aload_0
      37: getfield      #10                 // Field windows:Ljava/util/ArrayDeque;
      40: invokevirtual #41                 // Method java/util/ArrayDeque.clear:()V
      43: aload_0
      44: iconst_1
      45: putfield      #43                 // Field done:Z
      48: aload_0
      49: invokevirtual #36                 // Method drain:()V
      52: return

  void drain();
    Code:
       0: aload_0
       1: getfield      #20                 // Field wip:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicInteger.getAndIncrement:()I
       7: ifeq          11
      10: return
      11: aload_0
      12: getfield      #2                  // Field downstream:Lorg/reactivestreams/Subscriber;
      15: astore_1
      16: aload_0
      17: getfield      #7                  // Field queue:Lio/reactivex/rxjava3/operators/SpscLinkedArrayQueue;
      20: astore_2
      21: iconst_1
      22: istore_3
      23: aload_0
      24: getfield      #26                 // Field cancelled:Z
      27: ifeq          57
      30: aconst_null
      31: astore        4
      33: aload_2
      34: invokevirtual #45                 // Method io/reactivex/rxjava3/operators/SpscLinkedArrayQueue.poll:()Ljava/lang/Object;
      37: checkcast     #46                 // class io/reactivex/rxjava3/processors/UnicastProcessor
      40: dup
      41: astore        4
      43: ifnull        54
      46: aload         4
      48: invokevirtual #47                 // Method io/reactivex/rxjava3/processors/UnicastProcessor.onComplete:()V
      51: goto          33
      54: goto          240
      57: aload_0
      58: getfield      #17                 // Field requested:Ljava/util/concurrent/atomic/AtomicLong;
      61: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
      64: lstore        4
      66: lconst_0
      67: lstore        6
      69: lload         6
      71: lload         4
      73: lcmp
      74: ifeq          177
      77: aload_0
      78: getfield      #43                 // Field done:Z
      81: istore        8
      83: aload_2
      84: invokevirtual #45                 // Method io/reactivex/rxjava3/operators/SpscLinkedArrayQueue.poll:()Ljava/lang/Object;
      87: checkcast     #46                 // class io/reactivex/rxjava3/processors/UnicastProcessor
      90: astore        9
      92: aload         9
      94: ifnonnull     101
      97: iconst_1
      98: goto          102
     101: iconst_0
     102: istore        10
     104: aload_0
     105: getfield      #26                 // Field cancelled:Z
     108: ifeq          114
     111: goto          23
     114: aload_0
     115: iload         8
     117: iload         10
     119: aload_1
     120: aload_2
     121: invokevirtual #49                 // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/operators/SpscLinkedArrayQueue;)Z
     124: ifeq          128
     127: return
     128: iload         10
     130: ifeq          136
     133: goto          177
     136: new           #50                 // class io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowSubscribeIntercept
     139: dup
     140: aload         9
     142: invokespecial #51                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowSubscribeIntercept."<init>":(Lio/reactivex/rxjava3/processors/FlowableProcessor;)V
     145: astore        11
     147: aload_1
     148: aload         11
     150: invokeinterface #52,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
     155: aload         11
     157: invokevirtual #53                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowSubscribeIntercept.tryAbandon:()Z
     160: ifeq          168
     163: aload         9
     165: invokevirtual #47                 // Method io/reactivex/rxjava3/processors/UnicastProcessor.onComplete:()V
     168: lload         6
     170: lconst_1
     171: ladd
     172: lstore        6
     174: goto          69
     177: lload         6
     179: lload         4
     181: lcmp
     182: ifne          213
     185: aload_0
     186: getfield      #26                 // Field cancelled:Z
     189: ifeq          195
     192: goto          23
     195: aload_0
     196: aload_0
     197: getfield      #43                 // Field done:Z
     200: aload_2
     201: invokevirtual #54                 // Method io/reactivex/rxjava3/operators/SpscLinkedArrayQueue.isEmpty:()Z
     204: aload_1
     205: aload_2
     206: invokevirtual #49                 // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/operators/SpscLinkedArrayQueue;)Z
     209: ifeq          213
     212: return
     213: lload         6
     215: lconst_0
     216: lcmp
     217: ifeq          240
     220: lload         4
     222: ldc2_w        #56                 // long 9223372036854775807l
     225: lcmp
     226: ifeq          240
     229: aload_0
     230: getfield      #17                 // Field requested:Ljava/util/concurrent/atomic/AtomicLong;
     233: lload         6
     235: lneg
     236: invokevirtual #58                 // Method java/util/concurrent/atomic/AtomicLong.addAndGet:(J)J
     239: pop2
     240: aload_0
     241: getfield      #20                 // Field wip:Ljava/util/concurrent/atomic/AtomicInteger;
     244: iload_3
     245: ineg
     246: invokevirtual #59                 // Method java/util/concurrent/atomic/AtomicInteger.addAndGet:(I)I
     249: istore_3
     250: iload_3
     251: ifne          23
     254: goto          257
     257: return

  boolean checkTerminated(boolean, boolean, org.reactivestreams.Subscriber<?>, io.reactivex.rxjava3.operators.SpscLinkedArrayQueue<?>);
    Code:
       0: iload_1
       1: ifeq          42
       4: aload_0
       5: getfield      #42                 // Field error:Ljava/lang/Throwable;
       8: astore        5
      10: aload         5
      12: ifnull        30
      15: aload         4
      17: invokevirtual #60                 // Method io/reactivex/rxjava3/operators/SpscLinkedArrayQueue.clear:()V
      20: aload_3
      21: aload         5
      23: invokeinterface #61,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      28: iconst_1
      29: ireturn
      30: iload_2
      31: ifeq          42
      34: aload_3
      35: invokeinterface #62,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      40: iconst_1
      41: ireturn
      42: iconst_0
      43: ireturn

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #63                 // Method io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.validate:(J)Z
       4: ifeq          96
       7: aload_0
       8: getfield      #17                 // Field requested:Ljava/util/concurrent/atomic/AtomicLong;
      11: lload_1
      12: invokestatic  #64                 // Method io/reactivex/rxjava3/internal/util/BackpressureHelper.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J
      15: pop2
      16: aload_0
      17: getfield      #14                 // Field firstRequest:Ljava/util/concurrent/atomic/AtomicBoolean;
      20: invokevirtual #65                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      23: ifne          73
      26: aload_0
      27: getfield      #14                 // Field firstRequest:Ljava/util/concurrent/atomic/AtomicBoolean;
      30: iconst_0
      31: iconst_1
      32: invokevirtual #66                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
      35: ifeq          73
      38: aload_0
      39: getfield      #4                  // Field skip:J
      42: lload_1
      43: lconst_1
      44: lsub
      45: invokestatic  #67                 // Method io/reactivex/rxjava3/internal/util/BackpressureHelper.multiplyCap:(JJ)J
      48: lstore_3
      49: aload_0
      50: getfield      #3                  // Field size:J
      53: lload_3
      54: invokestatic  #68                 // Method io/reactivex/rxjava3/internal/util/BackpressureHelper.addCap:(JJ)J
      57: lstore        5
      59: aload_0
      60: getfield      #22                 // Field upstream:Lorg/reactivestreams/Subscription;
      63: lload         5
      65: invokeinterface #69,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      70: goto          92
      73: aload_0
      74: getfield      #4                  // Field skip:J
      77: lload_1
      78: invokestatic  #67                 // Method io/reactivex/rxjava3/internal/util/BackpressureHelper.multiplyCap:(JJ)J
      81: lstore_3
      82: aload_0
      83: getfield      #22                 // Field upstream:Lorg/reactivestreams/Subscription;
      86: lload_3
      87: invokeinterface #69,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      92: aload_0
      93: invokevirtual #36                 // Method drain:()V
      96: return

  public void cancel();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #26                 // Field cancelled:Z
       5: aload_0
       6: getfield      #13                 // Field once:Ljava/util/concurrent/atomic/AtomicBoolean;
       9: iconst_0
      10: iconst_1
      11: invokevirtual #66                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
      14: ifeq          21
      17: aload_0
      18: invokevirtual #70                 // Method run:()V
      21: aload_0
      22: invokevirtual #36                 // Method drain:()V
      25: return

  public void run();
    Code:
       0: aload_0
       1: invokevirtual #71                 // Method decrementAndGet:()I
       4: ifne          16
       7: aload_0
       8: getfield      #22                 // Field upstream:Lorg/reactivestreams/Subscription;
      11: invokeinterface #72,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      16: return
}

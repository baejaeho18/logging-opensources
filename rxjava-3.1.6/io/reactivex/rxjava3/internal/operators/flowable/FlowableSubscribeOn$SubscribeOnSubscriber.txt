Compiled from "FlowableSubscribeOn.java"
final class io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<java.lang.Thread> implements io.reactivex.rxjava3.core.FlowableSubscriber<T>, org.reactivestreams.Subscription, java.lang.Runnable {
  private static final long serialVersionUID;

  final org.reactivestreams.Subscriber<? super T> downstream;

  final io.reactivex.rxjava3.core.Scheduler$Worker worker;

  final java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> upstream;

  final java.util.concurrent.atomic.AtomicLong requested;

  final boolean nonScheduledRequests;

  org.reactivestreams.Publisher<T> source;

  io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber(org.reactivestreams.Subscriber<? super T>, io.reactivex.rxjava3.core.Scheduler$Worker, org.reactivestreams.Publisher<T>, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field downstream:Lorg/reactivestreams/Subscriber;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field worker:Lio/reactivex/rxjava3/core/Scheduler$Worker;
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field source:Lorg/reactivestreams/Publisher;
      19: aload_0
      20: new           #5                  // class java/util/concurrent/atomic/AtomicReference
      23: dup
      24: invokespecial #1                  // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      27: putfield      #6                  // Field upstream:Ljava/util/concurrent/atomic/AtomicReference;
      30: aload_0
      31: new           #7                  // class java/util/concurrent/atomic/AtomicLong
      34: dup
      35: invokespecial #8                  // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
      38: putfield      #9                  // Field requested:Ljava/util/concurrent/atomic/AtomicLong;
      41: aload_0
      42: iload         4
      44: ifne          51
      47: iconst_1
      48: goto          52
      51: iconst_0
      52: putfield      #10                 // Field nonScheduledRequests:Z
      55: return

  public void run();
    Code:
       0: aload_0
       1: invokestatic  #11                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       4: invokevirtual #12                 // Method lazySet:(Ljava/lang/Object;)V
       7: aload_0
       8: getfield      #4                  // Field source:Lorg/reactivestreams/Publisher;
      11: astore_1
      12: aload_0
      13: aconst_null
      14: putfield      #4                  // Field source:Lorg/reactivestreams/Publisher;
      17: aload_1
      18: aload_0
      19: invokeinterface #13,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      24: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #6                  // Field upstream:Ljava/util/concurrent/atomic/AtomicReference;
       4: aload_1
       5: invokestatic  #14                 // Method io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          32
      11: aload_0
      12: getfield      #9                  // Field requested:Ljava/util/concurrent/atomic/AtomicLong;
      15: lconst_0
      16: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicLong.getAndSet:(J)J
      19: lstore_2
      20: lload_2
      21: lconst_0
      22: lcmp
      23: ifeq          32
      26: aload_0
      27: lload_2
      28: aload_1
      29: invokevirtual #16                 // Method requestUpstream:(JLorg/reactivestreams/Subscription;)V
      32: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #2                  // Field downstream:Lorg/reactivestreams/Subscriber;
       4: aload_1
       5: invokeinterface #17,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
      10: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #2                  // Field downstream:Lorg/reactivestreams/Subscriber;
       4: aload_1
       5: invokeinterface #18,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      10: aload_0
      11: getfield      #3                  // Field worker:Lio/reactivex/rxjava3/core/Scheduler$Worker;
      14: invokevirtual #19                 // Method io/reactivex/rxjava3/core/Scheduler$Worker.dispose:()V
      17: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #2                  // Field downstream:Lorg/reactivestreams/Subscriber;
       4: invokeinterface #20,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
       9: aload_0
      10: getfield      #3                  // Field worker:Lio/reactivex/rxjava3/core/Scheduler$Worker;
      13: invokevirtual #19                 // Method io/reactivex/rxjava3/core/Scheduler$Worker.dispose:()V
      16: return

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #21                 // Method io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.validate:(J)Z
       4: ifeq          79
       7: aload_0
       8: getfield      #6                  // Field upstream:Ljava/util/concurrent/atomic/AtomicReference;
      11: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      14: checkcast     #23                 // class org/reactivestreams/Subscription
      17: astore_3
      18: aload_3
      19: ifnull        31
      22: aload_0
      23: lload_1
      24: aload_3
      25: invokevirtual #16                 // Method requestUpstream:(JLorg/reactivestreams/Subscription;)V
      28: goto          79
      31: aload_0
      32: getfield      #9                  // Field requested:Ljava/util/concurrent/atomic/AtomicLong;
      35: lload_1
      36: invokestatic  #24                 // Method io/reactivex/rxjava3/internal/util/BackpressureHelper.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J
      39: pop2
      40: aload_0
      41: getfield      #6                  // Field upstream:Ljava/util/concurrent/atomic/AtomicReference;
      44: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      47: checkcast     #23                 // class org/reactivestreams/Subscription
      50: astore_3
      51: aload_3
      52: ifnull        79
      55: aload_0
      56: getfield      #9                  // Field requested:Ljava/util/concurrent/atomic/AtomicLong;
      59: lconst_0
      60: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicLong.getAndSet:(J)J
      63: lstore        4
      65: lload         4
      67: lconst_0
      68: lcmp
      69: ifeq          79
      72: aload_0
      73: lload         4
      75: aload_3
      76: invokevirtual #16                 // Method requestUpstream:(JLorg/reactivestreams/Subscription;)V
      79: return

  void requestUpstream(long, org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #10                 // Field nonScheduledRequests:Z
       4: ifne          17
       7: invokestatic  #11                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      10: aload_0
      11: invokevirtual #25                 // Method get:()Ljava/lang/Object;
      14: if_acmpne     27
      17: aload_3
      18: lload_1
      19: invokeinterface #26,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      24: goto          44
      27: aload_0
      28: getfield      #3                  // Field worker:Lio/reactivex/rxjava3/core/Scheduler$Worker;
      31: new           #27                 // class io/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOn$SubscribeOnSubscriber$Request
      34: dup
      35: aload_3
      36: lload_1
      37: invokespecial #28                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOn$SubscribeOnSubscriber$Request."<init>":(Lorg/reactivestreams/Subscription;J)V
      40: invokevirtual #29                 // Method io/reactivex/rxjava3/core/Scheduler$Worker.schedule:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;
      43: pop
      44: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #6                  // Field upstream:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokestatic  #30                 // Method io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z
       7: pop
       8: aload_0
       9: getfield      #3                  // Field worker:Lio/reactivex/rxjava3/core/Scheduler$Worker;
      12: invokevirtual #19                 // Method io/reactivex/rxjava3/core/Scheduler$Worker.dispose:()V
      15: return
}

Compiled from "FlowableFlatMapMaybe.java"
final class io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber<T, R> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.core.FlowableSubscriber<T>, org.reactivestreams.Subscription {
  private static final long serialVersionUID;

  final org.reactivestreams.Subscriber<? super R> downstream;

  final boolean delayErrors;

  final int maxConcurrency;

  final java.util.concurrent.atomic.AtomicLong requested;

  final io.reactivex.rxjava3.disposables.CompositeDisposable set;

  final java.util.concurrent.atomic.AtomicInteger active;

  final io.reactivex.rxjava3.internal.util.AtomicThrowable errors;

  final io.reactivex.rxjava3.functions.Function<? super T, ? extends io.reactivex.rxjava3.core.MaybeSource<? extends R>> mapper;

  final java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.operators.SpscLinkedArrayQueue<R>> queue;

  org.reactivestreams.Subscription upstream;

  volatile boolean cancelled;

  io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber(org.reactivestreams.Subscriber<? super R>, io.reactivex.rxjava3.functions.Function<? super T, ? extends io.reactivex.rxjava3.core.MaybeSource<? extends R>>, boolean, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field downstream:Lorg/reactivestreams/Subscriber;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field mapper:Lio/reactivex/rxjava3/functions/Function;
      14: aload_0
      15: iload_3
      16: putfield      #4                  // Field delayErrors:Z
      19: aload_0
      20: iload         4
      22: putfield      #5                  // Field maxConcurrency:I
      25: aload_0
      26: new           #6                  // class java/util/concurrent/atomic/AtomicLong
      29: dup
      30: invokespecial #7                  // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
      33: putfield      #8                  // Field requested:Ljava/util/concurrent/atomic/AtomicLong;
      36: aload_0
      37: new           #9                  // class io/reactivex/rxjava3/disposables/CompositeDisposable
      40: dup
      41: invokespecial #10                 // Method io/reactivex/rxjava3/disposables/CompositeDisposable."<init>":()V
      44: putfield      #11                 // Field set:Lio/reactivex/rxjava3/disposables/CompositeDisposable;
      47: aload_0
      48: new           #12                 // class io/reactivex/rxjava3/internal/util/AtomicThrowable
      51: dup
      52: invokespecial #13                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable."<init>":()V
      55: putfield      #14                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
      58: aload_0
      59: new           #15                 // class java/util/concurrent/atomic/AtomicInteger
      62: dup
      63: iconst_1
      64: invokespecial #16                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      67: putfield      #17                 // Field active:Ljava/util/concurrent/atomic/AtomicInteger;
      70: aload_0
      71: new           #18                 // class java/util/concurrent/atomic/AtomicReference
      74: dup
      75: invokespecial #19                 // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      78: putfield      #20                 // Field queue:Ljava/util/concurrent/atomic/AtomicReference;
      81: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #21                 // Field upstream:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #22                 // Method io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          60
      11: aload_0
      12: aload_1
      13: putfield      #21                 // Field upstream:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: getfield      #2                  // Field downstream:Lorg/reactivestreams/Subscriber;
      20: aload_0
      21: invokeinterface #23,  2           // InterfaceMethod org/reactivestreams/Subscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      26: aload_0
      27: getfield      #5                  // Field maxConcurrency:I
      30: istore_2
      31: iload_2
      32: ldc           #25                 // int 2147483647
      34: if_icmpne     49
      37: aload_1
      38: ldc2_w        #27                 // long 9223372036854775807l
      41: invokeinterface #29,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      46: goto          60
      49: aload_1
      50: aload_0
      51: getfield      #5                  // Field maxConcurrency:I
      54: i2l
      55: invokeinterface #29,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      60: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #3                  // Field mapper:Lio/reactivex/rxjava3/functions/Function;
       4: aload_1
       5: invokeinterface #30,  2           // InterfaceMethod io/reactivex/rxjava3/functions/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      10: ldc           #31                 // String The mapper returned a null MaybeSource
      12: invokestatic  #32                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      15: checkcast     #33                 // class io/reactivex/rxjava3/core/MaybeSource
      18: astore_2
      19: goto          42
      22: astore_3
      23: aload_3
      24: invokestatic  #35                 // Method io/reactivex/rxjava3/exceptions/Exceptions.throwIfFatal:(Ljava/lang/Throwable;)V
      27: aload_0
      28: getfield      #21                 // Field upstream:Lorg/reactivestreams/Subscription;
      31: invokeinterface #36,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      36: aload_0
      37: aload_3
      38: invokevirtual #37                 // Method onError:(Ljava/lang/Throwable;)V
      41: return
      42: aload_0
      43: getfield      #17                 // Field active:Ljava/util/concurrent/atomic/AtomicInteger;
      46: invokevirtual #38                 // Method java/util/concurrent/atomic/AtomicInteger.getAndIncrement:()I
      49: pop
      50: new           #39                 // class io/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver
      53: dup
      54: aload_0
      55: invokespecial #40                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver."<init>":(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;)V
      58: astore_3
      59: aload_0
      60: getfield      #41                 // Field cancelled:Z
      63: ifne          84
      66: aload_0
      67: getfield      #11                 // Field set:Lio/reactivex/rxjava3/disposables/CompositeDisposable;
      70: aload_3
      71: invokevirtual #42                 // Method io/reactivex/rxjava3/disposables/CompositeDisposable.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z
      74: ifeq          84
      77: aload_2
      78: aload_3
      79: invokeinterface #43,  2           // InterfaceMethod io/reactivex/rxjava3/core/MaybeSource.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V
      84: return
    Exception table:
       from    to  target type
           0    19    22   Class java/lang/Throwable

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #17                 // Field active:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
       7: pop
       8: aload_0
       9: getfield      #14                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
      12: aload_1
      13: invokevirtual #45                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z
      16: ifeq          37
      19: aload_0
      20: getfield      #4                  // Field delayErrors:Z
      23: ifne          33
      26: aload_0
      27: getfield      #11                 // Field set:Lio/reactivex/rxjava3/disposables/CompositeDisposable;
      30: invokevirtual #46                 // Method io/reactivex/rxjava3/disposables/CompositeDisposable.dispose:()V
      33: aload_0
      34: invokevirtual #47                 // Method drain:()V
      37: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #17                 // Field active:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
       7: pop
       8: aload_0
       9: invokevirtual #47                 // Method drain:()V
      12: return

  public void cancel();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #41                 // Field cancelled:Z
       5: aload_0
       6: getfield      #21                 // Field upstream:Lorg/reactivestreams/Subscription;
       9: invokeinterface #36,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      14: aload_0
      15: getfield      #11                 // Field set:Lio/reactivex/rxjava3/disposables/CompositeDisposable;
      18: invokevirtual #46                 // Method io/reactivex/rxjava3/disposables/CompositeDisposable.dispose:()V
      21: aload_0
      22: getfield      #14                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
      25: invokevirtual #48                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.tryTerminateAndReport:()V
      28: return

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #49                 // Method io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.validate:(J)Z
       4: ifeq          20
       7: aload_0
       8: getfield      #8                  // Field requested:Ljava/util/concurrent/atomic/AtomicLong;
      11: lload_1
      12: invokestatic  #50                 // Method io/reactivex/rxjava3/internal/util/BackpressureHelper.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J
      15: pop2
      16: aload_0
      17: invokevirtual #47                 // Method drain:()V
      20: return

  void innerSuccess(io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber<T, R>.InnerObserver, R);
    Code:
       0: aload_0
       1: getfield      #11                 // Field set:Lio/reactivex/rxjava3/disposables/CompositeDisposable;
       4: aload_1
       5: invokevirtual #51                 // Method io/reactivex/rxjava3/disposables/CompositeDisposable.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z
       8: pop
       9: aload_0
      10: invokevirtual #52                 // Method get:()I
      13: ifne          171
      16: aload_0
      17: iconst_0
      18: iconst_1
      19: invokevirtual #53                 // Method compareAndSet:(II)Z
      22: ifeq          171
      25: aload_0
      26: getfield      #17                 // Field active:Ljava/util/concurrent/atomic/AtomicInteger;
      29: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      32: ifne          39
      35: iconst_1
      36: goto          40
      39: iconst_0
      40: istore_3
      41: aload_0
      42: getfield      #8                  // Field requested:Ljava/util/concurrent/atomic/AtomicLong;
      45: invokevirtual #54                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
      48: lconst_0
      49: lcmp
      50: ifeq          127
      53: aload_0
      54: getfield      #2                  // Field downstream:Lorg/reactivestreams/Subscriber;
      57: aload_2
      58: invokeinterface #55,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
      63: aload_0
      64: getfield      #20                 // Field queue:Ljava/util/concurrent/atomic/AtomicReference;
      67: invokevirtual #56                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      70: checkcast     #57                 // class io/reactivex/rxjava3/operators/SpscLinkedArrayQueue
      73: astore        4
      75: iload_3
      76: aload         4
      78: invokestatic  #58                 // Method checkTerminate:(ZLio/reactivex/rxjava3/operators/SpscLinkedArrayQueue;)Z
      81: ifeq          96
      84: aload_0
      85: getfield      #14                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
      88: aload_0
      89: getfield      #2                  // Field downstream:Lorg/reactivestreams/Subscriber;
      92: invokevirtual #59                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V
      95: return
      96: aload_0
      97: getfield      #8                  // Field requested:Ljava/util/concurrent/atomic/AtomicLong;
     100: lconst_1
     101: invokestatic  #60                 // Method io/reactivex/rxjava3/internal/util/BackpressureHelper.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J
     104: pop2
     105: aload_0
     106: getfield      #5                  // Field maxConcurrency:I
     109: ldc           #25                 // int 2147483647
     111: if_icmpeq     124
     114: aload_0
     115: getfield      #21                 // Field upstream:Lorg/reactivestreams/Subscription;
     118: lconst_1
     119: invokeinterface #29,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     124: goto          160
     127: aload_0
     128: invokevirtual #61                 // Method getOrCreateQueue:()Lio/reactivex/rxjava3/operators/SpscLinkedArrayQueue;
     131: astore        4
     133: aload         4
     135: dup
     136: astore        5
     138: monitorenter
     139: aload         4
     141: aload_2
     142: invokevirtual #62                 // Method io/reactivex/rxjava3/operators/SpscLinkedArrayQueue.offer:(Ljava/lang/Object;)Z
     145: pop
     146: aload         5
     148: monitorexit
     149: goto          160
     152: astore        6
     154: aload         5
     156: monitorexit
     157: aload         6
     159: athrow
     160: aload_0
     161: invokevirtual #63                 // Method decrementAndGet:()I
     164: ifne          168
     167: return
     168: goto          217
     171: aload_0
     172: invokevirtual #61                 // Method getOrCreateQueue:()Lio/reactivex/rxjava3/operators/SpscLinkedArrayQueue;
     175: astore_3
     176: aload_3
     177: dup
     178: astore        4
     180: monitorenter
     181: aload_3
     182: aload_2
     183: invokevirtual #62                 // Method io/reactivex/rxjava3/operators/SpscLinkedArrayQueue.offer:(Ljava/lang/Object;)Z
     186: pop
     187: aload         4
     189: monitorexit
     190: goto          201
     193: astore        7
     195: aload         4
     197: monitorexit
     198: aload         7
     200: athrow
     201: aload_0
     202: getfield      #17                 // Field active:Ljava/util/concurrent/atomic/AtomicInteger;
     205: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
     208: pop
     209: aload_0
     210: invokevirtual #64                 // Method getAndIncrement:()I
     213: ifeq          217
     216: return
     217: aload_0
     218: invokevirtual #65                 // Method drainLoop:()V
     221: return
    Exception table:
       from    to  target type
         139   149   152   any
         152   157   152   any
         181   190   193   any
         193   198   193   any

  io.reactivex.rxjava3.operators.SpscLinkedArrayQueue<R> getOrCreateQueue();
    Code:
       0: aload_0
       1: getfield      #20                 // Field queue:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #56                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #57                 // class io/reactivex/rxjava3/operators/SpscLinkedArrayQueue
      10: astore_1
      11: aload_1
      12: ifnull        17
      15: aload_1
      16: areturn
      17: new           #57                 // class io/reactivex/rxjava3/operators/SpscLinkedArrayQueue
      20: dup
      21: invokestatic  #66                 // Method io/reactivex/rxjava3/core/Flowable.bufferSize:()I
      24: invokespecial #67                 // Method io/reactivex/rxjava3/operators/SpscLinkedArrayQueue."<init>":(I)V
      27: astore_1
      28: aload_0
      29: getfield      #20                 // Field queue:Ljava/util/concurrent/atomic/AtomicReference;
      32: aconst_null
      33: aload_1
      34: invokevirtual #68                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      37: ifeq          42
      40: aload_1
      41: areturn
      42: aload_0
      43: getfield      #20                 // Field queue:Ljava/util/concurrent/atomic/AtomicReference;
      46: invokevirtual #56                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      49: checkcast     #57                 // class io/reactivex/rxjava3/operators/SpscLinkedArrayQueue
      52: areturn

  void innerError(io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber<T, R>.InnerObserver, java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #11                 // Field set:Lio/reactivex/rxjava3/disposables/CompositeDisposable;
       4: aload_1
       5: invokevirtual #51                 // Method io/reactivex/rxjava3/disposables/CompositeDisposable.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z
       8: pop
       9: aload_0
      10: getfield      #14                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
      13: aload_2
      14: invokevirtual #45                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z
      17: ifeq          77
      20: aload_0
      21: getfield      #4                  // Field delayErrors:Z
      24: ifne          46
      27: aload_0
      28: getfield      #21                 // Field upstream:Lorg/reactivestreams/Subscription;
      31: invokeinterface #36,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      36: aload_0
      37: getfield      #11                 // Field set:Lio/reactivex/rxjava3/disposables/CompositeDisposable;
      40: invokevirtual #46                 // Method io/reactivex/rxjava3/disposables/CompositeDisposable.dispose:()V
      43: goto          65
      46: aload_0
      47: getfield      #5                  // Field maxConcurrency:I
      50: ldc           #25                 // int 2147483647
      52: if_icmpeq     65
      55: aload_0
      56: getfield      #21                 // Field upstream:Lorg/reactivestreams/Subscription;
      59: lconst_1
      60: invokeinterface #29,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      65: aload_0
      66: getfield      #17                 // Field active:Ljava/util/concurrent/atomic/AtomicInteger;
      69: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      72: pop
      73: aload_0
      74: invokevirtual #47                 // Method drain:()V
      77: return

  void innerComplete(io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber<T, R>.InnerObserver);
    Code:
       0: aload_0
       1: getfield      #11                 // Field set:Lio/reactivex/rxjava3/disposables/CompositeDisposable;
       4: aload_1
       5: invokevirtual #51                 // Method io/reactivex/rxjava3/disposables/CompositeDisposable.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z
       8: pop
       9: aload_0
      10: invokevirtual #52                 // Method get:()I
      13: ifne          106
      16: aload_0
      17: iconst_0
      18: iconst_1
      19: invokevirtual #53                 // Method compareAndSet:(II)Z
      22: ifeq          106
      25: aload_0
      26: getfield      #17                 // Field active:Ljava/util/concurrent/atomic/AtomicInteger;
      29: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      32: ifne          39
      35: iconst_1
      36: goto          40
      39: iconst_0
      40: istore_2
      41: aload_0
      42: getfield      #20                 // Field queue:Ljava/util/concurrent/atomic/AtomicReference;
      45: invokevirtual #56                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      48: checkcast     #57                 // class io/reactivex/rxjava3/operators/SpscLinkedArrayQueue
      51: astore_3
      52: iload_2
      53: aload_3
      54: invokestatic  #58                 // Method checkTerminate:(ZLio/reactivex/rxjava3/operators/SpscLinkedArrayQueue;)Z
      57: ifeq          72
      60: aload_0
      61: getfield      #14                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
      64: aload_0
      65: getfield      #2                  // Field downstream:Lorg/reactivestreams/Subscriber;
      68: invokevirtual #59                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V
      71: return
      72: aload_0
      73: getfield      #5                  // Field maxConcurrency:I
      76: ldc           #25                 // int 2147483647
      78: if_icmpeq     91
      81: aload_0
      82: getfield      #21                 // Field upstream:Lorg/reactivestreams/Subscription;
      85: lconst_1
      86: invokeinterface #29,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      91: aload_0
      92: invokevirtual #63                 // Method decrementAndGet:()I
      95: ifne          99
      98: return
      99: aload_0
     100: invokevirtual #65                 // Method drainLoop:()V
     103: goto          137
     106: aload_0
     107: getfield      #17                 // Field active:Ljava/util/concurrent/atomic/AtomicInteger;
     110: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
     113: pop
     114: aload_0
     115: getfield      #5                  // Field maxConcurrency:I
     118: ldc           #25                 // int 2147483647
     120: if_icmpeq     133
     123: aload_0
     124: getfield      #21                 // Field upstream:Lorg/reactivestreams/Subscription;
     127: lconst_1
     128: invokeinterface #29,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     133: aload_0
     134: invokevirtual #47                 // Method drain:()V
     137: return

  static boolean checkTerminate(boolean, io.reactivex.rxjava3.operators.SpscLinkedArrayQueue<?>);
    Code:
       0: iload_0
       1: ifeq          19
       4: aload_1
       5: ifnull        15
       8: aload_1
       9: invokevirtual #69                 // Method io/reactivex/rxjava3/operators/SpscLinkedArrayQueue.isEmpty:()Z
      12: ifeq          19
      15: iconst_1
      16: goto          20
      19: iconst_0
      20: ireturn

  void drain();
    Code:
       0: aload_0
       1: invokevirtual #64                 // Method getAndIncrement:()I
       4: ifne          11
       7: aload_0
       8: invokevirtual #65                 // Method drainLoop:()V
      11: return

  void clear();
    Code:
       0: aload_0
       1: getfield      #20                 // Field queue:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #56                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #57                 // class io/reactivex/rxjava3/operators/SpscLinkedArrayQueue
      10: astore_1
      11: aload_1
      12: ifnull        19
      15: aload_1
      16: invokevirtual #70                 // Method io/reactivex/rxjava3/operators/SpscLinkedArrayQueue.clear:()V
      19: return

  void drainLoop();
    Code:
       0: iconst_1
       1: istore_1
       2: aload_0
       3: getfield      #2                  // Field downstream:Lorg/reactivestreams/Subscriber;
       6: astore_2
       7: aload_0
       8: getfield      #17                 // Field active:Ljava/util/concurrent/atomic/AtomicInteger;
      11: astore_3
      12: aload_0
      13: getfield      #20                 // Field queue:Ljava/util/concurrent/atomic/AtomicReference;
      16: astore        4
      18: aload_0
      19: getfield      #8                  // Field requested:Ljava/util/concurrent/atomic/AtomicLong;
      22: invokevirtual #54                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
      25: lstore        5
      27: lconst_0
      28: lstore        7
      30: lload         7
      32: lload         5
      34: lcmp
      35: ifeq          183
      38: aload_0
      39: getfield      #41                 // Field cancelled:Z
      42: ifeq          50
      45: aload_0
      46: invokevirtual #71                 // Method clear:()V
      49: return
      50: aload_0
      51: getfield      #4                  // Field delayErrors:Z
      54: ifne          87
      57: aload_0
      58: getfield      #14                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
      61: invokevirtual #72                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.get:()Ljava/lang/Object;
      64: checkcast     #34                 // class java/lang/Throwable
      67: astore        9
      69: aload         9
      71: ifnull        87
      74: aload_0
      75: invokevirtual #71                 // Method clear:()V
      78: aload_0
      79: getfield      #14                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
      82: aload_2
      83: invokevirtual #59                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V
      86: return
      87: aload_3
      88: invokevirtual #73                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      91: ifne          98
      94: iconst_1
      95: goto          99
      98: iconst_0
      99: istore        9
     101: aload         4
     103: invokevirtual #56                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
     106: checkcast     #57                 // class io/reactivex/rxjava3/operators/SpscLinkedArrayQueue
     109: astore        10
     111: aload         10
     113: ifnull        124
     116: aload         10
     118: invokevirtual #74                 // Method io/reactivex/rxjava3/operators/SpscLinkedArrayQueue.poll:()Ljava/lang/Object;
     121: goto          125
     124: aconst_null
     125: astore        11
     127: aload         11
     129: ifnonnull     136
     132: iconst_1
     133: goto          137
     136: iconst_0
     137: istore        12
     139: iload         9
     141: ifeq          158
     144: iload         12
     146: ifeq          158
     149: aload_0
     150: getfield      #14                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
     153: aload_2
     154: invokevirtual #59                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V
     157: return
     158: iload         12
     160: ifeq          166
     163: goto          183
     166: aload_2
     167: aload         11
     169: invokeinterface #55,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
     174: lload         7
     176: lconst_1
     177: ladd
     178: lstore        7
     180: goto          30
     183: lload         7
     185: lload         5
     187: lcmp
     188: ifne          303
     191: aload_0
     192: getfield      #41                 // Field cancelled:Z
     195: ifeq          203
     198: aload_0
     199: invokevirtual #71                 // Method clear:()V
     202: return
     203: aload_0
     204: getfield      #4                  // Field delayErrors:Z
     207: ifne          240
     210: aload_0
     211: getfield      #14                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
     214: invokevirtual #72                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.get:()Ljava/lang/Object;
     217: checkcast     #34                 // class java/lang/Throwable
     220: astore        9
     222: aload         9
     224: ifnull        240
     227: aload_0
     228: invokevirtual #71                 // Method clear:()V
     231: aload_0
     232: getfield      #14                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
     235: aload_2
     236: invokevirtual #59                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V
     239: return
     240: aload_3
     241: invokevirtual #73                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
     244: ifne          251
     247: iconst_1
     248: goto          252
     251: iconst_0
     252: istore        9
     254: aload         4
     256: invokevirtual #56                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
     259: checkcast     #57                 // class io/reactivex/rxjava3/operators/SpscLinkedArrayQueue
     262: astore        10
     264: aload         10
     266: ifnull        277
     269: aload         10
     271: invokevirtual #69                 // Method io/reactivex/rxjava3/operators/SpscLinkedArrayQueue.isEmpty:()Z
     274: ifeq          281
     277: iconst_1
     278: goto          282
     281: iconst_0
     282: istore        11
     284: iload         9
     286: ifeq          303
     289: iload         11
     291: ifeq          303
     294: aload_0
     295: getfield      #14                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
     298: aload_2
     299: invokevirtual #59                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V
     302: return
     303: lload         7
     305: lconst_0
     306: lcmp
     307: ifeq          340
     310: aload_0
     311: getfield      #8                  // Field requested:Ljava/util/concurrent/atomic/AtomicLong;
     314: lload         7
     316: invokestatic  #60                 // Method io/reactivex/rxjava3/internal/util/BackpressureHelper.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J
     319: pop2
     320: aload_0
     321: getfield      #5                  // Field maxConcurrency:I
     324: ldc           #25                 // int 2147483647
     326: if_icmpeq     340
     329: aload_0
     330: getfield      #21                 // Field upstream:Lorg/reactivestreams/Subscription;
     333: lload         7
     335: invokeinterface #29,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     340: aload_0
     341: iload_1
     342: ineg
     343: invokevirtual #75                 // Method addAndGet:(I)I
     346: istore_1
     347: iload_1
     348: ifne          354
     351: goto          357
     354: goto          18
     357: return
}

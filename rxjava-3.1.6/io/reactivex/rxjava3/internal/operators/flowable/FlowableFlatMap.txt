Compiled from "FlowableFlatMap.java"
public final class io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap<T, U> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<T, U> {
  final io.reactivex.rxjava3.functions.Function<? super T, ? extends org.reactivestreams.Publisher<? extends U>> mapper;

  final boolean delayErrors;

  final int maxConcurrency;

  final int bufferSize;

  public io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap(io.reactivex.rxjava3.core.Flowable<T>, io.reactivex.rxjava3.functions.Function<? super T, ? extends org.reactivestreams.Publisher<? extends U>>, boolean, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method io/reactivex/rxjava3/internal/operators/flowable/AbstractFlowableWithUpstream."<init>":(Lio/reactivex/rxjava3/core/Flowable;)V
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field mapper:Lio/reactivex/rxjava3/functions/Function;
      10: aload_0
      11: iload_3
      12: putfield      #3                  // Field delayErrors:Z
      15: aload_0
      16: iload         4
      18: putfield      #4                  // Field maxConcurrency:I
      21: aload_0
      22: iload         5
      24: putfield      #5                  // Field bufferSize:I
      27: return

  protected void subscribeActual(org.reactivestreams.Subscriber<? super U>);
    Code:
       0: aload_0
       1: getfield      #6                  // Field source:Lio/reactivex/rxjava3/core/Flowable;
       4: aload_1
       5: aload_0
       6: getfield      #2                  // Field mapper:Lio/reactivex/rxjava3/functions/Function;
       9: invokestatic  #7                  // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableScalarXMap.tryScalarXMapSubscribe:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;)Z
      12: ifeq          16
      15: return
      16: aload_0
      17: getfield      #6                  // Field source:Lio/reactivex/rxjava3/core/Flowable;
      20: aload_1
      21: aload_0
      22: getfield      #2                  // Field mapper:Lio/reactivex/rxjava3/functions/Function;
      25: aload_0
      26: getfield      #3                  // Field delayErrors:Z
      29: aload_0
      30: getfield      #4                  // Field maxConcurrency:I
      33: aload_0
      34: getfield      #5                  // Field bufferSize:I
      37: invokestatic  #8                  // Method subscribe:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;ZII)Lio/reactivex/rxjava3/core/FlowableSubscriber;
      40: invokevirtual #9                  // Method io/reactivex/rxjava3/core/Flowable.subscribe:(Lio/reactivex/rxjava3/core/FlowableSubscriber;)V
      43: return

  public static <T, U> io.reactivex.rxjava3.core.FlowableSubscriber<T> subscribe(org.reactivestreams.Subscriber<? super U>, io.reactivex.rxjava3.functions.Function<? super T, ? extends org.reactivestreams.Publisher<? extends U>>, boolean, int, int);
    Code:
       0: new           #10                 // class io/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$MergeSubscriber
       3: dup
       4: aload_0
       5: aload_1
       6: iload_2
       7: iload_3
       8: iload         4
      10: invokespecial #11                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$MergeSubscriber."<init>":(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;ZII)V
      13: areturn
}

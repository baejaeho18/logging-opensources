Compiled from "FlowableSequenceEqual.java"
final class io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber<T> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.core.FlowableSubscriber<T> {
  private static final long serialVersionUID;

  final io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinatorHelper parent;

  final int prefetch;

  final int limit;

  long produced;

  volatile io.reactivex.rxjava3.operators.SimpleQueue<T> queue;

  volatile boolean done;

  int sourceMode;

  io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber(io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinatorHelper, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field parent:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinatorHelper;
       9: aload_0
      10: iload_2
      11: iload_2
      12: iconst_2
      13: ishr
      14: isub
      15: putfield      #3                  // Field limit:I
      18: aload_0
      19: iload_2
      20: putfield      #4                  // Field prefetch:I
      23: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #5                  // Method io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z
       5: ifeq          111
       8: aload_1
       9: instanceof    #6                  // class io/reactivex/rxjava3/operators/QueueSubscription
      12: ifeq          85
      15: aload_1
      16: checkcast     #6                  // class io/reactivex/rxjava3/operators/QueueSubscription
      19: astore_2
      20: aload_2
      21: iconst_3
      22: invokeinterface #7,  2            // InterfaceMethod io/reactivex/rxjava3/operators/QueueSubscription.requestFusion:(I)I
      27: istore_3
      28: iload_3
      29: iconst_1
      30: if_icmpne     58
      33: aload_0
      34: iload_3
      35: putfield      #8                  // Field sourceMode:I
      38: aload_0
      39: aload_2
      40: putfield      #9                  // Field queue:Lio/reactivex/rxjava3/operators/SimpleQueue;
      43: aload_0
      44: iconst_1
      45: putfield      #10                 // Field done:Z
      48: aload_0
      49: getfield      #2                  // Field parent:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinatorHelper;
      52: invokeinterface #11,  1           // InterfaceMethod io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinatorHelper.drain:()V
      57: return
      58: iload_3
      59: iconst_2
      60: if_icmpne     85
      63: aload_0
      64: iload_3
      65: putfield      #8                  // Field sourceMode:I
      68: aload_0
      69: aload_2
      70: putfield      #9                  // Field queue:Lio/reactivex/rxjava3/operators/SimpleQueue;
      73: aload_1
      74: aload_0
      75: getfield      #4                  // Field prefetch:I
      78: i2l
      79: invokeinterface #12,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      84: return
      85: aload_0
      86: new           #13                 // class io/reactivex/rxjava3/operators/SpscArrayQueue
      89: dup
      90: aload_0
      91: getfield      #4                  // Field prefetch:I
      94: invokespecial #14                 // Method io/reactivex/rxjava3/operators/SpscArrayQueue."<init>":(I)V
      97: putfield      #9                  // Field queue:Lio/reactivex/rxjava3/operators/SimpleQueue;
     100: aload_1
     101: aload_0
     102: getfield      #4                  // Field prefetch:I
     105: i2l
     106: invokeinterface #12,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     111: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #8                  // Field sourceMode:I
       4: ifne          28
       7: aload_0
       8: getfield      #9                  // Field queue:Lio/reactivex/rxjava3/operators/SimpleQueue;
      11: aload_1
      12: invokeinterface #15,  2           // InterfaceMethod io/reactivex/rxjava3/operators/SimpleQueue.offer:(Ljava/lang/Object;)Z
      17: ifne          28
      20: aload_0
      21: invokestatic  #16                 // Method io/reactivex/rxjava3/exceptions/MissingBackpressureException.createDefault:()Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;
      24: invokevirtual #17                 // Method onError:(Ljava/lang/Throwable;)V
      27: return
      28: aload_0
      29: getfield      #2                  // Field parent:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinatorHelper;
      32: invokeinterface #11,  1           // InterfaceMethod io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinatorHelper.drain:()V
      37: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #2                  // Field parent:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinatorHelper;
       4: aload_1
       5: invokeinterface #18,  2           // InterfaceMethod io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinatorHelper.innerError:(Ljava/lang/Throwable;)V
      10: return

  public void onComplete();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #10                 // Field done:Z
       5: aload_0
       6: getfield      #2                  // Field parent:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinatorHelper;
       9: invokeinterface #11,  1           // InterfaceMethod io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinatorHelper.drain:()V
      14: return

  public void request();
    Code:
       0: aload_0
       1: getfield      #8                  // Field sourceMode:I
       4: iconst_1
       5: if_icmpeq     51
       8: aload_0
       9: getfield      #19                 // Field produced:J
      12: lconst_1
      13: ladd
      14: lstore_1
      15: lload_1
      16: aload_0
      17: getfield      #3                  // Field limit:I
      20: i2l
      21: lcmp
      22: iflt          46
      25: aload_0
      26: lconst_0
      27: putfield      #19                 // Field produced:J
      30: aload_0
      31: invokevirtual #20                 // Method get:()Ljava/lang/Object;
      34: checkcast     #21                 // class org/reactivestreams/Subscription
      37: lload_1
      38: invokeinterface #12,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      43: goto          51
      46: aload_0
      47: lload_1
      48: putfield      #19                 // Field produced:J
      51: return

  public void cancel();
    Code:
       0: aload_0
       1: invokestatic  #22                 // Method io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z
       4: pop
       5: return

  void clear();
    Code:
       0: aload_0
       1: getfield      #9                  // Field queue:Lio/reactivex/rxjava3/operators/SimpleQueue;
       4: astore_1
       5: aload_1
       6: ifnull        15
       9: aload_1
      10: invokeinterface #23,  1           // InterfaceMethod io/reactivex/rxjava3/operators/SimpleQueue.clear:()V
      15: return
}

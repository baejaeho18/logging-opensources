Compiled from "FlowableBuffer.java"
public final class io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer<T, C extends java.util.Collection<? super T>> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<T, C> {
  final int size;

  final int skip;

  final io.reactivex.rxjava3.functions.Supplier<C> bufferSupplier;

  public io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer(io.reactivex.rxjava3.core.Flowable<T>, int, int, io.reactivex.rxjava3.functions.Supplier<C>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method io/reactivex/rxjava3/internal/operators/flowable/AbstractFlowableWithUpstream."<init>":(Lio/reactivex/rxjava3/core/Flowable;)V
       5: aload_0
       6: iload_2
       7: putfield      #2                  // Field size:I
      10: aload_0
      11: iload_3
      12: putfield      #3                  // Field skip:I
      15: aload_0
      16: aload         4
      18: putfield      #4                  // Field bufferSupplier:Lio/reactivex/rxjava3/functions/Supplier;
      21: return

  public void subscribeActual(org.reactivestreams.Subscriber<? super C>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field size:I
       4: aload_0
       5: getfield      #3                  // Field skip:I
       8: if_icmpne     37
      11: aload_0
      12: getfield      #5                  // Field source:Lio/reactivex/rxjava3/core/Flowable;
      15: new           #6                  // class io/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$PublisherBufferExactSubscriber
      18: dup
      19: aload_1
      20: aload_0
      21: getfield      #2                  // Field size:I
      24: aload_0
      25: getfield      #4                  // Field bufferSupplier:Lio/reactivex/rxjava3/functions/Supplier;
      28: invokespecial #7                  // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$PublisherBufferExactSubscriber."<init>":(Lorg/reactivestreams/Subscriber;ILio/reactivex/rxjava3/functions/Supplier;)V
      31: invokevirtual #8                  // Method io/reactivex/rxjava3/core/Flowable.subscribe:(Lio/reactivex/rxjava3/core/FlowableSubscriber;)V
      34: goto          105
      37: aload_0
      38: getfield      #3                  // Field skip:I
      41: aload_0
      42: getfield      #2                  // Field size:I
      45: if_icmple     78
      48: aload_0
      49: getfield      #5                  // Field source:Lio/reactivex/rxjava3/core/Flowable;
      52: new           #9                  // class io/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$PublisherBufferSkipSubscriber
      55: dup
      56: aload_1
      57: aload_0
      58: getfield      #2                  // Field size:I
      61: aload_0
      62: getfield      #3                  // Field skip:I
      65: aload_0
      66: getfield      #4                  // Field bufferSupplier:Lio/reactivex/rxjava3/functions/Supplier;
      69: invokespecial #10                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$PublisherBufferSkipSubscriber."<init>":(Lorg/reactivestreams/Subscriber;IILio/reactivex/rxjava3/functions/Supplier;)V
      72: invokevirtual #8                  // Method io/reactivex/rxjava3/core/Flowable.subscribe:(Lio/reactivex/rxjava3/core/FlowableSubscriber;)V
      75: goto          105
      78: aload_0
      79: getfield      #5                  // Field source:Lio/reactivex/rxjava3/core/Flowable;
      82: new           #11                 // class io/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$PublisherBufferOverlappingSubscriber
      85: dup
      86: aload_1
      87: aload_0
      88: getfield      #2                  // Field size:I
      91: aload_0
      92: getfield      #3                  // Field skip:I
      95: aload_0
      96: getfield      #4                  // Field bufferSupplier:Lio/reactivex/rxjava3/functions/Supplier;
      99: invokespecial #12                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$PublisherBufferOverlappingSubscriber."<init>":(Lorg/reactivestreams/Subscriber;IILio/reactivex/rxjava3/functions/Supplier;)V
     102: invokevirtual #8                  // Method io/reactivex/rxjava3/core/Flowable.subscribe:(Lio/reactivex/rxjava3/core/FlowableSubscriber;)V
     105: return
}

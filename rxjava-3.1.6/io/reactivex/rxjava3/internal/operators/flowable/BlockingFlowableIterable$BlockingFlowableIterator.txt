Compiled from "BlockingFlowableIterable.java"
final class io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator<T> extends java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> implements io.reactivex.rxjava3.core.FlowableSubscriber<T>, java.util.Iterator<T>, java.lang.Runnable, io.reactivex.rxjava3.disposables.Disposable {
  private static final long serialVersionUID;

  final io.reactivex.rxjava3.operators.SpscArrayQueue<T> queue;

  final long batchSize;

  final long limit;

  final java.util.concurrent.locks.Lock lock;

  final java.util.concurrent.locks.Condition condition;

  long produced;

  volatile boolean done;

  volatile java.lang.Throwable error;

  io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableIterable$BlockingFlowableIterator(int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
       4: aload_0
       5: new           #2                  // class io/reactivex/rxjava3/operators/SpscArrayQueue
       8: dup
       9: iload_1
      10: invokespecial #3                  // Method io/reactivex/rxjava3/operators/SpscArrayQueue."<init>":(I)V
      13: putfield      #4                  // Field queue:Lio/reactivex/rxjava3/operators/SpscArrayQueue;
      16: aload_0
      17: iload_1
      18: i2l
      19: putfield      #5                  // Field batchSize:J
      22: aload_0
      23: iload_1
      24: iload_1
      25: iconst_2
      26: ishr
      27: isub
      28: i2l
      29: putfield      #6                  // Field limit:J
      32: aload_0
      33: new           #7                  // class java/util/concurrent/locks/ReentrantLock
      36: dup
      37: invokespecial #8                  // Method java/util/concurrent/locks/ReentrantLock."<init>":()V
      40: putfield      #9                  // Field lock:Ljava/util/concurrent/locks/Lock;
      43: aload_0
      44: aload_0
      45: getfield      #9                  // Field lock:Ljava/util/concurrent/locks/Lock;
      48: invokeinterface #10,  1           // InterfaceMethod java/util/concurrent/locks/Lock.newCondition:()Ljava/util/concurrent/locks/Condition;
      53: putfield      #11                 // Field condition:Ljava/util/concurrent/locks/Condition;
      56: return

  public boolean hasNext();
    Code:
       0: aload_0
       1: invokevirtual #12                 // Method isDisposed:()Z
       4: ifeq          23
       7: aload_0
       8: getfield      #13                 // Field error:Ljava/lang/Throwable;
      11: astore_1
      12: aload_1
      13: ifnull        21
      16: aload_1
      17: invokestatic  #14                 // Method io/reactivex/rxjava3/internal/util/ExceptionHelper.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      20: athrow
      21: iconst_0
      22: ireturn
      23: aload_0
      24: getfield      #15                 // Field done:Z
      27: istore_1
      28: aload_0
      29: getfield      #4                  // Field queue:Lio/reactivex/rxjava3/operators/SpscArrayQueue;
      32: invokevirtual #16                 // Method io/reactivex/rxjava3/operators/SpscArrayQueue.isEmpty:()Z
      35: istore_2
      36: iload_1
      37: ifeq          60
      40: aload_0
      41: getfield      #13                 // Field error:Ljava/lang/Throwable;
      44: astore_3
      45: aload_3
      46: ifnull        54
      49: aload_3
      50: invokestatic  #14                 // Method io/reactivex/rxjava3/internal/util/ExceptionHelper.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      53: athrow
      54: iload_2
      55: ifeq          60
      58: iconst_0
      59: ireturn
      60: iload_2
      61: ifeq          151
      64: invokestatic  #17                 // Method io/reactivex/rxjava3/internal/util/BlockingHelper.verifyNonBlocking:()V
      67: aload_0
      68: getfield      #9                  // Field lock:Ljava/util/concurrent/locks/Lock;
      71: invokeinterface #18,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
      76: aload_0
      77: getfield      #15                 // Field done:Z
      80: ifne          112
      83: aload_0
      84: getfield      #4                  // Field queue:Lio/reactivex/rxjava3/operators/SpscArrayQueue;
      87: invokevirtual #16                 // Method io/reactivex/rxjava3/operators/SpscArrayQueue.isEmpty:()Z
      90: ifeq          112
      93: aload_0
      94: invokevirtual #12                 // Method isDisposed:()Z
      97: ifne          112
     100: aload_0
     101: getfield      #11                 // Field condition:Ljava/util/concurrent/locks/Condition;
     104: invokeinterface #19,  1           // InterfaceMethod java/util/concurrent/locks/Condition.await:()V
     109: goto          76
     112: aload_0
     113: getfield      #9                  // Field lock:Ljava/util/concurrent/locks/Lock;
     116: invokeinterface #20,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
     121: goto          148
     124: astore_3
     125: aload_0
     126: invokevirtual #22                 // Method run:()V
     129: aload_3
     130: invokestatic  #14                 // Method io/reactivex/rxjava3/internal/util/ExceptionHelper.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
     133: athrow
     134: astore        4
     136: aload_0
     137: getfield      #9                  // Field lock:Ljava/util/concurrent/locks/Lock;
     140: invokeinterface #20,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
     145: aload         4
     147: athrow
     148: goto          153
     151: iconst_1
     152: ireturn
     153: goto          0
    Exception table:
       from    to  target type
          76   112   124   Class java/lang/InterruptedException
          76   112   134   any
         124   136   134   any

  public T next();
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method hasNext:()Z
       4: ifeq          59
       7: aload_0
       8: getfield      #4                  // Field queue:Lio/reactivex/rxjava3/operators/SpscArrayQueue;
      11: invokevirtual #24                 // Method io/reactivex/rxjava3/operators/SpscArrayQueue.poll:()Ljava/lang/Object;
      14: astore_1
      15: aload_0
      16: getfield      #25                 // Field produced:J
      19: lconst_1
      20: ladd
      21: lstore_2
      22: lload_2
      23: aload_0
      24: getfield      #6                  // Field limit:J
      27: lcmp
      28: ifne          52
      31: aload_0
      32: lconst_0
      33: putfield      #25                 // Field produced:J
      36: aload_0
      37: invokevirtual #26                 // Method get:()Ljava/lang/Object;
      40: checkcast     #27                 // class org/reactivestreams/Subscription
      43: lload_2
      44: invokeinterface #28,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      49: goto          57
      52: aload_0
      53: lload_2
      54: putfield      #25                 // Field produced:J
      57: aload_1
      58: areturn
      59: new           #29                 // class java/util/NoSuchElementException
      62: dup
      63: invokespecial #30                 // Method java/util/NoSuchElementException."<init>":()V
      66: athrow

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: aload_1
       2: aload_0
       3: getfield      #5                  // Field batchSize:J
       6: invokestatic  #31                 // Method io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z
       9: pop
      10: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #4                  // Field queue:Lio/reactivex/rxjava3/operators/SpscArrayQueue;
       4: aload_1
       5: invokevirtual #32                 // Method io/reactivex/rxjava3/operators/SpscArrayQueue.offer:(Ljava/lang/Object;)Z
       8: ifne          30
      11: aload_0
      12: invokestatic  #33                 // Method io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z
      15: pop
      16: aload_0
      17: new           #34                 // class io/reactivex/rxjava3/exceptions/QueueOverflowException
      20: dup
      21: invokespecial #35                 // Method io/reactivex/rxjava3/exceptions/QueueOverflowException."<init>":()V
      24: invokevirtual #36                 // Method onError:(Ljava/lang/Throwable;)V
      27: goto          34
      30: aload_0
      31: invokevirtual #37                 // Method signalConsumer:()V
      34: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #13                 // Field error:Ljava/lang/Throwable;
       5: aload_0
       6: iconst_1
       7: putfield      #15                 // Field done:Z
      10: aload_0
      11: invokevirtual #37                 // Method signalConsumer:()V
      14: return

  public void onComplete();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #15                 // Field done:Z
       5: aload_0
       6: invokevirtual #37                 // Method signalConsumer:()V
       9: return

  void signalConsumer();
    Code:
       0: aload_0
       1: getfield      #9                  // Field lock:Ljava/util/concurrent/locks/Lock;
       4: invokeinterface #18,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
       9: aload_0
      10: getfield      #11                 // Field condition:Ljava/util/concurrent/locks/Condition;
      13: invokeinterface #38,  1           // InterfaceMethod java/util/concurrent/locks/Condition.signalAll:()V
      18: aload_0
      19: getfield      #9                  // Field lock:Ljava/util/concurrent/locks/Lock;
      22: invokeinterface #20,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      27: goto          42
      30: astore_1
      31: aload_0
      32: getfield      #9                  // Field lock:Ljava/util/concurrent/locks/Lock;
      35: invokeinterface #20,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      40: aload_1
      41: athrow
      42: return
    Exception table:
       from    to  target type
           9    18    30   any

  public void run();
    Code:
       0: aload_0
       1: invokestatic  #33                 // Method io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z
       4: pop
       5: aload_0
       6: invokevirtual #37                 // Method signalConsumer:()V
       9: return

  public void remove();
    Code:
       0: new           #39                 // class java/lang/UnsupportedOperationException
       3: dup
       4: ldc           #40                 // String remove
       6: invokespecial #41                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
       9: athrow

  public void dispose();
    Code:
       0: aload_0
       1: invokestatic  #33                 // Method io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z
       4: pop
       5: aload_0
       6: invokevirtual #37                 // Method signalConsumer:()V
       9: return

  public boolean isDisposed();
    Code:
       0: aload_0
       1: invokevirtual #26                 // Method get:()Ljava/lang/Object;
       4: getstatic     #42                 // Field io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.CANCELLED:Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;
       7: if_acmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn
}

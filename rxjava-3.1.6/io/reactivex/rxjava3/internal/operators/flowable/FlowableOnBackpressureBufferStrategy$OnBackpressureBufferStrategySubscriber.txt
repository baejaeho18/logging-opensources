Compiled from "FlowableOnBackpressureBufferStrategy.java"
final class io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.core.FlowableSubscriber<T>, org.reactivestreams.Subscription {
  private static final long serialVersionUID;

  final org.reactivestreams.Subscriber<? super T> downstream;

  final io.reactivex.rxjava3.functions.Action onOverflow;

  final io.reactivex.rxjava3.core.BackpressureOverflowStrategy strategy;

  final long bufferSize;

  final java.util.concurrent.atomic.AtomicLong requested;

  final java.util.Deque<T> deque;

  org.reactivestreams.Subscription upstream;

  volatile boolean cancelled;

  volatile boolean done;

  java.lang.Throwable error;

  io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber(org.reactivestreams.Subscriber<? super T>, io.reactivex.rxjava3.functions.Action, io.reactivex.rxjava3.core.BackpressureOverflowStrategy, long);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field downstream:Lorg/reactivestreams/Subscriber;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field onOverflow:Lio/reactivex/rxjava3/functions/Action;
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field strategy:Lio/reactivex/rxjava3/core/BackpressureOverflowStrategy;
      19: aload_0
      20: lload         4
      22: putfield      #5                  // Field bufferSize:J
      25: aload_0
      26: new           #6                  // class java/util/concurrent/atomic/AtomicLong
      29: dup
      30: invokespecial #7                  // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
      33: putfield      #8                  // Field requested:Ljava/util/concurrent/atomic/AtomicLong;
      36: aload_0
      37: new           #9                  // class java/util/ArrayDeque
      40: dup
      41: invokespecial #10                 // Method java/util/ArrayDeque."<init>":()V
      44: putfield      #11                 // Field deque:Ljava/util/Deque;
      47: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #12                 // Field upstream:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #13                 // Method io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          35
      11: aload_0
      12: aload_1
      13: putfield      #12                 // Field upstream:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: getfield      #2                  // Field downstream:Lorg/reactivestreams/Subscriber;
      20: aload_0
      21: invokeinterface #14,  2           // InterfaceMethod org/reactivestreams/Subscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      26: aload_1
      27: ldc2_w        #16                 // long 9223372036854775807l
      30: invokeinterface #18,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      35: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #19                 // Field done:Z
       4: ifeq          8
       7: return
       8: iconst_0
       9: istore_2
      10: iconst_0
      11: istore_3
      12: aload_0
      13: getfield      #11                 // Field deque:Ljava/util/Deque;
      16: astore        4
      18: aload         4
      20: dup
      21: astore        5
      23: monitorenter
      24: aload         4
      26: invokeinterface #20,  1           // InterfaceMethod java/util/Deque.size:()I
      31: i2l
      32: aload_0
      33: getfield      #5                  // Field bufferSize:J
      36: lcmp
      37: ifne          125
      40: getstatic     #21                 // Field io/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$1.$SwitchMap$io$reactivex$rxjava3$core$BackpressureOverflowStrategy:[I
      43: aload_0
      44: getfield      #4                  // Field strategy:Lio/reactivex/rxjava3/core/BackpressureOverflowStrategy;
      47: invokevirtual #22                 // Method io/reactivex/rxjava3/core/BackpressureOverflowStrategy.ordinal:()I
      50: iaload
      51: lookupswitch  { // 2
                     1: 76
                     2: 98
               default: 120
          }
      76: aload         4
      78: invokeinterface #23,  1           // InterfaceMethod java/util/Deque.pollLast:()Ljava/lang/Object;
      83: pop
      84: aload         4
      86: aload_1
      87: invokeinterface #24,  2           // InterfaceMethod java/util/Deque.offer:(Ljava/lang/Object;)Z
      92: pop
      93: iconst_1
      94: istore_2
      95: goto          134
      98: aload         4
     100: invokeinterface #25,  1           // InterfaceMethod java/util/Deque.poll:()Ljava/lang/Object;
     105: pop
     106: aload         4
     108: aload_1
     109: invokeinterface #24,  2           // InterfaceMethod java/util/Deque.offer:(Ljava/lang/Object;)Z
     114: pop
     115: iconst_1
     116: istore_2
     117: goto          134
     120: iconst_1
     121: istore_3
     122: goto          134
     125: aload         4
     127: aload_1
     128: invokeinterface #24,  2           // InterfaceMethod java/util/Deque.offer:(Ljava/lang/Object;)Z
     133: pop
     134: aload         5
     136: monitorexit
     137: goto          148
     140: astore        6
     142: aload         5
     144: monitorexit
     145: aload         6
     147: athrow
     148: iload_2
     149: ifeq          196
     152: aload_0
     153: getfield      #3                  // Field onOverflow:Lio/reactivex/rxjava3/functions/Action;
     156: ifnull        223
     159: aload_0
     160: getfield      #3                  // Field onOverflow:Lio/reactivex/rxjava3/functions/Action;
     163: invokeinterface #26,  1           // InterfaceMethod io/reactivex/rxjava3/functions/Action.run:()V
     168: goto          223
     171: astore        5
     173: aload         5
     175: invokestatic  #28                 // Method io/reactivex/rxjava3/exceptions/Exceptions.throwIfFatal:(Ljava/lang/Throwable;)V
     178: aload_0
     179: getfield      #12                 // Field upstream:Lorg/reactivestreams/Subscription;
     182: invokeinterface #29,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
     187: aload_0
     188: aload         5
     190: invokevirtual #30                 // Method onError:(Ljava/lang/Throwable;)V
     193: goto          223
     196: iload_3
     197: ifeq          219
     200: aload_0
     201: getfield      #12                 // Field upstream:Lorg/reactivestreams/Subscription;
     204: invokeinterface #29,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
     209: aload_0
     210: invokestatic  #31                 // Method io/reactivex/rxjava3/exceptions/MissingBackpressureException.createDefault:()Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;
     213: invokevirtual #30                 // Method onError:(Ljava/lang/Throwable;)V
     216: goto          223
     219: aload_0
     220: invokevirtual #32                 // Method drain:()V
     223: return
    Exception table:
       from    to  target type
          24   137   140   any
         140   145   140   any
         159   168   171   Class java/lang/Throwable

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #19                 // Field done:Z
       4: ifeq          12
       7: aload_1
       8: invokestatic  #33                 // Method io/reactivex/rxjava3/plugins/RxJavaPlugins.onError:(Ljava/lang/Throwable;)V
      11: return
      12: aload_0
      13: aload_1
      14: putfield      #34                 // Field error:Ljava/lang/Throwable;
      17: aload_0
      18: iconst_1
      19: putfield      #19                 // Field done:Z
      22: aload_0
      23: invokevirtual #32                 // Method drain:()V
      26: return

  public void onComplete();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #19                 // Field done:Z
       5: aload_0
       6: invokevirtual #32                 // Method drain:()V
       9: return

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #35                 // Method io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.validate:(J)Z
       4: ifeq          20
       7: aload_0
       8: getfield      #8                  // Field requested:Ljava/util/concurrent/atomic/AtomicLong;
      11: lload_1
      12: invokestatic  #36                 // Method io/reactivex/rxjava3/internal/util/BackpressureHelper.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J
      15: pop2
      16: aload_0
      17: invokevirtual #32                 // Method drain:()V
      20: return

  public void cancel();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #37                 // Field cancelled:Z
       5: aload_0
       6: getfield      #12                 // Field upstream:Lorg/reactivestreams/Subscription;
       9: invokeinterface #29,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      14: aload_0
      15: invokevirtual #38                 // Method getAndIncrement:()I
      18: ifne          29
      21: aload_0
      22: aload_0
      23: getfield      #11                 // Field deque:Ljava/util/Deque;
      26: invokevirtual #39                 // Method clear:(Ljava/util/Deque;)V
      29: return

  void clear(java.util.Deque<T>);
    Code:
       0: aload_1
       1: dup
       2: astore_2
       3: monitorenter
       4: aload_1
       5: invokeinterface #40,  1           // InterfaceMethod java/util/Deque.clear:()V
      10: aload_2
      11: monitorexit
      12: goto          20
      15: astore_3
      16: aload_2
      17: monitorexit
      18: aload_3
      19: athrow
      20: return
    Exception table:
       from    to  target type
           4    12    15   any
          15    18    15   any

  void drain();
    Code:
       0: aload_0
       1: invokevirtual #38                 // Method getAndIncrement:()I
       4: ifeq          8
       7: return
       8: iconst_1
       9: istore_1
      10: aload_0
      11: getfield      #11                 // Field deque:Ljava/util/Deque;
      14: astore_2
      15: aload_0
      16: getfield      #2                  // Field downstream:Lorg/reactivestreams/Subscriber;
      19: astore_3
      20: aload_0
      21: getfield      #8                  // Field requested:Ljava/util/concurrent/atomic/AtomicLong;
      24: invokevirtual #41                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
      27: lstore        4
      29: lconst_0
      30: lstore        6
      32: lload         6
      34: lload         4
      36: lcmp
      37: ifeq          165
      40: aload_0
      41: getfield      #37                 // Field cancelled:Z
      44: ifeq          53
      47: aload_0
      48: aload_2
      49: invokevirtual #39                 // Method clear:(Ljava/util/Deque;)V
      52: return
      53: aload_0
      54: getfield      #19                 // Field done:Z
      57: istore        8
      59: aload_2
      60: dup
      61: astore        10
      63: monitorenter
      64: aload_2
      65: invokeinterface #25,  1           // InterfaceMethod java/util/Deque.poll:()Ljava/lang/Object;
      70: astore        9
      72: aload         10
      74: monitorexit
      75: goto          86
      78: astore        11
      80: aload         10
      82: monitorexit
      83: aload         11
      85: athrow
      86: aload         9
      88: ifnonnull     95
      91: iconst_1
      92: goto          96
      95: iconst_0
      96: istore        10
      98: iload         8
     100: ifeq          140
     103: aload_0
     104: getfield      #34                 // Field error:Ljava/lang/Throwable;
     107: astore        11
     109: aload         11
     111: ifnull        128
     114: aload_0
     115: aload_2
     116: invokevirtual #39                 // Method clear:(Ljava/util/Deque;)V
     119: aload_3
     120: aload         11
     122: invokeinterface #42,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
     127: return
     128: iload         10
     130: ifeq          140
     133: aload_3
     134: invokeinterface #43,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
     139: return
     140: iload         10
     142: ifeq          148
     145: goto          165
     148: aload_3
     149: aload         9
     151: invokeinterface #44,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
     156: lload         6
     158: lconst_1
     159: ladd
     160: lstore        6
     162: goto          32
     165: lload         6
     167: lload         4
     169: lcmp
     170: ifne          261
     173: aload_0
     174: getfield      #37                 // Field cancelled:Z
     177: ifeq          186
     180: aload_0
     181: aload_2
     182: invokevirtual #39                 // Method clear:(Ljava/util/Deque;)V
     185: return
     186: aload_0
     187: getfield      #19                 // Field done:Z
     190: istore        8
     192: aload_2
     193: dup
     194: astore        10
     196: monitorenter
     197: aload_2
     198: invokeinterface #45,  1           // InterfaceMethod java/util/Deque.isEmpty:()Z
     203: istore        9
     205: aload         10
     207: monitorexit
     208: goto          219
     211: astore        12
     213: aload         10
     215: monitorexit
     216: aload         12
     218: athrow
     219: iload         8
     221: ifeq          261
     224: aload_0
     225: getfield      #34                 // Field error:Ljava/lang/Throwable;
     228: astore        10
     230: aload         10
     232: ifnull        249
     235: aload_0
     236: aload_2
     237: invokevirtual #39                 // Method clear:(Ljava/util/Deque;)V
     240: aload_3
     241: aload         10
     243: invokeinterface #42,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
     248: return
     249: iload         9
     251: ifeq          261
     254: aload_3
     255: invokeinterface #43,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
     260: return
     261: lload         6
     263: lconst_0
     264: lcmp
     265: ifeq          278
     268: aload_0
     269: getfield      #8                  // Field requested:Ljava/util/concurrent/atomic/AtomicLong;
     272: lload         6
     274: invokestatic  #46                 // Method io/reactivex/rxjava3/internal/util/BackpressureHelper.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J
     277: pop2
     278: aload_0
     279: iload_1
     280: ineg
     281: invokevirtual #47                 // Method addAndGet:(I)I
     284: istore_1
     285: iload_1
     286: ifne          292
     289: goto          295
     292: goto          20
     295: return
    Exception table:
       from    to  target type
          64    75    78   any
          78    83    78   any
         197   208   211   any
         211   216   211   any
}

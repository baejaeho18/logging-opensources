Compiled from "FlowableTakePublisher.java"
public final class io.reactivex.rxjava3.internal.operators.flowable.FlowableTakePublisher<T> extends io.reactivex.rxjava3.core.Flowable<T> {
  final org.reactivestreams.Publisher<T> source;

  final long limit;

  public io.reactivex.rxjava3.internal.operators.flowable.FlowableTakePublisher(org.reactivestreams.Publisher<T>, long);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method io/reactivex/rxjava3/core/Flowable."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field source:Lorg/reactivestreams/Publisher;
       9: aload_0
      10: lload_2
      11: putfield      #3                  // Field limit:J
      14: return

  protected void subscribeActual(org.reactivestreams.Subscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field source:Lorg/reactivestreams/Publisher;
       4: new           #4                  // class io/reactivex/rxjava3/internal/operators/flowable/FlowableTake$TakeSubscriber
       7: dup
       8: aload_1
       9: aload_0
      10: getfield      #3                  // Field limit:J
      13: invokespecial #5                  // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableTake$TakeSubscriber."<init>":(Lorg/reactivestreams/Subscriber;J)V
      16: invokeinterface #6,  2            // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      21: return
}

Compiled from "FlowableSamplePublisher.java"
final class io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast<T> extends io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber<T> {
  private static final long serialVersionUID;

  final java.util.concurrent.atomic.AtomicInteger wip;

  volatile boolean done;

  io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast(org.reactivestreams.Subscriber<? super T>, org.reactivestreams.Publisher<?>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #1                  // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber."<init>":(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;)V
       6: aload_0
       7: new           #2                  // class java/util/concurrent/atomic/AtomicInteger
      10: dup
      11: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      14: putfield      #4                  // Field wip:Ljava/util/concurrent/atomic/AtomicInteger;
      17: return

  void completion();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #5                  // Field done:Z
       5: aload_0
       6: getfield      #4                  // Field wip:Ljava/util/concurrent/atomic/AtomicInteger;
       9: invokevirtual #6                  // Method java/util/concurrent/atomic/AtomicInteger.getAndIncrement:()I
      12: ifne          28
      15: aload_0
      16: invokevirtual #7                  // Method emit:()V
      19: aload_0
      20: getfield      #8                  // Field downstream:Lorg/reactivestreams/Subscriber;
      23: invokeinterface #9,  1            // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      28: return

  void run();
    Code:
       0: aload_0
       1: getfield      #4                  // Field wip:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #6                  // Method java/util/concurrent/atomic/AtomicInteger.getAndIncrement:()I
       7: ifne          43
      10: aload_0
      11: getfield      #5                  // Field done:Z
      14: istore_1
      15: aload_0
      16: invokevirtual #7                  // Method emit:()V
      19: iload_1
      20: ifeq          33
      23: aload_0
      24: getfield      #8                  // Field downstream:Lorg/reactivestreams/Subscriber;
      27: invokeinterface #9,  1            // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      32: return
      33: aload_0
      34: getfield      #4                  // Field wip:Ljava/util/concurrent/atomic/AtomicInteger;
      37: invokevirtual #10                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      40: ifne          10
      43: return
}

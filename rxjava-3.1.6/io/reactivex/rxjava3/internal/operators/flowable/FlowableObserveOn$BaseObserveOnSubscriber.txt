Compiled from "FlowableObserveOn.java"
abstract class io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber<T> extends io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription<T> implements io.reactivex.rxjava3.core.FlowableSubscriber<T>, java.lang.Runnable {
  private static final long serialVersionUID;

  final io.reactivex.rxjava3.core.Scheduler$Worker worker;

  final boolean delayError;

  final int prefetch;

  final int limit;

  final java.util.concurrent.atomic.AtomicLong requested;

  org.reactivestreams.Subscription upstream;

  io.reactivex.rxjava3.operators.SimpleQueue<T> queue;

  volatile boolean cancelled;

  volatile boolean done;

  java.lang.Throwable error;

  int sourceMode;

  long produced;

  boolean outputFused;

  io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber(io.reactivex.rxjava3.core.Scheduler$Worker, boolean, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method io/reactivex/rxjava3/internal/subscriptions/BasicIntQueueSubscription."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field worker:Lio/reactivex/rxjava3/core/Scheduler$Worker;
       9: aload_0
      10: iload_2
      11: putfield      #3                  // Field delayError:Z
      14: aload_0
      15: iload_3
      16: putfield      #4                  // Field prefetch:I
      19: aload_0
      20: new           #5                  // class java/util/concurrent/atomic/AtomicLong
      23: dup
      24: invokespecial #6                  // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
      27: putfield      #7                  // Field requested:Ljava/util/concurrent/atomic/AtomicLong;
      30: aload_0
      31: iload_3
      32: iload_3
      33: iconst_2
      34: ishr
      35: isub
      36: putfield      #8                  // Field limit:I
      39: return

  public final void onNext(T);
    Code:
       0: aload_0
       1: getfield      #9                  // Field done:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: getfield      #10                 // Field sourceMode:I
      12: iconst_2
      13: if_icmpne     21
      16: aload_0
      17: invokevirtual #12                 // Method trySchedule:()V
      20: return
      21: aload_0
      22: getfield      #13                 // Field queue:Lio/reactivex/rxjava3/operators/SimpleQueue;
      25: aload_1
      26: invokeinterface #14,  2           // InterfaceMethod io/reactivex/rxjava3/operators/SimpleQueue.offer:(Ljava/lang/Object;)Z
      31: ifne          59
      34: aload_0
      35: getfield      #15                 // Field upstream:Lorg/reactivestreams/Subscription;
      38: invokeinterface #16,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      43: aload_0
      44: new           #17                 // class io/reactivex/rxjava3/exceptions/QueueOverflowException
      47: dup
      48: invokespecial #18                 // Method io/reactivex/rxjava3/exceptions/QueueOverflowException."<init>":()V
      51: putfield      #19                 // Field error:Ljava/lang/Throwable;
      54: aload_0
      55: iconst_1
      56: putfield      #9                  // Field done:Z
      59: aload_0
      60: invokevirtual #12                 // Method trySchedule:()V
      63: return

  public final void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #9                  // Field done:Z
       4: ifeq          12
       7: aload_1
       8: invokestatic  #20                 // Method io/reactivex/rxjava3/plugins/RxJavaPlugins.onError:(Ljava/lang/Throwable;)V
      11: return
      12: aload_0
      13: aload_1
      14: putfield      #19                 // Field error:Ljava/lang/Throwable;
      17: aload_0
      18: iconst_1
      19: putfield      #9                  // Field done:Z
      22: aload_0
      23: invokevirtual #12                 // Method trySchedule:()V
      26: return

  public final void onComplete();
    Code:
       0: aload_0
       1: getfield      #9                  // Field done:Z
       4: ifne          16
       7: aload_0
       8: iconst_1
       9: putfield      #9                  // Field done:Z
      12: aload_0
      13: invokevirtual #12                 // Method trySchedule:()V
      16: return

  public final void request(long);
    Code:
       0: lload_1
       1: invokestatic  #21                 // Method io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.validate:(J)Z
       4: ifeq          20
       7: aload_0
       8: getfield      #7                  // Field requested:Ljava/util/concurrent/atomic/AtomicLong;
      11: lload_1
      12: invokestatic  #22                 // Method io/reactivex/rxjava3/internal/util/BackpressureHelper.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J
      15: pop2
      16: aload_0
      17: invokevirtual #12                 // Method trySchedule:()V
      20: return

  public final void cancel();
    Code:
       0: aload_0
       1: getfield      #23                 // Field cancelled:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #23                 // Field cancelled:Z
      13: aload_0
      14: getfield      #15                 // Field upstream:Lorg/reactivestreams/Subscription;
      17: invokeinterface #16,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      22: aload_0
      23: getfield      #2                  // Field worker:Lio/reactivex/rxjava3/core/Scheduler$Worker;
      26: invokevirtual #24                 // Method io/reactivex/rxjava3/core/Scheduler$Worker.dispose:()V
      29: aload_0
      30: getfield      #25                 // Field outputFused:Z
      33: ifne          52
      36: aload_0
      37: invokevirtual #26                 // Method getAndIncrement:()I
      40: ifne          52
      43: aload_0
      44: getfield      #13                 // Field queue:Lio/reactivex/rxjava3/operators/SimpleQueue;
      47: invokeinterface #27,  1           // InterfaceMethod io/reactivex/rxjava3/operators/SimpleQueue.clear:()V
      52: return

  final void trySchedule();
    Code:
       0: aload_0
       1: invokevirtual #26                 // Method getAndIncrement:()I
       4: ifeq          8
       7: return
       8: aload_0
       9: getfield      #2                  // Field worker:Lio/reactivex/rxjava3/core/Scheduler$Worker;
      12: aload_0
      13: invokevirtual #28                 // Method io/reactivex/rxjava3/core/Scheduler$Worker.schedule:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;
      16: pop
      17: return

  public final void run();
    Code:
       0: aload_0
       1: getfield      #25                 // Field outputFused:Z
       4: ifeq          14
       7: aload_0
       8: invokevirtual #29                 // Method runBackfused:()V
      11: goto          33
      14: aload_0
      15: getfield      #10                 // Field sourceMode:I
      18: iconst_1
      19: if_icmpne     29
      22: aload_0
      23: invokevirtual #30                 // Method runSync:()V
      26: goto          33
      29: aload_0
      30: invokevirtual #31                 // Method runAsync:()V
      33: return

  abstract void runBackfused();

  abstract void runSync();

  abstract void runAsync();

  final boolean checkTerminated(boolean, boolean, org.reactivestreams.Subscriber<?>);
    Code:
       0: aload_0
       1: getfield      #23                 // Field cancelled:Z
       4: ifeq          13
       7: aload_0
       8: invokevirtual #32                 // Method clear:()V
      11: iconst_1
      12: ireturn
      13: iload_1
      14: ifeq          131
      17: aload_0
      18: getfield      #3                  // Field delayError:Z
      21: ifeq          70
      24: iload_2
      25: ifeq          131
      28: aload_0
      29: iconst_1
      30: putfield      #23                 // Field cancelled:Z
      33: aload_0
      34: getfield      #19                 // Field error:Ljava/lang/Throwable;
      37: astore        4
      39: aload         4
      41: ifnull        55
      44: aload_3
      45: aload         4
      47: invokeinterface #33,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      52: goto          61
      55: aload_3
      56: invokeinterface #34,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      61: aload_0
      62: getfield      #2                  // Field worker:Lio/reactivex/rxjava3/core/Scheduler$Worker;
      65: invokevirtual #24                 // Method io/reactivex/rxjava3/core/Scheduler$Worker.dispose:()V
      68: iconst_1
      69: ireturn
      70: aload_0
      71: getfield      #19                 // Field error:Ljava/lang/Throwable;
      74: astore        4
      76: aload         4
      78: ifnull        107
      81: aload_0
      82: iconst_1
      83: putfield      #23                 // Field cancelled:Z
      86: aload_0
      87: invokevirtual #32                 // Method clear:()V
      90: aload_3
      91: aload         4
      93: invokeinterface #33,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      98: aload_0
      99: getfield      #2                  // Field worker:Lio/reactivex/rxjava3/core/Scheduler$Worker;
     102: invokevirtual #24                 // Method io/reactivex/rxjava3/core/Scheduler$Worker.dispose:()V
     105: iconst_1
     106: ireturn
     107: iload_2
     108: ifeq          131
     111: aload_0
     112: iconst_1
     113: putfield      #23                 // Field cancelled:Z
     116: aload_3
     117: invokeinterface #34,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
     122: aload_0
     123: getfield      #2                  // Field worker:Lio/reactivex/rxjava3/core/Scheduler$Worker;
     126: invokevirtual #24                 // Method io/reactivex/rxjava3/core/Scheduler$Worker.dispose:()V
     129: iconst_1
     130: ireturn
     131: iconst_0
     132: ireturn

  public final int requestFusion(int);
    Code:
       0: iload_1
       1: iconst_2
       2: iand
       3: ifeq          13
       6: aload_0
       7: iconst_1
       8: putfield      #25                 // Field outputFused:Z
      11: iconst_2
      12: ireturn
      13: iconst_0
      14: ireturn

  public final void clear();
    Code:
       0: aload_0
       1: getfield      #13                 // Field queue:Lio/reactivex/rxjava3/operators/SimpleQueue;
       4: invokeinterface #27,  1           // InterfaceMethod io/reactivex/rxjava3/operators/SimpleQueue.clear:()V
       9: return

  public final boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #13                 // Field queue:Lio/reactivex/rxjava3/operators/SimpleQueue;
       4: invokeinterface #35,  1           // InterfaceMethod io/reactivex/rxjava3/operators/SimpleQueue.isEmpty:()Z
       9: ireturn
}

Compiled from "FlowableCache.java"
final class io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$CacheSubscription<T> extends java.util.concurrent.atomic.AtomicInteger implements org.reactivestreams.Subscription {
  private static final long serialVersionUID;

  final org.reactivestreams.Subscriber<? super T> downstream;

  final io.reactivex.rxjava3.internal.operators.flowable.FlowableCache<T> parent;

  final java.util.concurrent.atomic.AtomicLong requested;

  io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$Node<T> node;

  int offset;

  long index;

  io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$CacheSubscription(org.reactivestreams.Subscriber<? super T>, io.reactivex.rxjava3.internal.operators.flowable.FlowableCache<T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field downstream:Lorg/reactivestreams/Subscriber;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field parent:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;
      14: aload_0
      15: aload_2
      16: getfield      #4                  // Field io/reactivex/rxjava3/internal/operators/flowable/FlowableCache.head:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$Node;
      19: putfield      #5                  // Field node:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$Node;
      22: aload_0
      23: new           #6                  // class java/util/concurrent/atomic/AtomicLong
      26: dup
      27: invokespecial #7                  // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
      30: putfield      #8                  // Field requested:Ljava/util/concurrent/atomic/AtomicLong;
      33: return

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #9                  // Method io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.validate:(J)Z
       4: ifeq          24
       7: aload_0
       8: getfield      #8                  // Field requested:Ljava/util/concurrent/atomic/AtomicLong;
      11: lload_1
      12: invokestatic  #10                 // Method io/reactivex/rxjava3/internal/util/BackpressureHelper.addCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J
      15: pop2
      16: aload_0
      17: getfield      #3                  // Field parent:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;
      20: aload_0
      21: invokevirtual #11                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableCache.replay:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription;)V
      24: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #8                  // Field requested:Ljava/util/concurrent/atomic/AtomicLong;
       4: ldc2_w        #13                 // long -9223372036854775808l
       7: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicLong.getAndSet:(J)J
      10: ldc2_w        #13                 // long -9223372036854775808l
      13: lcmp
      14: ifeq          25
      17: aload_0
      18: getfield      #3                  // Field parent:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;
      21: aload_0
      22: invokevirtual #16                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableCache.remove:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription;)V
      25: return
}

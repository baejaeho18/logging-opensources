Compiled from "FlowableInterval.java"
final class io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval$IntervalSubscriber extends java.util.concurrent.atomic.AtomicLong implements org.reactivestreams.Subscription,java.lang.Runnable {
  private static final long serialVersionUID;

  final org.reactivestreams.Subscriber<? super java.lang.Long> downstream;

  long count;

  final java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> resource;

  io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval$IntervalSubscriber(org.reactivestreams.Subscriber<? super java.lang.Long>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicReference
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      12: putfield      #4                  // Field resource:Ljava/util/concurrent/atomic/AtomicReference;
      15: aload_0
      16: aload_1
      17: putfield      #5                  // Field downstream:Lorg/reactivestreams/Subscriber;
      20: return

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #6                  // Method io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.validate:(J)Z
       4: ifeq          13
       7: aload_0
       8: lload_1
       9: invokestatic  #7                  // Method io/reactivex/rxjava3/internal/util/BackpressureHelper.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J
      12: pop2
      13: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #4                  // Field resource:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokestatic  #8                  // Method io/reactivex/rxjava3/internal/disposables/DisposableHelper.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z
       7: pop
       8: return

  public void run();
    Code:
       0: aload_0
       1: getfield      #4                  // Field resource:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: getstatic     #10                 // Field io/reactivex/rxjava3/internal/disposables/DisposableHelper.DISPOSED:Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;
      10: if_acmpeq     107
      13: aload_0
      14: invokevirtual #11                 // Method get:()J
      17: lstore_1
      18: lload_1
      19: lconst_0
      20: lcmp
      21: ifeq          56
      24: aload_0
      25: getfield      #5                  // Field downstream:Lorg/reactivestreams/Subscriber;
      28: aload_0
      29: dup
      30: getfield      #12                 // Field count:J
      33: dup2_x1
      34: lconst_1
      35: ladd
      36: putfield      #12                 // Field count:J
      39: invokestatic  #13                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      42: invokeinterface #14,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
      47: aload_0
      48: lconst_1
      49: invokestatic  #15                 // Method io/reactivex/rxjava3/internal/util/BackpressureHelper.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J
      52: pop2
      53: goto          107
      56: aload_0
      57: getfield      #5                  // Field downstream:Lorg/reactivestreams/Subscriber;
      60: new           #16                 // class io/reactivex/rxjava3/exceptions/MissingBackpressureException
      63: dup
      64: new           #17                 // class java/lang/StringBuilder
      67: dup
      68: invokespecial #18                 // Method java/lang/StringBuilder."<init>":()V
      71: ldc           #19                 // String Could not emit value
      73: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      76: aload_0
      77: getfield      #12                 // Field count:J
      80: invokevirtual #21                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      83: ldc           #22                 // String  due to lack of requests
      85: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      88: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      91: invokespecial #24                 // Method io/reactivex/rxjava3/exceptions/MissingBackpressureException."<init>":(Ljava/lang/String;)V
      94: invokeinterface #25,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      99: aload_0
     100: getfield      #4                  // Field resource:Ljava/util/concurrent/atomic/AtomicReference;
     103: invokestatic  #8                  // Method io/reactivex/rxjava3/internal/disposables/DisposableHelper.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z
     106: pop
     107: return

  public void setResource(io.reactivex.rxjava3.disposables.Disposable);
    Code:
       0: aload_0
       1: getfield      #4                  // Field resource:Ljava/util/concurrent/atomic/AtomicReference;
       4: aload_1
       5: invokestatic  #26                 // Method io/reactivex/rxjava3/internal/disposables/DisposableHelper.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z
       8: pop
       9: return
}

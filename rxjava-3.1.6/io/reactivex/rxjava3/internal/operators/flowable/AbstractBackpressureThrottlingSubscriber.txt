Compiled from "AbstractBackpressureThrottlingSubscriber.java"
abstract class io.reactivex.rxjava3.internal.operators.flowable.AbstractBackpressureThrottlingSubscriber<T, R> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.core.FlowableSubscriber<T>, org.reactivestreams.Subscription {
  private static final long serialVersionUID;

  final org.reactivestreams.Subscriber<? super R> downstream;

  org.reactivestreams.Subscription upstream;

  volatile boolean done;

  java.lang.Throwable error;

  volatile boolean cancelled;

  final java.util.concurrent.atomic.AtomicLong requested;

  final java.util.concurrent.atomic.AtomicReference<R> current;

  io.reactivex.rxjava3.internal.operators.flowable.AbstractBackpressureThrottlingSubscriber(org.reactivestreams.Subscriber<? super R>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicLong
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
      12: putfield      #4                  // Field requested:Ljava/util/concurrent/atomic/AtomicLong;
      15: aload_0
      16: new           #5                  // class java/util/concurrent/atomic/AtomicReference
      19: dup
      20: invokespecial #6                  // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      23: putfield      #7                  // Field current:Ljava/util/concurrent/atomic/AtomicReference;
      26: aload_0
      27: aload_1
      28: putfield      #8                  // Field downstream:Lorg/reactivestreams/Subscriber;
      31: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #9                  // Field upstream:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #10                 // Method io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          35
      11: aload_0
      12: aload_1
      13: putfield      #9                  // Field upstream:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: getfield      #8                  // Field downstream:Lorg/reactivestreams/Subscriber;
      20: aload_0
      21: invokeinterface #11,  2           // InterfaceMethod org/reactivestreams/Subscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      26: aload_1
      27: ldc2_w        #13                 // long 9223372036854775807l
      30: invokeinterface #15,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      35: return

  public abstract void onNext(T);

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #16                 // Field error:Ljava/lang/Throwable;
       5: aload_0
       6: iconst_1
       7: putfield      #17                 // Field done:Z
      10: aload_0
      11: invokevirtual #18                 // Method drain:()V
      14: return

  public void onComplete();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #17                 // Field done:Z
       5: aload_0
       6: invokevirtual #18                 // Method drain:()V
       9: return

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #19                 // Method io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.validate:(J)Z
       4: ifeq          20
       7: aload_0
       8: getfield      #4                  // Field requested:Ljava/util/concurrent/atomic/AtomicLong;
      11: lload_1
      12: invokestatic  #20                 // Method io/reactivex/rxjava3/internal/util/BackpressureHelper.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J
      15: pop2
      16: aload_0
      17: invokevirtual #18                 // Method drain:()V
      20: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #21                 // Field cancelled:Z
       4: ifne          36
       7: aload_0
       8: iconst_1
       9: putfield      #21                 // Field cancelled:Z
      12: aload_0
      13: getfield      #9                  // Field upstream:Lorg/reactivestreams/Subscription;
      16: invokeinterface #22,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      21: aload_0
      22: invokevirtual #23                 // Method getAndIncrement:()I
      25: ifne          36
      28: aload_0
      29: getfield      #7                  // Field current:Ljava/util/concurrent/atomic/AtomicReference;
      32: aconst_null
      33: invokevirtual #24                 // Method java/util/concurrent/atomic/AtomicReference.lazySet:(Ljava/lang/Object;)V
      36: return

  void drain();
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method getAndIncrement:()I
       4: ifeq          8
       7: return
       8: aload_0
       9: getfield      #8                  // Field downstream:Lorg/reactivestreams/Subscriber;
      12: astore_1
      13: iconst_1
      14: istore_2
      15: aload_0
      16: getfield      #4                  // Field requested:Ljava/util/concurrent/atomic/AtomicLong;
      19: astore_3
      20: aload_0
      21: getfield      #7                  // Field current:Ljava/util/concurrent/atomic/AtomicReference;
      24: astore        4
      26: lconst_0
      27: lstore        5
      29: lload         5
      31: aload_3
      32: invokevirtual #25                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
      35: lcmp
      36: ifeq          105
      39: aload_0
      40: getfield      #17                 // Field done:Z
      43: istore        7
      45: aload         4
      47: aconst_null
      48: invokevirtual #26                 // Method java/util/concurrent/atomic/AtomicReference.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;
      51: astore        8
      53: aload         8
      55: ifnonnull     62
      58: iconst_1
      59: goto          63
      62: iconst_0
      63: istore        9
      65: aload_0
      66: iload         7
      68: iload         9
      70: aload_1
      71: aload         4
      73: invokevirtual #27                 // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicReference;)Z
      76: ifeq          80
      79: return
      80: iload         9
      82: ifeq          88
      85: goto          105
      88: aload_1
      89: aload         8
      91: invokeinterface #28,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
      96: lload         5
      98: lconst_1
      99: ladd
     100: lstore        5
     102: goto          29
     105: lload         5
     107: aload_3
     108: invokevirtual #25                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
     111: lcmp
     112: ifne          143
     115: aload_0
     116: aload_0
     117: getfield      #17                 // Field done:Z
     120: aload         4
     122: invokevirtual #29                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
     125: ifnonnull     132
     128: iconst_1
     129: goto          133
     132: iconst_0
     133: aload_1
     134: aload         4
     136: invokevirtual #27                 // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicReference;)Z
     139: ifeq          143
     142: return
     143: lload         5
     145: lconst_0
     146: lcmp
     147: ifeq          157
     150: aload_3
     151: lload         5
     153: invokestatic  #30                 // Method io/reactivex/rxjava3/internal/util/BackpressureHelper.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J
     156: pop2
     157: aload_0
     158: iload_2
     159: ineg
     160: invokevirtual #31                 // Method addAndGet:(I)I
     163: istore_2
     164: iload_2
     165: ifne          171
     168: goto          174
     171: goto          26
     174: return

  boolean checkTerminated(boolean, boolean, org.reactivestreams.Subscriber<?>, java.util.concurrent.atomic.AtomicReference<R>);
    Code:
       0: aload_0
       1: getfield      #21                 // Field cancelled:Z
       4: ifeq          15
       7: aload         4
       9: aconst_null
      10: invokevirtual #24                 // Method java/util/concurrent/atomic/AtomicReference.lazySet:(Ljava/lang/Object;)V
      13: iconst_1
      14: ireturn
      15: iload_1
      16: ifeq          58
      19: aload_0
      20: getfield      #16                 // Field error:Ljava/lang/Throwable;
      23: astore        5
      25: aload         5
      27: ifnull        46
      30: aload         4
      32: aconst_null
      33: invokevirtual #24                 // Method java/util/concurrent/atomic/AtomicReference.lazySet:(Ljava/lang/Object;)V
      36: aload_3
      37: aload         5
      39: invokeinterface #32,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      44: iconst_1
      45: ireturn
      46: iload_2
      47: ifeq          58
      50: aload_3
      51: invokeinterface #33,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      56: iconst_1
      57: ireturn
      58: iconst_0
      59: ireturn
}

Compiled from "FlowableRepeatWhen.java"
final class io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver<T, U> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.core.FlowableSubscriber<java.lang.Object>, org.reactivestreams.Subscription {
  private static final long serialVersionUID;

  final org.reactivestreams.Publisher<T> source;

  final java.util.concurrent.atomic.AtomicReference<org.reactivestreams.Subscription> upstream;

  final java.util.concurrent.atomic.AtomicLong requested;

  io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber<T, U> subscriber;

  io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver(org.reactivestreams.Publisher<T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field source:Lorg/reactivestreams/Publisher;
       9: aload_0
      10: new           #3                  // class java/util/concurrent/atomic/AtomicReference
      13: dup
      14: invokespecial #4                  // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      17: putfield      #5                  // Field upstream:Ljava/util/concurrent/atomic/AtomicReference;
      20: aload_0
      21: new           #6                  // class java/util/concurrent/atomic/AtomicLong
      24: dup
      25: invokespecial #7                  // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
      28: putfield      #8                  // Field requested:Ljava/util/concurrent/atomic/AtomicLong;
      31: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #5                  // Field upstream:Ljava/util/concurrent/atomic/AtomicReference;
       4: aload_0
       5: getfield      #8                  // Field requested:Ljava/util/concurrent/atomic/AtomicLong;
       8: aload_1
       9: invokestatic  #9                  // Method io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z
      12: pop
      13: return

  public void onNext(java.lang.Object);
    Code:
       0: aload_0
       1: invokevirtual #10                 // Method getAndIncrement:()I
       4: ifne          44
       7: aload_0
       8: getfield      #5                  // Field upstream:Ljava/util/concurrent/atomic/AtomicReference;
      11: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      14: getstatic     #12                 // Field io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.CANCELLED:Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;
      17: if_acmpne     21
      20: return
      21: aload_0
      22: getfield      #2                  // Field source:Lorg/reactivestreams/Publisher;
      25: aload_0
      26: getfield      #13                 // Field subscriber:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatWhen$WhenSourceSubscriber;
      29: invokeinterface #14,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      34: aload_0
      35: invokevirtual #15                 // Method decrementAndGet:()I
      38: ifne          7
      41: goto          44
      44: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #13                 // Field subscriber:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatWhen$WhenSourceSubscriber;
       4: invokevirtual #16                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatWhen$WhenSourceSubscriber.cancel:()V
       7: aload_0
       8: getfield      #13                 // Field subscriber:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatWhen$WhenSourceSubscriber;
      11: getfield      #17                 // Field io/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatWhen$WhenSourceSubscriber.downstream:Lorg/reactivestreams/Subscriber;
      14: aload_1
      15: invokeinterface #18,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      20: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #13                 // Field subscriber:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatWhen$WhenSourceSubscriber;
       4: invokevirtual #16                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatWhen$WhenSourceSubscriber.cancel:()V
       7: aload_0
       8: getfield      #13                 // Field subscriber:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatWhen$WhenSourceSubscriber;
      11: getfield      #17                 // Field io/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatWhen$WhenSourceSubscriber.downstream:Lorg/reactivestreams/Subscriber;
      14: invokeinterface #19,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      19: return

  public void request(long);
    Code:
       0: aload_0
       1: getfield      #5                  // Field upstream:Ljava/util/concurrent/atomic/AtomicReference;
       4: aload_0
       5: getfield      #8                  // Field requested:Ljava/util/concurrent/atomic/AtomicLong;
       8: lload_1
       9: invokestatic  #20                 // Method io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V
      12: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #5                  // Field upstream:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokestatic  #21                 // Method io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z
       7: pop
       8: return
}

Compiled from "FlowableFlatMapMaybe.java"
final class io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.MaybeObserver<R>, io.reactivex.rxjava3.disposables.Disposable {
  private static final long serialVersionUID;

  final io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber this$0;

  io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver(io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;
       5: aload_0
       6: invokespecial #2                  // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
       9: return

  public void onSubscribe(io.reactivex.rxjava3.disposables.Disposable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #3                  // Method io/reactivex/rxjava3/internal/disposables/DisposableHelper.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z
       5: pop
       6: return

  public void onSuccess(R);
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;
       4: aload_0
       5: aload_1
       6: invokevirtual #4                  // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber.innerSuccess:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver;Ljava/lang/Object;)V
       9: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;
       4: aload_0
       5: aload_1
       6: invokevirtual #5                  // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber.innerError:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver;Ljava/lang/Throwable;)V
       9: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;
       4: aload_0
       5: invokevirtual #6                  // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber.innerComplete:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver;)V
       8: return

  public boolean isDisposed();
    Code:
       0: aload_0
       1: invokevirtual #7                  // Method get:()Ljava/lang/Object;
       4: checkcast     #8                  // class io/reactivex/rxjava3/disposables/Disposable
       7: invokestatic  #9                  // Method io/reactivex/rxjava3/internal/disposables/DisposableHelper.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z
      10: ireturn

  public void dispose();
    Code:
       0: aload_0
       1: invokestatic  #10                 // Method io/reactivex/rxjava3/internal/disposables/DisposableHelper.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z
       4: pop
       5: return
}

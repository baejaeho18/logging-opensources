Compiled from "FlowableWindowSubscribeIntercept.java"
final class io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowSubscribeIntercept<T> extends io.reactivex.rxjava3.core.Flowable<T> {
  final io.reactivex.rxjava3.processors.FlowableProcessor<T> window;

  final java.util.concurrent.atomic.AtomicBoolean once;

  io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowSubscribeIntercept(io.reactivex.rxjava3.processors.FlowableProcessor<T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method io/reactivex/rxjava3/core/Flowable."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field window:Lio/reactivex/rxjava3/processors/FlowableProcessor;
       9: aload_0
      10: new           #3                  // class java/util/concurrent/atomic/AtomicBoolean
      13: dup
      14: invokespecial #4                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      17: putfield      #5                  // Field once:Ljava/util/concurrent/atomic/AtomicBoolean;
      20: return

  protected void subscribeActual(org.reactivestreams.Subscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field window:Lio/reactivex/rxjava3/processors/FlowableProcessor;
       4: aload_1
       5: invokevirtual #6                  // Method io/reactivex/rxjava3/processors/FlowableProcessor.subscribe:(Lorg/reactivestreams/Subscriber;)V
       8: aload_0
       9: getfield      #5                  // Field once:Ljava/util/concurrent/atomic/AtomicBoolean;
      12: iconst_1
      13: invokevirtual #7                  // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
      16: return

  boolean tryAbandon();
    Code:
       0: aload_0
       1: getfield      #5                  // Field once:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #8                  // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ifne          26
      10: aload_0
      11: getfield      #5                  // Field once:Ljava/util/concurrent/atomic/AtomicBoolean;
      14: iconst_0
      15: iconst_1
      16: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
      19: ifeq          26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: ireturn
}

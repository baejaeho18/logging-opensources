Compiled from "FlowableSequenceEqualSingle.java"
final class io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.disposables.Disposable, io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinatorHelper {
  private static final long serialVersionUID;

  final io.reactivex.rxjava3.core.SingleObserver<? super java.lang.Boolean> downstream;

  final io.reactivex.rxjava3.functions.BiPredicate<? super T, ? super T> comparer;

  final io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber<T> first;

  final io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber<T> second;

  final io.reactivex.rxjava3.internal.util.AtomicThrowable errors;

  T v1;

  T v2;

  io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator(io.reactivex.rxjava3.core.SingleObserver<? super java.lang.Boolean>, int, io.reactivex.rxjava3.functions.BiPredicate<? super T, ? super T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field downstream:Lio/reactivex/rxjava3/core/SingleObserver;
       9: aload_0
      10: aload_3
      11: putfield      #3                  // Field comparer:Lio/reactivex/rxjava3/functions/BiPredicate;
      14: aload_0
      15: new           #4                  // class io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber
      18: dup
      19: aload_0
      20: iload_2
      21: invokespecial #5                  // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber."<init>":(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinatorHelper;I)V
      24: putfield      #6                  // Field first:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
      27: aload_0
      28: new           #4                  // class io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber
      31: dup
      32: aload_0
      33: iload_2
      34: invokespecial #5                  // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber."<init>":(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualCoordinatorHelper;I)V
      37: putfield      #7                  // Field second:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
      40: aload_0
      41: new           #8                  // class io/reactivex/rxjava3/internal/util/AtomicThrowable
      44: dup
      45: invokespecial #9                  // Method io/reactivex/rxjava3/internal/util/AtomicThrowable."<init>":()V
      48: putfield      #10                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
      51: return

  void subscribe(org.reactivestreams.Publisher<? extends T>, org.reactivestreams.Publisher<? extends T>);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #6                  // Field first:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
       5: invokeinterface #11,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      10: aload_2
      11: aload_0
      12: getfield      #7                  // Field second:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
      15: invokeinterface #11,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      20: return

  public void dispose();
    Code:
       0: aload_0
       1: getfield      #6                  // Field first:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
       4: invokevirtual #12                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.cancel:()V
       7: aload_0
       8: getfield      #7                  // Field second:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
      11: invokevirtual #12                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.cancel:()V
      14: aload_0
      15: getfield      #10                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
      18: invokevirtual #13                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.tryTerminateAndReport:()V
      21: aload_0
      22: invokevirtual #14                 // Method getAndIncrement:()I
      25: ifne          42
      28: aload_0
      29: getfield      #6                  // Field first:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
      32: invokevirtual #15                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.clear:()V
      35: aload_0
      36: getfield      #7                  // Field second:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
      39: invokevirtual #15                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.clear:()V
      42: return

  public boolean isDisposed();
    Code:
       0: aload_0
       1: getfield      #6                  // Field first:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
       4: invokevirtual #16                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.get:()Ljava/lang/Object;
       7: getstatic     #17                 // Field io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.CANCELLED:Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;
      10: if_acmpne     17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn

  void cancelAndClear();
    Code:
       0: aload_0
       1: getfield      #6                  // Field first:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
       4: invokevirtual #12                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.cancel:()V
       7: aload_0
       8: getfield      #6                  // Field first:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
      11: invokevirtual #15                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.clear:()V
      14: aload_0
      15: getfield      #7                  // Field second:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
      18: invokevirtual #12                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.cancel:()V
      21: aload_0
      22: getfield      #7                  // Field second:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
      25: invokevirtual #15                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.clear:()V
      28: return

  public void drain();
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method getAndIncrement:()I
       4: ifeq          8
       7: return
       8: iconst_1
       9: istore_1
      10: aload_0
      11: getfield      #6                  // Field first:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
      14: getfield      #18                 // Field io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.queue:Lio/reactivex/rxjava3/operators/SimpleQueue;
      17: astore_2
      18: aload_0
      19: getfield      #7                  // Field second:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
      22: getfield      #18                 // Field io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.queue:Lio/reactivex/rxjava3/operators/SimpleQueue;
      25: astore_3
      26: aload_2
      27: ifnull        436
      30: aload_3
      31: ifnull        436
      34: aload_0
      35: invokevirtual #19                 // Method isDisposed:()Z
      38: ifeq          56
      41: aload_0
      42: getfield      #6                  // Field first:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
      45: invokevirtual #15                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.clear:()V
      48: aload_0
      49: getfield      #7                  // Field second:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
      52: invokevirtual #15                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.clear:()V
      55: return
      56: aload_0
      57: getfield      #10                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
      60: invokevirtual #20                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.get:()Ljava/lang/Object;
      63: checkcast     #21                 // class java/lang/Throwable
      66: astore        4
      68: aload         4
      70: ifnull        89
      73: aload_0
      74: invokevirtual #22                 // Method cancelAndClear:()V
      77: aload_0
      78: getfield      #10                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
      81: aload_0
      82: getfield      #2                  // Field downstream:Lio/reactivex/rxjava3/core/SingleObserver;
      85: invokevirtual #23                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/SingleObserver;)V
      88: return
      89: aload_0
      90: getfield      #6                  // Field first:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
      93: getfield      #24                 // Field io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.done:Z
      96: istore        5
      98: aload_0
      99: getfield      #25                 // Field v1:Ljava/lang/Object;
     102: astore        6
     104: aload         6
     106: ifnonnull     159
     109: aload_2
     110: invokeinterface #26,  1           // InterfaceMethod io/reactivex/rxjava3/operators/SimpleQueue.poll:()Ljava/lang/Object;
     115: astore        6
     117: goto          153
     120: astore        7
     122: aload         7
     124: invokestatic  #27                 // Method io/reactivex/rxjava3/exceptions/Exceptions.throwIfFatal:(Ljava/lang/Throwable;)V
     127: aload_0
     128: invokevirtual #22                 // Method cancelAndClear:()V
     131: aload_0
     132: getfield      #10                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
     135: aload         7
     137: invokevirtual #28                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z
     140: pop
     141: aload_0
     142: getfield      #10                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
     145: aload_0
     146: getfield      #2                  // Field downstream:Lio/reactivex/rxjava3/core/SingleObserver;
     149: invokevirtual #23                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/SingleObserver;)V
     152: return
     153: aload_0
     154: aload         6
     156: putfield      #25                 // Field v1:Ljava/lang/Object;
     159: aload         6
     161: ifnonnull     168
     164: iconst_1
     165: goto          169
     168: iconst_0
     169: istore        7
     171: aload_0
     172: getfield      #7                  // Field second:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
     175: getfield      #24                 // Field io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.done:Z
     178: istore        8
     180: aload_0
     181: getfield      #29                 // Field v2:Ljava/lang/Object;
     184: astore        9
     186: aload         9
     188: ifnonnull     241
     191: aload_3
     192: invokeinterface #26,  1           // InterfaceMethod io/reactivex/rxjava3/operators/SimpleQueue.poll:()Ljava/lang/Object;
     197: astore        9
     199: goto          235
     202: astore        10
     204: aload         10
     206: invokestatic  #27                 // Method io/reactivex/rxjava3/exceptions/Exceptions.throwIfFatal:(Ljava/lang/Throwable;)V
     209: aload_0
     210: invokevirtual #22                 // Method cancelAndClear:()V
     213: aload_0
     214: getfield      #10                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
     217: aload         10
     219: invokevirtual #28                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z
     222: pop
     223: aload_0
     224: getfield      #10                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
     227: aload_0
     228: getfield      #2                  // Field downstream:Lio/reactivex/rxjava3/core/SingleObserver;
     231: invokevirtual #23                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/SingleObserver;)V
     234: return
     235: aload_0
     236: aload         9
     238: putfield      #29                 // Field v2:Ljava/lang/Object;
     241: aload         9
     243: ifnonnull     250
     246: iconst_1
     247: goto          251
     250: iconst_0
     251: istore        10
     253: iload         5
     255: ifeq          287
     258: iload         8
     260: ifeq          287
     263: iload         7
     265: ifeq          287
     268: iload         10
     270: ifeq          287
     273: aload_0
     274: getfield      #2                  // Field downstream:Lio/reactivex/rxjava3/core/SingleObserver;
     277: iconst_1
     278: invokestatic  #30                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     281: invokeinterface #31,  2           // InterfaceMethod io/reactivex/rxjava3/core/SingleObserver.onSuccess:(Ljava/lang/Object;)V
     286: return
     287: iload         5
     289: ifeq          322
     292: iload         8
     294: ifeq          322
     297: iload         7
     299: iload         10
     301: if_icmpeq     322
     304: aload_0
     305: invokevirtual #22                 // Method cancelAndClear:()V
     308: aload_0
     309: getfield      #2                  // Field downstream:Lio/reactivex/rxjava3/core/SingleObserver;
     312: iconst_0
     313: invokestatic  #30                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     316: invokeinterface #31,  2           // InterfaceMethod io/reactivex/rxjava3/core/SingleObserver.onSuccess:(Ljava/lang/Object;)V
     321: return
     322: iload         7
     324: ifne          491
     327: iload         10
     329: ifeq          335
     332: goto          491
     335: aload_0
     336: getfield      #3                  // Field comparer:Lio/reactivex/rxjava3/functions/BiPredicate;
     339: aload         6
     341: aload         9
     343: invokeinterface #32,  3           // InterfaceMethod io/reactivex/rxjava3/functions/BiPredicate.test:(Ljava/lang/Object;Ljava/lang/Object;)Z
     348: istore        11
     350: goto          386
     353: astore        12
     355: aload         12
     357: invokestatic  #27                 // Method io/reactivex/rxjava3/exceptions/Exceptions.throwIfFatal:(Ljava/lang/Throwable;)V
     360: aload_0
     361: invokevirtual #22                 // Method cancelAndClear:()V
     364: aload_0
     365: getfield      #10                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
     368: aload         12
     370: invokevirtual #28                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z
     373: pop
     374: aload_0
     375: getfield      #10                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
     378: aload_0
     379: getfield      #2                  // Field downstream:Lio/reactivex/rxjava3/core/SingleObserver;
     382: invokevirtual #23                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/SingleObserver;)V
     385: return
     386: iload         11
     388: ifne          409
     391: aload_0
     392: invokevirtual #22                 // Method cancelAndClear:()V
     395: aload_0
     396: getfield      #2                  // Field downstream:Lio/reactivex/rxjava3/core/SingleObserver;
     399: iconst_0
     400: invokestatic  #30                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     403: invokeinterface #31,  2           // InterfaceMethod io/reactivex/rxjava3/core/SingleObserver.onSuccess:(Ljava/lang/Object;)V
     408: return
     409: aload_0
     410: aconst_null
     411: putfield      #25                 // Field v1:Ljava/lang/Object;
     414: aload_0
     415: aconst_null
     416: putfield      #29                 // Field v2:Ljava/lang/Object;
     419: aload_0
     420: getfield      #6                  // Field first:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
     423: invokevirtual #33                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.request:()V
     426: aload_0
     427: getfield      #7                  // Field second:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
     430: invokevirtual #33                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.request:()V
     433: goto          34
     436: aload_0
     437: invokevirtual #19                 // Method isDisposed:()Z
     440: ifeq          458
     443: aload_0
     444: getfield      #6                  // Field first:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
     447: invokevirtual #15                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.clear:()V
     450: aload_0
     451: getfield      #7                  // Field second:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;
     454: invokevirtual #15                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber.clear:()V
     457: return
     458: aload_0
     459: getfield      #10                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
     462: invokevirtual #20                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.get:()Ljava/lang/Object;
     465: checkcast     #21                 // class java/lang/Throwable
     468: astore        4
     470: aload         4
     472: ifnull        491
     475: aload_0
     476: invokevirtual #22                 // Method cancelAndClear:()V
     479: aload_0
     480: getfield      #10                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
     483: aload_0
     484: getfield      #2                  // Field downstream:Lio/reactivex/rxjava3/core/SingleObserver;
     487: invokevirtual #23                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/SingleObserver;)V
     490: return
     491: aload_0
     492: iload_1
     493: ineg
     494: invokevirtual #34                 // Method addAndGet:(I)I
     497: istore_1
     498: iload_1
     499: ifne          505
     502: goto          508
     505: goto          10
     508: return
    Exception table:
       from    to  target type
         109   117   120   Class java/lang/Throwable
         191   199   202   Class java/lang/Throwable
         335   350   353   Class java/lang/Throwable

  public void innerError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #10                 // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
       4: aload_1
       5: invokevirtual #28                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z
       8: ifeq          15
      11: aload_0
      12: invokevirtual #35                 // Method drain:()V
      15: return
}

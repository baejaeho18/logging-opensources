Compiled from "FlowableCache.java"
public final class io.reactivex.rxjava3.internal.operators.flowable.FlowableCache<T> extends io.reactivex.rxjava3.internal.operators.flowable.AbstractFlowableWithUpstream<T, T> implements io.reactivex.rxjava3.core.FlowableSubscriber<T> {
  final java.util.concurrent.atomic.AtomicBoolean once;

  final int capacityHint;

  final java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$CacheSubscription<T>[]> subscribers;

  static final io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$CacheSubscription[] EMPTY;

  static final io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$CacheSubscription[] TERMINATED;

  volatile long size;

  final io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$Node<T> head;

  io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$Node<T> tail;

  int tailOffset;

  java.lang.Throwable error;

  volatile boolean done;

  public io.reactivex.rxjava3.internal.operators.flowable.FlowableCache(io.reactivex.rxjava3.core.Flowable<T>, int);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method io/reactivex/rxjava3/internal/operators/flowable/AbstractFlowableWithUpstream."<init>":(Lio/reactivex/rxjava3/core/Flowable;)V
       5: aload_0
       6: iload_2
       7: putfield      #2                  // Field capacityHint:I
      10: aload_0
      11: new           #3                  // class java/util/concurrent/atomic/AtomicBoolean
      14: dup
      15: invokespecial #4                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      18: putfield      #5                  // Field once:Ljava/util/concurrent/atomic/AtomicBoolean;
      21: new           #6                  // class io/reactivex/rxjava3/internal/operators/flowable/FlowableCache$Node
      24: dup
      25: iload_2
      26: invokespecial #7                  // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableCache$Node."<init>":(I)V
      29: astore_3
      30: aload_0
      31: aload_3
      32: putfield      #8                  // Field head:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$Node;
      35: aload_0
      36: aload_3
      37: putfield      #9                  // Field tail:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$Node;
      40: aload_0
      41: new           #10                 // class java/util/concurrent/atomic/AtomicReference
      44: dup
      45: getstatic     #11                 // Field EMPTY:[Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription;
      48: invokespecial #12                 // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      51: putfield      #13                 // Field subscribers:Ljava/util/concurrent/atomic/AtomicReference;
      54: return

  protected void subscribeActual(org.reactivestreams.Subscriber<? super T>);
    Code:
       0: new           #14                 // class io/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription
       3: dup
       4: aload_1
       5: aload_0
       6: invokespecial #15                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription."<init>":(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache;)V
       9: astore_2
      10: aload_1
      11: aload_2
      12: invokeinterface #16,  2           // InterfaceMethod org/reactivestreams/Subscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      17: aload_0
      18: aload_2
      19: invokevirtual #17                 // Method add:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription;)V
      22: aload_0
      23: getfield      #5                  // Field once:Ljava/util/concurrent/atomic/AtomicBoolean;
      26: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      29: ifne          55
      32: aload_0
      33: getfield      #5                  // Field once:Ljava/util/concurrent/atomic/AtomicBoolean;
      36: iconst_0
      37: iconst_1
      38: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
      41: ifeq          55
      44: aload_0
      45: getfield      #20                 // Field source:Lio/reactivex/rxjava3/core/Flowable;
      48: aload_0
      49: invokevirtual #21                 // Method io/reactivex/rxjava3/core/Flowable.subscribe:(Lio/reactivex/rxjava3/core/FlowableSubscriber;)V
      52: goto          60
      55: aload_0
      56: aload_2
      57: invokevirtual #22                 // Method replay:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription;)V
      60: return

  boolean isConnected();
    Code:
       0: aload_0
       1: getfield      #5                  // Field once:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ireturn

  boolean hasSubscribers();
    Code:
       0: aload_0
       1: getfield      #13                 // Field subscribers:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #24                 // class "[Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription;"
      10: arraylength
      11: ifeq          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  long cachedEventCount();
    Code:
       0: aload_0
       1: getfield      #25                 // Field size:J
       4: lreturn

  void add(io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$CacheSubscription<T>);
    Code:
       0: aload_0
       1: getfield      #13                 // Field subscribers:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #24                 // class "[Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription;"
      10: astore_2
      11: aload_2
      12: getstatic     #26                 // Field TERMINATED:[Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription;
      15: if_acmpne     19
      18: return
      19: aload_2
      20: arraylength
      21: istore_3
      22: iload_3
      23: iconst_1
      24: iadd
      25: anewarray     #14                 // class io/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription
      28: astore        4
      30: aload_2
      31: iconst_0
      32: aload         4
      34: iconst_0
      35: iload_3
      36: invokestatic  #27                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      39: aload         4
      41: iload_3
      42: aload_1
      43: aastore
      44: aload_0
      45: getfield      #13                 // Field subscribers:Ljava/util/concurrent/atomic/AtomicReference;
      48: aload_2
      49: aload         4
      51: invokevirtual #28                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      54: ifeq          58
      57: return
      58: goto          0

  void remove(io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$CacheSubscription<T>);
    Code:
       0: aload_0
       1: getfield      #13                 // Field subscribers:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #24                 // class "[Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription;"
      10: astore_2
      11: aload_2
      12: arraylength
      13: istore_3
      14: iload_3
      15: ifne          19
      18: return
      19: iconst_m1
      20: istore        4
      22: iconst_0
      23: istore        5
      25: iload         5
      27: iload_3
      28: if_icmpge     52
      31: aload_2
      32: iload         5
      34: aaload
      35: aload_1
      36: if_acmpne     46
      39: iload         5
      41: istore        4
      43: goto          52
      46: iinc          5, 1
      49: goto          25
      52: iload         4
      54: ifge          58
      57: return
      58: iload_3
      59: iconst_1
      60: if_icmpne     71
      63: getstatic     #11                 // Field EMPTY:[Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription;
      66: astore        5
      68: goto          107
      71: iload_3
      72: iconst_1
      73: isub
      74: anewarray     #14                 // class io/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription
      77: astore        5
      79: aload_2
      80: iconst_0
      81: aload         5
      83: iconst_0
      84: iload         4
      86: invokestatic  #27                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      89: aload_2
      90: iload         4
      92: iconst_1
      93: iadd
      94: aload         5
      96: iload         4
      98: iload_3
      99: iload         4
     101: isub
     102: iconst_1
     103: isub
     104: invokestatic  #27                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     107: aload_0
     108: getfield      #13                 // Field subscribers:Ljava/util/concurrent/atomic/AtomicReference;
     111: aload_2
     112: aload         5
     114: invokevirtual #28                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
     117: ifeq          121
     120: return
     121: goto          0

  void replay(io.reactivex.rxjava3.internal.operators.flowable.FlowableCache$CacheSubscription<T>);
    Code:
       0: aload_1
       1: invokevirtual #29                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription.getAndIncrement:()I
       4: ifeq          8
       7: return
       8: iconst_1
       9: istore_2
      10: aload_1
      11: getfield      #30                 // Field io/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription.index:J
      14: lstore_3
      15: aload_1
      16: getfield      #31                 // Field io/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription.offset:I
      19: istore        5
      21: aload_1
      22: getfield      #32                 // Field io/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription.node:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$Node;
      25: astore        6
      27: aload_1
      28: getfield      #33                 // Field io/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription.requested:Ljava/util/concurrent/atomic/AtomicLong;
      31: astore        7
      33: aload_1
      34: getfield      #34                 // Field io/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription.downstream:Lorg/reactivestreams/Subscriber;
      37: astore        8
      39: aload_0
      40: getfield      #2                  // Field capacityHint:I
      43: istore        9
      45: aload_0
      46: getfield      #35                 // Field done:Z
      49: istore        10
      51: aload_0
      52: getfield      #25                 // Field size:J
      55: lload_3
      56: lcmp
      57: ifne          64
      60: iconst_1
      61: goto          65
      64: iconst_0
      65: istore        11
      67: iload         10
      69: ifeq          113
      72: iload         11
      74: ifeq          113
      77: aload_1
      78: aconst_null
      79: putfield      #32                 // Field io/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription.node:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$Node;
      82: aload_0
      83: getfield      #36                 // Field error:Ljava/lang/Throwable;
      86: astore        12
      88: aload         12
      90: ifnull        105
      93: aload         8
      95: aload         12
      97: invokeinterface #37,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
     102: goto          112
     105: aload         8
     107: invokeinterface #38,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
     112: return
     113: iload         11
     115: ifne          189
     118: aload         7
     120: invokevirtual #39                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
     123: lstore        12
     125: lload         12
     127: ldc2_w        #41                 // long -9223372036854775808l
     130: lcmp
     131: ifne          140
     134: aload_1
     135: aconst_null
     136: putfield      #32                 // Field io/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription.node:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$Node;
     139: return
     140: lload         12
     142: lload_3
     143: lcmp
     144: ifeq          189
     147: iload         5
     149: iload         9
     151: if_icmpne     164
     154: aload         6
     156: getfield      #43                 // Field io/reactivex/rxjava3/internal/operators/flowable/FlowableCache$Node.next:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$Node;
     159: astore        6
     161: iconst_0
     162: istore        5
     164: aload         8
     166: aload         6
     168: getfield      #44                 // Field io/reactivex/rxjava3/internal/operators/flowable/FlowableCache$Node.values:[Ljava/lang/Object;
     171: iload         5
     173: aaload
     174: invokeinterface #45,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
     179: iinc          5, 1
     182: lload_3
     183: lconst_1
     184: ladd
     185: lstore_3
     186: goto          45
     189: aload_1
     190: lload_3
     191: putfield      #30                 // Field io/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription.index:J
     194: aload_1
     195: iload         5
     197: putfield      #31                 // Field io/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription.offset:I
     200: aload_1
     201: aload         6
     203: putfield      #32                 // Field io/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription.node:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$Node;
     206: aload_1
     207: iload_2
     208: ineg
     209: invokevirtual #46                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription.addAndGet:(I)I
     212: istore_2
     213: iload_2
     214: ifne          220
     217: goto          223
     220: goto          45
     223: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_1
       1: ldc2_w        #47                 // long 9223372036854775807l
       4: invokeinterface #49,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
       9: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #50                 // Field tailOffset:I
       4: istore_2
       5: iload_2
       6: aload_0
       7: getfield      #2                  // Field capacityHint:I
      10: if_icmpne     50
      13: new           #6                  // class io/reactivex/rxjava3/internal/operators/flowable/FlowableCache$Node
      16: dup
      17: iload_2
      18: invokespecial #7                  // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableCache$Node."<init>":(I)V
      21: astore_3
      22: aload_3
      23: getfield      #44                 // Field io/reactivex/rxjava3/internal/operators/flowable/FlowableCache$Node.values:[Ljava/lang/Object;
      26: iconst_0
      27: aload_1
      28: aastore
      29: aload_0
      30: iconst_1
      31: putfield      #50                 // Field tailOffset:I
      34: aload_0
      35: getfield      #9                  // Field tail:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$Node;
      38: aload_3
      39: putfield      #43                 // Field io/reactivex/rxjava3/internal/operators/flowable/FlowableCache$Node.next:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$Node;
      42: aload_0
      43: aload_3
      44: putfield      #9                  // Field tail:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$Node;
      47: goto          67
      50: aload_0
      51: getfield      #9                  // Field tail:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$Node;
      54: getfield      #44                 // Field io/reactivex/rxjava3/internal/operators/flowable/FlowableCache$Node.values:[Ljava/lang/Object;
      57: iload_2
      58: aload_1
      59: aastore
      60: aload_0
      61: iload_2
      62: iconst_1
      63: iadd
      64: putfield      #50                 // Field tailOffset:I
      67: aload_0
      68: dup
      69: getfield      #25                 // Field size:J
      72: lconst_1
      73: ladd
      74: putfield      #25                 // Field size:J
      77: aload_0
      78: getfield      #13                 // Field subscribers:Ljava/util/concurrent/atomic/AtomicReference;
      81: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      84: checkcast     #24                 // class "[Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription;"
      87: astore_3
      88: aload_3
      89: arraylength
      90: istore        4
      92: iconst_0
      93: istore        5
      95: iload         5
      97: iload         4
      99: if_icmpge     120
     102: aload_3
     103: iload         5
     105: aaload
     106: astore        6
     108: aload_0
     109: aload         6
     111: invokevirtual #22                 // Method replay:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription;)V
     114: iinc          5, 1
     117: goto          95
     120: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #35                 // Field done:Z
       4: ifeq          12
       7: aload_1
       8: invokestatic  #51                 // Method io/reactivex/rxjava3/plugins/RxJavaPlugins.onError:(Ljava/lang/Throwable;)V
      11: return
      12: aload_0
      13: aload_1
      14: putfield      #36                 // Field error:Ljava/lang/Throwable;
      17: aload_0
      18: iconst_1
      19: putfield      #35                 // Field done:Z
      22: aload_0
      23: getfield      #13                 // Field subscribers:Ljava/util/concurrent/atomic/AtomicReference;
      26: getstatic     #26                 // Field TERMINATED:[Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription;
      29: invokevirtual #52                 // Method java/util/concurrent/atomic/AtomicReference.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;
      32: checkcast     #24                 // class "[Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription;"
      35: astore_2
      36: aload_2
      37: arraylength
      38: istore_3
      39: iconst_0
      40: istore        4
      42: iload         4
      44: iload_3
      45: if_icmpge     66
      48: aload_2
      49: iload         4
      51: aaload
      52: astore        5
      54: aload_0
      55: aload         5
      57: invokevirtual #22                 // Method replay:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription;)V
      60: iinc          4, 1
      63: goto          42
      66: return

  public void onComplete();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #35                 // Field done:Z
       5: aload_0
       6: getfield      #13                 // Field subscribers:Ljava/util/concurrent/atomic/AtomicReference;
       9: getstatic     #26                 // Field TERMINATED:[Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription;
      12: invokevirtual #52                 // Method java/util/concurrent/atomic/AtomicReference.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #24                 // class "[Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription;"
      18: astore_1
      19: aload_1
      20: arraylength
      21: istore_2
      22: iconst_0
      23: istore_3
      24: iload_3
      25: iload_2
      26: if_icmpge     46
      29: aload_1
      30: iload_3
      31: aaload
      32: astore        4
      34: aload_0
      35: aload         4
      37: invokevirtual #22                 // Method replay:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription;)V
      40: iinc          3, 1
      43: goto          24
      46: return

  static {};
    Code:
       0: iconst_0
       1: anewarray     #14                 // class io/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription
       4: putstatic     #11                 // Field EMPTY:[Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription;
       7: iconst_0
       8: anewarray     #14                 // class io/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription
      11: putstatic     #26                 // Field TERMINATED:[Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCache$CacheSubscription;
      14: return
}

Compiled from "FlowableCreate.java"
final class io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$SerializedEmitter<T> extends java.util.concurrent.atomic.AtomicInteger implements io.reactivex.rxjava3.core.FlowableEmitter<T> {
  private static final long serialVersionUID;

  final io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$BaseEmitter<T> emitter;

  final io.reactivex.rxjava3.internal.util.AtomicThrowable errors;

  final io.reactivex.rxjava3.operators.SimplePlainQueue<T> queue;

  volatile boolean done;

  io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$SerializedEmitter(io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$BaseEmitter<T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field emitter:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$BaseEmitter;
       9: aload_0
      10: new           #3                  // class io/reactivex/rxjava3/internal/util/AtomicThrowable
      13: dup
      14: invokespecial #4                  // Method io/reactivex/rxjava3/internal/util/AtomicThrowable."<init>":()V
      17: putfield      #5                  // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
      20: aload_0
      21: new           #6                  // class io/reactivex/rxjava3/operators/SpscLinkedArrayQueue
      24: dup
      25: bipush        16
      27: invokespecial #7                  // Method io/reactivex/rxjava3/operators/SpscLinkedArrayQueue."<init>":(I)V
      30: putfield      #8                  // Field queue:Lio/reactivex/rxjava3/operators/SimplePlainQueue;
      33: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #2                  // Field emitter:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$BaseEmitter;
       4: invokevirtual #9                  // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$BaseEmitter.isCancelled:()Z
       7: ifne          17
      10: aload_0
      11: getfield      #10                 // Field done:Z
      14: ifeq          18
      17: return
      18: aload_1
      19: ifnonnull     32
      22: aload_0
      23: ldc           #11                 // String onNext called with a null value.
      25: invokestatic  #12                 // Method io/reactivex/rxjava3/internal/util/ExceptionHelper.createNullPointerException:(Ljava/lang/String;)Ljava/lang/NullPointerException;
      28: invokevirtual #13                 // Method onError:(Ljava/lang/Throwable;)V
      31: return
      32: aload_0
      33: invokevirtual #14                 // Method get:()I
      36: ifne          64
      39: aload_0
      40: iconst_0
      41: iconst_1
      42: invokevirtual #15                 // Method compareAndSet:(II)Z
      45: ifeq          64
      48: aload_0
      49: getfield      #2                  // Field emitter:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$BaseEmitter;
      52: aload_1
      53: invokevirtual #16                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$BaseEmitter.onNext:(Ljava/lang/Object;)V
      56: aload_0
      57: invokevirtual #17                 // Method decrementAndGet:()I
      60: ifne          101
      63: return
      64: aload_0
      65: getfield      #8                  // Field queue:Lio/reactivex/rxjava3/operators/SimplePlainQueue;
      68: astore_2
      69: aload_2
      70: dup
      71: astore_3
      72: monitorenter
      73: aload_2
      74: aload_1
      75: invokeinterface #18,  2           // InterfaceMethod io/reactivex/rxjava3/operators/SimplePlainQueue.offer:(Ljava/lang/Object;)Z
      80: pop
      81: aload_3
      82: monitorexit
      83: goto          93
      86: astore        4
      88: aload_3
      89: monitorexit
      90: aload         4
      92: athrow
      93: aload_0
      94: invokevirtual #19                 // Method getAndIncrement:()I
      97: ifeq          101
     100: return
     101: aload_0
     102: invokevirtual #20                 // Method drainLoop:()V
     105: return
    Exception table:
       from    to  target type
          73    83    86   any
          86    90    86   any

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #21                 // Method tryOnError:(Ljava/lang/Throwable;)Z
       5: ifne          12
       8: aload_1
       9: invokestatic  #22                 // Method io/reactivex/rxjava3/plugins/RxJavaPlugins.onError:(Ljava/lang/Throwable;)V
      12: return

  public boolean tryOnError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #2                  // Field emitter:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$BaseEmitter;
       4: invokevirtual #9                  // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$BaseEmitter.isCancelled:()Z
       7: ifne          17
      10: aload_0
      11: getfield      #10                 // Field done:Z
      14: ifeq          19
      17: iconst_0
      18: ireturn
      19: aload_1
      20: ifnonnull     29
      23: ldc           #23                 // String onError called with a null Throwable.
      25: invokestatic  #12                 // Method io/reactivex/rxjava3/internal/util/ExceptionHelper.createNullPointerException:(Ljava/lang/String;)Ljava/lang/NullPointerException;
      28: astore_1
      29: aload_0
      30: getfield      #5                  // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
      33: aload_1
      34: invokevirtual #24                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.tryAddThrowable:(Ljava/lang/Throwable;)Z
      37: ifeq          51
      40: aload_0
      41: iconst_1
      42: putfield      #10                 // Field done:Z
      45: aload_0
      46: invokevirtual #25                 // Method drain:()V
      49: iconst_1
      50: ireturn
      51: iconst_0
      52: ireturn

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #2                  // Field emitter:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$BaseEmitter;
       4: invokevirtual #9                  // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$BaseEmitter.isCancelled:()Z
       7: ifne          17
      10: aload_0
      11: getfield      #10                 // Field done:Z
      14: ifeq          18
      17: return
      18: aload_0
      19: iconst_1
      20: putfield      #10                 // Field done:Z
      23: aload_0
      24: invokevirtual #25                 // Method drain:()V
      27: return

  void drain();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method getAndIncrement:()I
       4: ifne          11
       7: aload_0
       8: invokevirtual #20                 // Method drainLoop:()V
      11: return

  void drainLoop();
    Code:
       0: aload_0
       1: getfield      #2                  // Field emitter:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$BaseEmitter;
       4: astore_1
       5: aload_0
       6: getfield      #8                  // Field queue:Lio/reactivex/rxjava3/operators/SimplePlainQueue;
       9: astore_2
      10: aload_0
      11: getfield      #5                  // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
      14: astore_3
      15: iconst_1
      16: istore        4
      18: aload_1
      19: invokevirtual #9                  // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$BaseEmitter.isCancelled:()Z
      22: ifeq          32
      25: aload_2
      26: invokeinterface #26,  1           // InterfaceMethod io/reactivex/rxjava3/operators/SimplePlainQueue.clear:()V
      31: return
      32: aload_3
      33: invokevirtual #27                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.get:()Ljava/lang/Object;
      36: ifnull        51
      39: aload_2
      40: invokeinterface #26,  1           // InterfaceMethod io/reactivex/rxjava3/operators/SimplePlainQueue.clear:()V
      45: aload_3
      46: aload_1
      47: invokevirtual #28                 // Method io/reactivex/rxjava3/internal/util/AtomicThrowable.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Emitter;)V
      50: return
      51: aload_0
      52: getfield      #10                 // Field done:Z
      55: istore        5
      57: aload_2
      58: invokeinterface #29,  1           // InterfaceMethod io/reactivex/rxjava3/operators/SimplePlainQueue.poll:()Ljava/lang/Object;
      63: astore        6
      65: aload         6
      67: ifnonnull     74
      70: iconst_1
      71: goto          75
      74: iconst_0
      75: istore        7
      77: iload         5
      79: ifeq          92
      82: iload         7
      84: ifeq          92
      87: aload_1
      88: invokevirtual #30                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$BaseEmitter.onComplete:()V
      91: return
      92: iload         7
      94: ifeq          100
      97: goto          109
     100: aload_1
     101: aload         6
     103: invokevirtual #16                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$BaseEmitter.onNext:(Ljava/lang/Object;)V
     106: goto          18
     109: aload_0
     110: iload         4
     112: ineg
     113: invokevirtual #31                 // Method addAndGet:(I)I
     116: istore        4
     118: iload         4
     120: ifne          18
     123: goto          126
     126: return

  public void setDisposable(io.reactivex.rxjava3.disposables.Disposable);
    Code:
       0: aload_0
       1: getfield      #2                  // Field emitter:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$BaseEmitter;
       4: aload_1
       5: invokevirtual #32                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$BaseEmitter.setDisposable:(Lio/reactivex/rxjava3/disposables/Disposable;)V
       8: return

  public void setCancellable(io.reactivex.rxjava3.functions.Cancellable);
    Code:
       0: aload_0
       1: getfield      #2                  // Field emitter:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$BaseEmitter;
       4: aload_1
       5: invokevirtual #33                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$BaseEmitter.setCancellable:(Lio/reactivex/rxjava3/functions/Cancellable;)V
       8: return

  public long requested();
    Code:
       0: aload_0
       1: getfield      #2                  // Field emitter:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$BaseEmitter;
       4: invokevirtual #34                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$BaseEmitter.requested:()J
       7: lreturn

  public boolean isCancelled();
    Code:
       0: aload_0
       1: getfield      #2                  // Field emitter:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$BaseEmitter;
       4: invokevirtual #9                  // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$BaseEmitter.isCancelled:()Z
       7: ireturn

  public io.reactivex.rxjava3.core.FlowableEmitter<T> serialize();
    Code:
       0: aload_0
       1: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #2                  // Field emitter:Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$BaseEmitter;
       4: invokevirtual #35                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$BaseEmitter.toString:()Ljava/lang/String;
       7: areturn
}

Compiled from "FlowableSequenceEqualSingle.java"
public final class io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle<T> extends io.reactivex.rxjava3.core.Single<java.lang.Boolean> implements io.reactivex.rxjava3.internal.fuseable.FuseToFlowable<java.lang.Boolean> {
  final org.reactivestreams.Publisher<? extends T> first;

  final org.reactivestreams.Publisher<? extends T> second;

  final io.reactivex.rxjava3.functions.BiPredicate<? super T, ? super T> comparer;

  final int prefetch;

  public io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle(org.reactivestreams.Publisher<? extends T>, org.reactivestreams.Publisher<? extends T>, io.reactivex.rxjava3.functions.BiPredicate<? super T, ? super T>, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method io/reactivex/rxjava3/core/Single."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field first:Lorg/reactivestreams/Publisher;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field second:Lorg/reactivestreams/Publisher;
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field comparer:Lio/reactivex/rxjava3/functions/BiPredicate;
      19: aload_0
      20: iload         4
      22: putfield      #5                  // Field prefetch:I
      25: return

  public void subscribeActual(io.reactivex.rxjava3.core.SingleObserver<? super java.lang.Boolean>);
    Code:
       0: new           #6                  // class io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator
       3: dup
       4: aload_1
       5: aload_0
       6: getfield      #5                  // Field prefetch:I
       9: aload_0
      10: getfield      #4                  // Field comparer:Lio/reactivex/rxjava3/functions/BiPredicate;
      13: invokespecial #7                  // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator."<init>":(Lio/reactivex/rxjava3/core/SingleObserver;ILio/reactivex/rxjava3/functions/BiPredicate;)V
      16: astore_2
      17: aload_1
      18: aload_2
      19: invokeinterface #8,  2            // InterfaceMethod io/reactivex/rxjava3/core/SingleObserver.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V
      24: aload_2
      25: aload_0
      26: getfield      #2                  // Field first:Lorg/reactivestreams/Publisher;
      29: aload_0
      30: getfield      #3                  // Field second:Lorg/reactivestreams/Publisher;
      33: invokevirtual #9                  // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator.subscribe:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)V
      36: return

  public io.reactivex.rxjava3.core.Flowable<java.lang.Boolean> fuseToFlowable();
    Code:
       0: new           #10                 // class io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual
       3: dup
       4: aload_0
       5: getfield      #2                  // Field first:Lorg/reactivestreams/Publisher;
       8: aload_0
       9: getfield      #3                  // Field second:Lorg/reactivestreams/Publisher;
      12: aload_0
      13: getfield      #4                  // Field comparer:Lio/reactivex/rxjava3/functions/BiPredicate;
      16: aload_0
      17: getfield      #5                  // Field prefetch:I
      20: invokespecial #11                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableSequenceEqual."<init>":(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/rxjava3/functions/BiPredicate;I)V
      23: invokestatic  #12                 // Method io/reactivex/rxjava3/plugins/RxJavaPlugins.onAssembly:(Lio/reactivex/rxjava3/core/Flowable;)Lio/reactivex/rxjava3/core/Flowable;
      26: areturn
}

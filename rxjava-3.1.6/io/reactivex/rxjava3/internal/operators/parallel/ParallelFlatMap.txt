Compiled from "ParallelFlatMap.java"
public final class io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMap<T, R> extends io.reactivex.rxjava3.parallel.ParallelFlowable<R> {
  final io.reactivex.rxjava3.parallel.ParallelFlowable<T> source;

  final io.reactivex.rxjava3.functions.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>> mapper;

  final boolean delayError;

  final int maxConcurrency;

  final int prefetch;

  public io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMap(io.reactivex.rxjava3.parallel.ParallelFlowable<T>, io.reactivex.rxjava3.functions.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>>, boolean, int, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method io/reactivex/rxjava3/parallel/ParallelFlowable."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field source:Lio/reactivex/rxjava3/parallel/ParallelFlowable;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field mapper:Lio/reactivex/rxjava3/functions/Function;
      14: aload_0
      15: iload_3
      16: putfield      #4                  // Field delayError:Z
      19: aload_0
      20: iload         4
      22: putfield      #5                  // Field maxConcurrency:I
      25: aload_0
      26: iload         5
      28: putfield      #6                  // Field prefetch:I
      31: return

  public int parallelism();
    Code:
       0: aload_0
       1: getfield      #2                  // Field source:Lio/reactivex/rxjava3/parallel/ParallelFlowable;
       4: invokevirtual #7                  // Method io/reactivex/rxjava3/parallel/ParallelFlowable.parallelism:()I
       7: ireturn

  public void subscribe(org.reactivestreams.Subscriber<? super R>[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #8                  // Method io/reactivex/rxjava3/plugins/RxJavaPlugins.onSubscribe:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;[Lorg/reactivestreams/Subscriber;)[Lorg/reactivestreams/Subscriber;
       5: astore_1
       6: aload_0
       7: aload_1
       8: invokevirtual #9                  // Method validate:([Lorg/reactivestreams/Subscriber;)Z
      11: ifne          15
      14: return
      15: aload_1
      16: arraylength
      17: istore_2
      18: iload_2
      19: anewarray     #10                 // class org/reactivestreams/Subscriber
      22: astore_3
      23: iconst_0
      24: istore        4
      26: iload         4
      28: iload_2
      29: if_icmpge     65
      32: aload_3
      33: iload         4
      35: aload_1
      36: iload         4
      38: aaload
      39: aload_0
      40: getfield      #3                  // Field mapper:Lio/reactivex/rxjava3/functions/Function;
      43: aload_0
      44: getfield      #4                  // Field delayError:Z
      47: aload_0
      48: getfield      #5                  // Field maxConcurrency:I
      51: aload_0
      52: getfield      #6                  // Field prefetch:I
      55: invokestatic  #11                 // Method io/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap.subscribe:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;ZII)Lio/reactivex/rxjava3/core/FlowableSubscriber;
      58: aastore
      59: iinc          4, 1
      62: goto          26
      65: aload_0
      66: getfield      #2                  // Field source:Lio/reactivex/rxjava3/parallel/ParallelFlowable;
      69: aload_3
      70: invokevirtual #12                 // Method io/reactivex/rxjava3/parallel/ParallelFlowable.subscribe:([Lorg/reactivestreams/Subscriber;)V
      73: return
}

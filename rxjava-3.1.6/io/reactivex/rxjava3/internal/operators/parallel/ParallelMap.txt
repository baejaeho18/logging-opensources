Compiled from "ParallelMap.java"
public final class io.reactivex.rxjava3.internal.operators.parallel.ParallelMap<T, R> extends io.reactivex.rxjava3.parallel.ParallelFlowable<R> {
  final io.reactivex.rxjava3.parallel.ParallelFlowable<T> source;

  final io.reactivex.rxjava3.functions.Function<? super T, ? extends R> mapper;

  public io.reactivex.rxjava3.internal.operators.parallel.ParallelMap(io.reactivex.rxjava3.parallel.ParallelFlowable<T>, io.reactivex.rxjava3.functions.Function<? super T, ? extends R>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method io/reactivex/rxjava3/parallel/ParallelFlowable."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field source:Lio/reactivex/rxjava3/parallel/ParallelFlowable;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field mapper:Lio/reactivex/rxjava3/functions/Function;
      14: return

  public void subscribe(org.reactivestreams.Subscriber<? super R>[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #4                  // Method io/reactivex/rxjava3/plugins/RxJavaPlugins.onSubscribe:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;[Lorg/reactivestreams/Subscriber;)[Lorg/reactivestreams/Subscriber;
       5: astore_1
       6: aload_0
       7: aload_1
       8: invokevirtual #5                  // Method validate:([Lorg/reactivestreams/Subscriber;)Z
      11: ifne          15
      14: return
      15: aload_1
      16: arraylength
      17: istore_2
      18: iload_2
      19: anewarray     #6                  // class org/reactivestreams/Subscriber
      22: astore_3
      23: iconst_0
      24: istore        4
      26: iload         4
      28: iload_2
      29: if_icmpge     92
      32: aload_1
      33: iload         4
      35: aaload
      36: astore        5
      38: aload         5
      40: instanceof    #7                  // class io/reactivex/rxjava3/operators/ConditionalSubscriber
      43: ifeq          69
      46: aload_3
      47: iload         4
      49: new           #8                  // class io/reactivex/rxjava3/internal/operators/parallel/ParallelMap$ParallelMapConditionalSubscriber
      52: dup
      53: aload         5
      55: checkcast     #7                  // class io/reactivex/rxjava3/operators/ConditionalSubscriber
      58: aload_0
      59: getfield      #3                  // Field mapper:Lio/reactivex/rxjava3/functions/Function;
      62: invokespecial #9                  // Method io/reactivex/rxjava3/internal/operators/parallel/ParallelMap$ParallelMapConditionalSubscriber."<init>":(Lio/reactivex/rxjava3/operators/ConditionalSubscriber;Lio/reactivex/rxjava3/functions/Function;)V
      65: aastore
      66: goto          86
      69: aload_3
      70: iload         4
      72: new           #10                 // class io/reactivex/rxjava3/internal/operators/parallel/ParallelMap$ParallelMapSubscriber
      75: dup
      76: aload         5
      78: aload_0
      79: getfield      #3                  // Field mapper:Lio/reactivex/rxjava3/functions/Function;
      82: invokespecial #11                 // Method io/reactivex/rxjava3/internal/operators/parallel/ParallelMap$ParallelMapSubscriber."<init>":(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;)V
      85: aastore
      86: iinc          4, 1
      89: goto          26
      92: aload_0
      93: getfield      #2                  // Field source:Lio/reactivex/rxjava3/parallel/ParallelFlowable;
      96: aload_3
      97: invokevirtual #12                 // Method io/reactivex/rxjava3/parallel/ParallelFlowable.subscribe:([Lorg/reactivestreams/Subscriber;)V
     100: return

  public int parallelism();
    Code:
       0: aload_0
       1: getfield      #2                  // Field source:Lio/reactivex/rxjava3/parallel/ParallelFlowable;
       4: invokevirtual #13                 // Method io/reactivex/rxjava3/parallel/ParallelFlowable.parallelism:()I
       7: ireturn
}

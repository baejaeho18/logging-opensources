Compiled from "ParallelJoin.java"
abstract class io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase<T> extends java.util.concurrent.atomic.AtomicInteger implements org.reactivestreams.Subscription {
  private static final long serialVersionUID;

  final org.reactivestreams.Subscriber<? super T> downstream;

  final io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber<T>[] subscribers;

  final io.reactivex.rxjava3.internal.util.AtomicThrowable errors;

  final java.util.concurrent.atomic.AtomicLong requested;

  volatile boolean cancelled;

  final java.util.concurrent.atomic.AtomicInteger done;

  io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase(org.reactivestreams.Subscriber<? super T>, int, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
       4: aload_0
       5: new           #2                  // class io/reactivex/rxjava3/internal/util/AtomicThrowable
       8: dup
       9: invokespecial #3                  // Method io/reactivex/rxjava3/internal/util/AtomicThrowable."<init>":()V
      12: putfield      #4                  // Field errors:Lio/reactivex/rxjava3/internal/util/AtomicThrowable;
      15: aload_0
      16: new           #5                  // class java/util/concurrent/atomic/AtomicLong
      19: dup
      20: invokespecial #6                  // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
      23: putfield      #7                  // Field requested:Ljava/util/concurrent/atomic/AtomicLong;
      26: aload_0
      27: new           #8                  // class java/util/concurrent/atomic/AtomicInteger
      30: dup
      31: invokespecial #1                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      34: putfield      #9                  // Field done:Ljava/util/concurrent/atomic/AtomicInteger;
      37: aload_0
      38: aload_1
      39: putfield      #10                 // Field downstream:Lorg/reactivestreams/Subscriber;
      42: iload_2
      43: anewarray     #11                 // class io/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber
      46: astore        4
      48: iconst_0
      49: istore        5
      51: iload         5
      53: iload_2
      54: if_icmpge     77
      57: aload         4
      59: iload         5
      61: new           #11                 // class io/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber
      64: dup
      65: aload_0
      66: iload_3
      67: invokespecial #12                 // Method io/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber."<init>":(Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;I)V
      70: aastore
      71: iinc          5, 1
      74: goto          51
      77: aload_0
      78: aload         4
      80: putfield      #13                 // Field subscribers:[Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;
      83: aload_0
      84: getfield      #9                  // Field done:Ljava/util/concurrent/atomic/AtomicInteger;
      87: iload_2
      88: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicInteger.lazySet:(I)V
      91: return

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #15                 // Method io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.validate:(J)Z
       4: ifeq          20
       7: aload_0
       8: getfield      #7                  // Field requested:Ljava/util/concurrent/atomic/AtomicLong;
      11: lload_1
      12: invokestatic  #16                 // Method io/reactivex/rxjava3/internal/util/BackpressureHelper.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J
      15: pop2
      16: aload_0
      17: invokevirtual #17                 // Method drain:()V
      20: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #18                 // Field cancelled:Z
       4: ifne          27
       7: aload_0
       8: iconst_1
       9: putfield      #18                 // Field cancelled:Z
      12: aload_0
      13: invokevirtual #19                 // Method cancelAll:()V
      16: aload_0
      17: invokevirtual #20                 // Method getAndIncrement:()I
      20: ifne          27
      23: aload_0
      24: invokevirtual #21                 // Method cleanup:()V
      27: return

  void cancelAll();
    Code:
       0: aload_0
       1: getfield      #13                 // Field subscribers:[Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;
       4: astore_1
       5: aload_1
       6: arraylength
       7: istore_2
       8: iconst_0
       9: istore_3
      10: iload_3
      11: iload_2
      12: if_icmpge     32
      15: aload_1
      16: iload_3
      17: aaload
      18: astore        4
      20: aload         4
      22: invokevirtual #22                 // Method io/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber.cancel:()Z
      25: pop
      26: iinc          3, 1
      29: goto          10
      32: return

  void cleanup();
    Code:
       0: aload_0
       1: getfield      #13                 // Field subscribers:[Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;
       4: astore_1
       5: aload_1
       6: arraylength
       7: istore_2
       8: iconst_0
       9: istore_3
      10: iload_3
      11: iload_2
      12: if_icmpge     32
      15: aload_1
      16: iload_3
      17: aaload
      18: astore        4
      20: aload         4
      22: aconst_null
      23: putfield      #23                 // Field io/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber.queue:Lio/reactivex/rxjava3/operators/SimplePlainQueue;
      26: iinc          3, 1
      29: goto          10
      32: return

  abstract void onNext(io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber<T>, T);

  abstract void onError(java.lang.Throwable);

  abstract void onComplete();

  abstract void drain();
}

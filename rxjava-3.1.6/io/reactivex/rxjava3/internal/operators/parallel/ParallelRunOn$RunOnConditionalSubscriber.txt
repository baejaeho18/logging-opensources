Compiled from "ParallelRunOn.java"
final class io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber<T> extends io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber<T> {
  private static final long serialVersionUID;

  final io.reactivex.rxjava3.operators.ConditionalSubscriber<? super T> downstream;

  io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber(io.reactivex.rxjava3.operators.ConditionalSubscriber<? super T>, int, io.reactivex.rxjava3.operators.SpscArrayQueue<T>, io.reactivex.rxjava3.core.Scheduler$Worker);
    Code:
       0: aload_0
       1: iload_2
       2: aload_3
       3: aload         4
       5: invokespecial #1                  // Method io/reactivex/rxjava3/internal/operators/parallel/ParallelRunOn$BaseRunOnSubscriber."<init>":(ILio/reactivex/rxjava3/operators/SpscArrayQueue;Lio/reactivex/rxjava3/core/Scheduler$Worker;)V
       8: aload_0
       9: aload_1
      10: putfield      #2                  // Field downstream:Lio/reactivex/rxjava3/operators/ConditionalSubscriber;
      13: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #3                  // Field upstream:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #4                  // Method io/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          37
      11: aload_0
      12: aload_1
      13: putfield      #3                  // Field upstream:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: getfield      #2                  // Field downstream:Lio/reactivex/rxjava3/operators/ConditionalSubscriber;
      20: aload_0
      21: invokeinterface #5,  2            // InterfaceMethod io/reactivex/rxjava3/operators/ConditionalSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      26: aload_1
      27: aload_0
      28: getfield      #6                  // Field prefetch:I
      31: i2l
      32: invokeinterface #7,  3            // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      37: return

  public void run();
    Code:
       0: iconst_1
       1: istore_1
       2: aload_0
       3: getfield      #8                  // Field consumed:I
       6: istore_2
       7: aload_0
       8: getfield      #9                  // Field queue:Lio/reactivex/rxjava3/operators/SpscArrayQueue;
      11: astore_3
      12: aload_0
      13: getfield      #2                  // Field downstream:Lio/reactivex/rxjava3/operators/ConditionalSubscriber;
      16: astore        4
      18: aload_0
      19: getfield      #10                 // Field limit:I
      22: istore        5
      24: aload_0
      25: getfield      #11                 // Field requested:Ljava/util/concurrent/atomic/AtomicLong;
      28: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
      31: lstore        6
      33: lconst_0
      34: lstore        8
      36: lload         8
      38: lload         6
      40: lcmp
      41: ifeq          198
      44: aload_0
      45: getfield      #13                 // Field cancelled:Z
      48: ifeq          56
      51: aload_3
      52: invokevirtual #14                 // Method io/reactivex/rxjava3/operators/SpscArrayQueue.clear:()V
      55: return
      56: aload_0
      57: getfield      #15                 // Field done:Z
      60: istore        10
      62: iload         10
      64: ifeq          99
      67: aload_0
      68: getfield      #16                 // Field error:Ljava/lang/Throwable;
      71: astore        11
      73: aload         11
      75: ifnull        99
      78: aload_3
      79: invokevirtual #14                 // Method io/reactivex/rxjava3/operators/SpscArrayQueue.clear:()V
      82: aload         4
      84: aload         11
      86: invokeinterface #17,  2           // InterfaceMethod io/reactivex/rxjava3/operators/ConditionalSubscriber.onError:(Ljava/lang/Throwable;)V
      91: aload_0
      92: getfield      #18                 // Field worker:Lio/reactivex/rxjava3/core/Scheduler$Worker;
      95: invokevirtual #19                 // Method io/reactivex/rxjava3/core/Scheduler$Worker.dispose:()V
      98: return
      99: aload_3
     100: invokevirtual #20                 // Method io/reactivex/rxjava3/operators/SpscArrayQueue.poll:()Ljava/lang/Object;
     103: astore        11
     105: aload         11
     107: ifnonnull     114
     110: iconst_1
     111: goto          115
     114: iconst_0
     115: istore        12
     117: iload         10
     119: ifeq          142
     122: iload         12
     124: ifeq          142
     127: aload         4
     129: invokeinterface #21,  1           // InterfaceMethod io/reactivex/rxjava3/operators/ConditionalSubscriber.onComplete:()V
     134: aload_0
     135: getfield      #18                 // Field worker:Lio/reactivex/rxjava3/core/Scheduler$Worker;
     138: invokevirtual #19                 // Method io/reactivex/rxjava3/core/Scheduler$Worker.dispose:()V
     141: return
     142: iload         12
     144: ifeq          150
     147: goto          198
     150: aload         4
     152: aload         11
     154: invokeinterface #22,  2           // InterfaceMethod io/reactivex/rxjava3/operators/ConditionalSubscriber.tryOnNext:(Ljava/lang/Object;)Z
     159: ifeq          168
     162: lload         8
     164: lconst_1
     165: ladd
     166: lstore        8
     168: iinc          2, 1
     171: iload_2
     172: istore        13
     174: iload         13
     176: iload         5
     178: if_icmpne     195
     181: iconst_0
     182: istore_2
     183: aload_0
     184: getfield      #3                  // Field upstream:Lorg/reactivestreams/Subscription;
     187: iload         13
     189: i2l
     190: invokeinterface #7,  3            // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     195: goto          36
     198: lload         8
     200: lload         6
     202: lcmp
     203: ifne          279
     206: aload_0
     207: getfield      #13                 // Field cancelled:Z
     210: ifeq          218
     213: aload_3
     214: invokevirtual #14                 // Method io/reactivex/rxjava3/operators/SpscArrayQueue.clear:()V
     217: return
     218: aload_0
     219: getfield      #15                 // Field done:Z
     222: ifeq          279
     225: aload_0
     226: getfield      #16                 // Field error:Ljava/lang/Throwable;
     229: astore        10
     231: aload         10
     233: ifnull        257
     236: aload_3
     237: invokevirtual #14                 // Method io/reactivex/rxjava3/operators/SpscArrayQueue.clear:()V
     240: aload         4
     242: aload         10
     244: invokeinterface #17,  2           // InterfaceMethod io/reactivex/rxjava3/operators/ConditionalSubscriber.onError:(Ljava/lang/Throwable;)V
     249: aload_0
     250: getfield      #18                 // Field worker:Lio/reactivex/rxjava3/core/Scheduler$Worker;
     253: invokevirtual #19                 // Method io/reactivex/rxjava3/core/Scheduler$Worker.dispose:()V
     256: return
     257: aload_3
     258: invokevirtual #23                 // Method io/reactivex/rxjava3/operators/SpscArrayQueue.isEmpty:()Z
     261: ifeq          279
     264: aload         4
     266: invokeinterface #21,  1           // InterfaceMethod io/reactivex/rxjava3/operators/ConditionalSubscriber.onComplete:()V
     271: aload_0
     272: getfield      #18                 // Field worker:Lio/reactivex/rxjava3/core/Scheduler$Worker;
     275: invokevirtual #19                 // Method io/reactivex/rxjava3/core/Scheduler$Worker.dispose:()V
     278: return
     279: lload         8
     281: lconst_0
     282: lcmp
     283: ifeq          296
     286: aload_0
     287: getfield      #11                 // Field requested:Ljava/util/concurrent/atomic/AtomicLong;
     290: lload         8
     292: invokestatic  #24                 // Method io/reactivex/rxjava3/internal/util/BackpressureHelper.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J
     295: pop2
     296: aload_0
     297: iload_2
     298: putfield      #8                  // Field consumed:I
     301: aload_0
     302: iload_1
     303: ineg
     304: invokevirtual #25                 // Method addAndGet:(I)I
     307: istore_1
     308: iload_1
     309: ifne          315
     312: goto          318
     315: goto          24
     318: return
}

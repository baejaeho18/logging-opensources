Compiled from "MaybeFlatten.java"
final class io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver<T, R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.MaybeObserver<T>, io.reactivex.rxjava3.disposables.Disposable {
  private static final long serialVersionUID;

  final io.reactivex.rxjava3.core.MaybeObserver<? super R> downstream;

  final io.reactivex.rxjava3.functions.Function<? super T, ? extends io.reactivex.rxjava3.core.MaybeSource<? extends R>> mapper;

  io.reactivex.rxjava3.disposables.Disposable upstream;

  io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver(io.reactivex.rxjava3.core.MaybeObserver<? super R>, io.reactivex.rxjava3.functions.Function<? super T, ? extends io.reactivex.rxjava3.core.MaybeSource<? extends R>>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field downstream:Lio/reactivex/rxjava3/core/MaybeObserver;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field mapper:Lio/reactivex/rxjava3/functions/Function;
      14: return

  public void dispose();
    Code:
       0: aload_0
       1: invokestatic  #4                  // Method io/reactivex/rxjava3/internal/disposables/DisposableHelper.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z
       4: pop
       5: aload_0
       6: getfield      #5                  // Field upstream:Lio/reactivex/rxjava3/disposables/Disposable;
       9: invokeinterface #6,  1            // InterfaceMethod io/reactivex/rxjava3/disposables/Disposable.dispose:()V
      14: return

  public boolean isDisposed();
    Code:
       0: aload_0
       1: invokevirtual #7                  // Method get:()Ljava/lang/Object;
       4: checkcast     #8                  // class io/reactivex/rxjava3/disposables/Disposable
       7: invokestatic  #9                  // Method io/reactivex/rxjava3/internal/disposables/DisposableHelper.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z
      10: ireturn

  public void onSubscribe(io.reactivex.rxjava3.disposables.Disposable);
    Code:
       0: aload_0
       1: getfield      #5                  // Field upstream:Lio/reactivex/rxjava3/disposables/Disposable;
       4: aload_1
       5: invokestatic  #10                 // Method io/reactivex/rxjava3/internal/disposables/DisposableHelper.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z
       8: ifeq          26
      11: aload_0
      12: aload_1
      13: putfield      #5                  // Field upstream:Lio/reactivex/rxjava3/disposables/Disposable;
      16: aload_0
      17: getfield      #2                  // Field downstream:Lio/reactivex/rxjava3/core/MaybeObserver;
      20: aload_0
      21: invokeinterface #11,  2           // InterfaceMethod io/reactivex/rxjava3/core/MaybeObserver.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V
      26: return

  public void onSuccess(T);
    Code:
       0: aload_0
       1: getfield      #3                  // Field mapper:Lio/reactivex/rxjava3/functions/Function;
       4: aload_1
       5: invokeinterface #12,  2           // InterfaceMethod io/reactivex/rxjava3/functions/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      10: ldc           #13                 // String The mapper returned a null MaybeSource
      12: invokestatic  #14                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      15: checkcast     #15                 // class io/reactivex/rxjava3/core/MaybeSource
      18: astore_2
      19: goto          38
      22: astore_3
      23: aload_3
      24: invokestatic  #17                 // Method io/reactivex/rxjava3/exceptions/Exceptions.throwIfFatal:(Ljava/lang/Throwable;)V
      27: aload_0
      28: getfield      #2                  // Field downstream:Lio/reactivex/rxjava3/core/MaybeObserver;
      31: aload_3
      32: invokeinterface #18,  2           // InterfaceMethod io/reactivex/rxjava3/core/MaybeObserver.onError:(Ljava/lang/Throwable;)V
      37: return
      38: aload_0
      39: invokevirtual #19                 // Method isDisposed:()Z
      42: ifne          59
      45: aload_2
      46: new           #20                 // class io/reactivex/rxjava3/internal/operators/maybe/MaybeFlatten$FlatMapMaybeObserver$InnerObserver
      49: dup
      50: aload_0
      51: invokespecial #21                 // Method io/reactivex/rxjava3/internal/operators/maybe/MaybeFlatten$FlatMapMaybeObserver$InnerObserver."<init>":(Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatten$FlatMapMaybeObserver;)V
      54: invokeinterface #22,  2           // InterfaceMethod io/reactivex/rxjava3/core/MaybeSource.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V
      59: return
    Exception table:
       from    to  target type
           0    19    22   Class java/lang/Throwable

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #2                  // Field downstream:Lio/reactivex/rxjava3/core/MaybeObserver;
       4: aload_1
       5: invokeinterface #18,  2           // InterfaceMethod io/reactivex/rxjava3/core/MaybeObserver.onError:(Ljava/lang/Throwable;)V
      10: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #2                  // Field downstream:Lio/reactivex/rxjava3/core/MaybeObserver;
       4: invokeinterface #23,  1           // InterfaceMethod io/reactivex/rxjava3/core/MaybeObserver.onComplete:()V
       9: return
}

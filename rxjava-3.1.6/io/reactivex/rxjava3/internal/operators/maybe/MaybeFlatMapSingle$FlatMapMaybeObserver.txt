Compiled from "MaybeFlatMapSingle.java"
final class io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver<T, R> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.MaybeObserver<T>, io.reactivex.rxjava3.disposables.Disposable {
  private static final long serialVersionUID;

  final io.reactivex.rxjava3.core.MaybeObserver<? super R> downstream;

  final io.reactivex.rxjava3.functions.Function<? super T, ? extends io.reactivex.rxjava3.core.SingleSource<? extends R>> mapper;

  io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver(io.reactivex.rxjava3.core.MaybeObserver<? super R>, io.reactivex.rxjava3.functions.Function<? super T, ? extends io.reactivex.rxjava3.core.SingleSource<? extends R>>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field downstream:Lio/reactivex/rxjava3/core/MaybeObserver;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field mapper:Lio/reactivex/rxjava3/functions/Function;
      14: return

  public void dispose();
    Code:
       0: aload_0
       1: invokestatic  #4                  // Method io/reactivex/rxjava3/internal/disposables/DisposableHelper.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z
       4: pop
       5: return

  public boolean isDisposed();
    Code:
       0: aload_0
       1: invokevirtual #5                  // Method get:()Ljava/lang/Object;
       4: checkcast     #6                  // class io/reactivex/rxjava3/disposables/Disposable
       7: invokestatic  #7                  // Method io/reactivex/rxjava3/internal/disposables/DisposableHelper.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z
      10: ireturn

  public void onSubscribe(io.reactivex.rxjava3.disposables.Disposable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #8                  // Method io/reactivex/rxjava3/internal/disposables/DisposableHelper.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z
       5: ifeq          18
       8: aload_0
       9: getfield      #2                  // Field downstream:Lio/reactivex/rxjava3/core/MaybeObserver;
      12: aload_0
      13: invokeinterface #9,  2            // InterfaceMethod io/reactivex/rxjava3/core/MaybeObserver.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V
      18: return

  public void onSuccess(T);
    Code:
       0: aload_0
       1: getfield      #3                  // Field mapper:Lio/reactivex/rxjava3/functions/Function;
       4: aload_1
       5: invokeinterface #10,  2           // InterfaceMethod io/reactivex/rxjava3/functions/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      10: ldc           #11                 // String The mapper returned a null SingleSource
      12: invokestatic  #12                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      15: checkcast     #13                 // class io/reactivex/rxjava3/core/SingleSource
      18: astore_2
      19: goto          33
      22: astore_3
      23: aload_3
      24: invokestatic  #15                 // Method io/reactivex/rxjava3/exceptions/Exceptions.throwIfFatal:(Ljava/lang/Throwable;)V
      27: aload_0
      28: aload_3
      29: invokevirtual #16                 // Method onError:(Ljava/lang/Throwable;)V
      32: return
      33: aload_0
      34: invokevirtual #17                 // Method isDisposed:()Z
      37: ifne          58
      40: aload_2
      41: new           #18                 // class io/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapSingle$FlatMapSingleObserver
      44: dup
      45: aload_0
      46: aload_0
      47: getfield      #2                  // Field downstream:Lio/reactivex/rxjava3/core/MaybeObserver;
      50: invokespecial #19                 // Method io/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapSingle$FlatMapSingleObserver."<init>":(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/core/MaybeObserver;)V
      53: invokeinterface #20,  2           // InterfaceMethod io/reactivex/rxjava3/core/SingleSource.subscribe:(Lio/reactivex/rxjava3/core/SingleObserver;)V
      58: return
    Exception table:
       from    to  target type
           0    19    22   Class java/lang/Throwable

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #2                  // Field downstream:Lio/reactivex/rxjava3/core/MaybeObserver;
       4: aload_1
       5: invokeinterface #21,  2           // InterfaceMethod io/reactivex/rxjava3/core/MaybeObserver.onError:(Ljava/lang/Throwable;)V
      10: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #2                  // Field downstream:Lio/reactivex/rxjava3/core/MaybeObserver;
       4: invokeinterface #22,  1           // InterfaceMethod io/reactivex/rxjava3/core/MaybeObserver.onComplete:()V
       9: return
}

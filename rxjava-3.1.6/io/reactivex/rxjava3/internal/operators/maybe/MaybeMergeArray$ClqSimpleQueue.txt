Compiled from "MaybeMergeArray.java"
final class io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$ClqSimpleQueue<T> extends java.util.concurrent.ConcurrentLinkedQueue<T> implements io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$SimpleQueueWithConsumerIndex<T> {
  private static final long serialVersionUID;

  int consumerIndex;

  final java.util.concurrent.atomic.AtomicInteger producerIndex;

  io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$ClqSimpleQueue();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/concurrent/ConcurrentLinkedQueue."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicInteger
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      12: putfield      #4                  // Field producerIndex:Ljava/util/concurrent/atomic/AtomicInteger;
      15: return

  public boolean offer(T, T);
    Code:
       0: new           #5                  // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #6                  // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  public boolean offer(T);
    Code:
       0: aload_0
       1: getfield      #4                  // Field producerIndex:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #7                  // Method java/util/concurrent/atomic/AtomicInteger.getAndIncrement:()I
       7: pop
       8: aload_0
       9: aload_1
      10: invokespecial #8                  // Method java/util/concurrent/ConcurrentLinkedQueue.offer:(Ljava/lang/Object;)Z
      13: ireturn

  public T poll();
    Code:
       0: aload_0
       1: invokespecial #9                  // Method java/util/concurrent/ConcurrentLinkedQueue.poll:()Ljava/lang/Object;
       4: astore_1
       5: aload_1
       6: ifnull        19
       9: aload_0
      10: dup
      11: getfield      #10                 // Field consumerIndex:I
      14: iconst_1
      15: iadd
      16: putfield      #10                 // Field consumerIndex:I
      19: aload_1
      20: areturn

  public int consumerIndex();
    Code:
       0: aload_0
       1: getfield      #10                 // Field consumerIndex:I
       4: ireturn

  public int producerIndex();
    Code:
       0: aload_0
       1: getfield      #4                  // Field producerIndex:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: ireturn

  public void drop();
    Code:
       0: aload_0
       1: invokevirtual #12                 // Method poll:()Ljava/lang/Object;
       4: pop
       5: return
}

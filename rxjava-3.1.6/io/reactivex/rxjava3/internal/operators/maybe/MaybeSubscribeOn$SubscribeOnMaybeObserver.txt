Compiled from "MaybeSubscribeOn.java"
final class io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.disposables.Disposable> implements io.reactivex.rxjava3.core.MaybeObserver<T>, io.reactivex.rxjava3.disposables.Disposable {
  final io.reactivex.rxjava3.internal.disposables.SequentialDisposable task;

  private static final long serialVersionUID;

  final io.reactivex.rxjava3.core.MaybeObserver<? super T> downstream;

  io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver(io.reactivex.rxjava3.core.MaybeObserver<? super T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field downstream:Lio/reactivex/rxjava3/core/MaybeObserver;
       9: aload_0
      10: new           #3                  // class io/reactivex/rxjava3/internal/disposables/SequentialDisposable
      13: dup
      14: invokespecial #4                  // Method io/reactivex/rxjava3/internal/disposables/SequentialDisposable."<init>":()V
      17: putfield      #5                  // Field task:Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;
      20: return

  public void dispose();
    Code:
       0: aload_0
       1: invokestatic  #6                  // Method io/reactivex/rxjava3/internal/disposables/DisposableHelper.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z
       4: pop
       5: aload_0
       6: getfield      #5                  // Field task:Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;
       9: invokevirtual #7                  // Method io/reactivex/rxjava3/internal/disposables/SequentialDisposable.dispose:()V
      12: return

  public boolean isDisposed();
    Code:
       0: aload_0
       1: invokevirtual #8                  // Method get:()Ljava/lang/Object;
       4: checkcast     #9                  // class io/reactivex/rxjava3/disposables/Disposable
       7: invokestatic  #10                 // Method io/reactivex/rxjava3/internal/disposables/DisposableHelper.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z
      10: ireturn

  public void onSubscribe(io.reactivex.rxjava3.disposables.Disposable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #11                 // Method io/reactivex/rxjava3/internal/disposables/DisposableHelper.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z
       5: pop
       6: return

  public void onSuccess(T);
    Code:
       0: aload_0
       1: getfield      #2                  // Field downstream:Lio/reactivex/rxjava3/core/MaybeObserver;
       4: aload_1
       5: invokeinterface #12,  2           // InterfaceMethod io/reactivex/rxjava3/core/MaybeObserver.onSuccess:(Ljava/lang/Object;)V
      10: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #2                  // Field downstream:Lio/reactivex/rxjava3/core/MaybeObserver;
       4: aload_1
       5: invokeinterface #13,  2           // InterfaceMethod io/reactivex/rxjava3/core/MaybeObserver.onError:(Ljava/lang/Throwable;)V
      10: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #2                  // Field downstream:Lio/reactivex/rxjava3/core/MaybeObserver;
       4: invokeinterface #14,  1           // InterfaceMethod io/reactivex/rxjava3/core/MaybeObserver.onComplete:()V
       9: return
}

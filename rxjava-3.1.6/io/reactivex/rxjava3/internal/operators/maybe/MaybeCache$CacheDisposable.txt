Compiled from "MaybeCache.java"
final class io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$CacheDisposable<T> extends java.util.concurrent.atomic.AtomicReference<io.reactivex.rxjava3.internal.operators.maybe.MaybeCache<T>> implements io.reactivex.rxjava3.disposables.Disposable {
  private static final long serialVersionUID;

  final io.reactivex.rxjava3.core.MaybeObserver<? super T> downstream;

  io.reactivex.rxjava3.internal.operators.maybe.MaybeCache$CacheDisposable(io.reactivex.rxjava3.core.MaybeObserver<? super T>, io.reactivex.rxjava3.internal.operators.maybe.MaybeCache<T>);
    Code:
       0: aload_0
       1: aload_2
       2: invokespecial #1                  // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
       5: aload_0
       6: aload_1
       7: putfield      #2                  // Field downstream:Lio/reactivex/rxjava3/core/MaybeObserver;
      10: return

  public void dispose();
    Code:
       0: aload_0
       1: aconst_null
       2: invokevirtual #3                  // Method getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;
       5: checkcast     #4                  // class io/reactivex/rxjava3/internal/operators/maybe/MaybeCache
       8: astore_1
       9: aload_1
      10: ifnull        18
      13: aload_1
      14: aload_0
      15: invokevirtual #5                  // Method io/reactivex/rxjava3/internal/operators/maybe/MaybeCache.remove:(Lio/reactivex/rxjava3/internal/operators/maybe/MaybeCache$CacheDisposable;)V
      18: return

  public boolean isDisposed();
    Code:
       0: aload_0
       1: invokevirtual #6                  // Method get:()Ljava/lang/Object;
       4: ifnonnull     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn
}

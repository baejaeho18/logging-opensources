Compiled from "ReferenceDisposable.java"
abstract class io.reactivex.rxjava3.disposables.ReferenceDisposable<T> extends java.util.concurrent.atomic.AtomicReference<T> implements io.reactivex.rxjava3.disposables.Disposable {
  private static final long serialVersionUID;

  io.reactivex.rxjava3.disposables.ReferenceDisposable(T);
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #1                  // String value is null
       4: invokestatic  #2                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      10: return

  protected abstract void onDisposed(T);

  public final void dispose();
    Code:
       0: aload_0
       1: invokevirtual #4                  // Method get:()Ljava/lang/Object;
       4: astore_1
       5: aload_1
       6: ifnull        24
       9: aload_0
      10: aconst_null
      11: invokevirtual #5                  // Method getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;
      14: astore_1
      15: aload_1
      16: ifnull        24
      19: aload_0
      20: aload_1
      21: invokevirtual #6                  // Method onDisposed:(Ljava/lang/Object;)V
      24: return

  public final boolean isDisposed();
    Code:
       0: aload_0
       1: invokevirtual #4                  // Method get:()Ljava/lang/Object;
       4: ifnonnull     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn
}

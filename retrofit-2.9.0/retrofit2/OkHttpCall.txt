Compiled from "OkHttpCall.java"
final class retrofit2.OkHttpCall<T> implements retrofit2.Call<T> {
  private final retrofit2.RequestFactory requestFactory;

  private final java.lang.Object[] args;

  private final okhttp3.Call$Factory callFactory;

  private final retrofit2.Converter<okhttp3.ResponseBody, T> responseConverter;

  private volatile boolean canceled;

  private okhttp3.Call rawCall;

  private java.lang.Throwable creationFailure;

  private boolean executed;

  retrofit2.OkHttpCall(retrofit2.RequestFactory, java.lang.Object[], okhttp3.Call$Factory, retrofit2.Converter<okhttp3.ResponseBody, T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #7                  // Field requestFactory:Lretrofit2/RequestFactory;
       9: aload_0
      10: aload_2
      11: putfield      #13                 // Field args:[Ljava/lang/Object;
      14: aload_0
      15: aload_3
      16: putfield      #17                 // Field callFactory:Lokhttp3/Call$Factory;
      19: aload_0
      20: aload         4
      22: putfield      #21                 // Field responseConverter:Lretrofit2/Converter;
      25: return

  public retrofit2.OkHttpCall<T> clone();
    Code:
       0: new           #8                  // class retrofit2/OkHttpCall
       3: dup
       4: aload_0
       5: getfield      #7                  // Field requestFactory:Lretrofit2/RequestFactory;
       8: aload_0
       9: getfield      #13                 // Field args:[Ljava/lang/Object;
      12: aload_0
      13: getfield      #17                 // Field callFactory:Lokhttp3/Call$Factory;
      16: aload_0
      17: getfield      #21                 // Field responseConverter:Lretrofit2/Converter;
      20: invokespecial #25                 // Method "<init>":(Lretrofit2/RequestFactory;[Ljava/lang/Object;Lokhttp3/Call$Factory;Lretrofit2/Converter;)V
      23: areturn

  public synchronized okhttp3.Request request();
    Code:
       0: aload_0
       1: invokespecial #28                 // Method getRawCall:()Lokhttp3/Call;
       4: invokeinterface #32,  1           // InterfaceMethod okhttp3/Call.request:()Lokhttp3/Request;
       9: areturn
      10: astore_1
      11: new           #40                 // class java/lang/RuntimeException
      14: dup
      15: ldc           #42                 // String Unable to create request.
      17: aload_1
      18: invokespecial #44                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      21: athrow
    Exception table:
       from    to  target type
           0     9    10   Class java/io/IOException

  public synchronized okio.Timeout timeout();
    Code:
       0: aload_0
       1: invokespecial #28                 // Method getRawCall:()Lokhttp3/Call;
       4: invokeinterface #47,  1           // InterfaceMethod okhttp3/Call.timeout:()Lokio/Timeout;
       9: areturn
      10: astore_1
      11: new           #40                 // class java/lang/RuntimeException
      14: dup
      15: ldc           #51                 // String Unable to create call.
      17: aload_1
      18: invokespecial #44                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      21: athrow
    Exception table:
       from    to  target type
           0     9    10   Class java/io/IOException

  private okhttp3.Call getRawCall() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #53                 // Field rawCall:Lokhttp3/Call;
       4: astore_1
       5: aload_1
       6: ifnull        11
       9: aload_1
      10: areturn
      11: aload_0
      12: getfield      #57                 // Field creationFailure:Ljava/lang/Throwable;
      15: ifnull        62
      18: aload_0
      19: getfield      #57                 // Field creationFailure:Ljava/lang/Throwable;
      22: instanceof    #38                 // class java/io/IOException
      25: ifeq          36
      28: aload_0
      29: getfield      #57                 // Field creationFailure:Ljava/lang/Throwable;
      32: checkcast     #38                 // class java/io/IOException
      35: athrow
      36: aload_0
      37: getfield      #57                 // Field creationFailure:Ljava/lang/Throwable;
      40: instanceof    #40                 // class java/lang/RuntimeException
      43: ifeq          54
      46: aload_0
      47: getfield      #57                 // Field creationFailure:Ljava/lang/Throwable;
      50: checkcast     #40                 // class java/lang/RuntimeException
      53: athrow
      54: aload_0
      55: getfield      #57                 // Field creationFailure:Ljava/lang/Throwable;
      58: checkcast     #61                 // class java/lang/Error
      61: athrow
      62: aload_0
      63: aload_0
      64: invokespecial #63                 // Method createRawCall:()Lokhttp3/Call;
      67: dup_x1
      68: putfield      #53                 // Field rawCall:Lokhttp3/Call;
      71: areturn
      72: astore_2
      73: aload_2
      74: invokestatic  #66                 // Method retrofit2/Utils.throwIfFatal:(Ljava/lang/Throwable;)V
      77: aload_0
      78: aload_2
      79: putfield      #57                 // Field creationFailure:Ljava/lang/Throwable;
      82: aload_2
      83: athrow
    Exception table:
       from    to  target type
          62    71    72   Class java/lang/RuntimeException
          62    71    72   Class java/lang/Error
          62    71    72   Class java/io/IOException

  public void enqueue(retrofit2.Callback<T>);
    Code:
       0: aload_1
       1: ldc           #72                 // String callback == null
       3: invokestatic  #74                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: dup
       9: astore        4
      11: monitorenter
      12: aload_0
      13: getfield      #80                 // Field executed:Z
      16: ifeq          29
      19: new           #84                 // class java/lang/IllegalStateException
      22: dup
      23: ldc           #86                 // String Already executed.
      25: invokespecial #88                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      28: athrow
      29: aload_0
      30: iconst_1
      31: putfield      #80                 // Field executed:Z
      34: aload_0
      35: getfield      #53                 // Field rawCall:Lokhttp3/Call;
      38: astore_2
      39: aload_0
      40: getfield      #57                 // Field creationFailure:Ljava/lang/Throwable;
      43: astore_3
      44: aload_2
      45: ifnonnull     80
      48: aload_3
      49: ifnonnull     80
      52: aload_0
      53: aload_0
      54: invokespecial #63                 // Method createRawCall:()Lokhttp3/Call;
      57: dup_x1
      58: putfield      #53                 // Field rawCall:Lokhttp3/Call;
      61: astore_2
      62: goto          80
      65: astore        5
      67: aload         5
      69: invokestatic  #66                 // Method retrofit2/Utils.throwIfFatal:(Ljava/lang/Throwable;)V
      72: aload_0
      73: aload         5
      75: dup_x1
      76: putfield      #57                 // Field creationFailure:Ljava/lang/Throwable;
      79: astore_3
      80: aload         4
      82: monitorexit
      83: goto          94
      86: astore        6
      88: aload         4
      90: monitorexit
      91: aload         6
      93: athrow
      94: aload_3
      95: ifnull        107
      98: aload_1
      99: aload_0
     100: aload_3
     101: invokeinterface #93,  3           // InterfaceMethod retrofit2/Callback.onFailure:(Lretrofit2/Call;Ljava/lang/Throwable;)V
     106: return
     107: aload_0
     108: getfield      #99                 // Field canceled:Z
     111: ifeq          120
     114: aload_2
     115: invokeinterface #102,  1          // InterfaceMethod okhttp3/Call.cancel:()V
     120: aload_2
     121: new           #105                // class retrofit2/OkHttpCall$1
     124: dup
     125: aload_0
     126: aload_1
     127: invokespecial #107                // Method retrofit2/OkHttpCall$1."<init>":(Lretrofit2/OkHttpCall;Lretrofit2/Callback;)V
     130: invokeinterface #110,  2          // InterfaceMethod okhttp3/Call.enqueue:(Lokhttp3/Callback;)V
     135: return
    Exception table:
       from    to  target type
          52    62    65   Class java/lang/Throwable
          12    83    86   any
          86    91    86   any

  public synchronized boolean isExecuted();
    Code:
       0: aload_0
       1: getfield      #80                 // Field executed:Z
       4: ireturn

  public retrofit2.Response<T> execute() throws java.io.IOException;
    Code:
       0: aload_0
       1: dup
       2: astore_2
       3: monitorenter
       4: aload_0
       5: getfield      #80                 // Field executed:Z
       8: ifeq          21
      11: new           #84                 // class java/lang/IllegalStateException
      14: dup
      15: ldc           #86                 // String Already executed.
      17: invokespecial #88                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      20: athrow
      21: aload_0
      22: iconst_1
      23: putfield      #80                 // Field executed:Z
      26: aload_0
      27: invokespecial #28                 // Method getRawCall:()Lokhttp3/Call;
      30: astore_1
      31: aload_2
      32: monitorexit
      33: goto          41
      36: astore_3
      37: aload_2
      38: monitorexit
      39: aload_3
      40: athrow
      41: aload_0
      42: getfield      #99                 // Field canceled:Z
      45: ifeq          54
      48: aload_1
      49: invokeinterface #102,  1          // InterfaceMethod okhttp3/Call.cancel:()V
      54: aload_0
      55: aload_1
      56: invokeinterface #114,  1          // InterfaceMethod okhttp3/Call.execute:()Lokhttp3/Response;
      61: invokevirtual #118                // Method parseResponse:(Lokhttp3/Response;)Lretrofit2/Response;
      64: areturn
    Exception table:
       from    to  target type
           4    33    36   any
          36    39    36   any

  private okhttp3.Call createRawCall() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #17                 // Field callFactory:Lokhttp3/Call$Factory;
       4: aload_0
       5: getfield      #7                  // Field requestFactory:Lretrofit2/RequestFactory;
       8: aload_0
       9: getfield      #13                 // Field args:[Ljava/lang/Object;
      12: invokevirtual #122                // Method retrofit2/RequestFactory.create:([Ljava/lang/Object;)Lokhttp3/Request;
      15: invokeinterface #128,  2          // InterfaceMethod okhttp3/Call$Factory.newCall:(Lokhttp3/Request;)Lokhttp3/Call;
      20: astore_1
      21: aload_1
      22: ifnonnull     35
      25: new           #134                // class java/lang/NullPointerException
      28: dup
      29: ldc           #136                // String Call.Factory returned null.
      31: invokespecial #138                // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      34: athrow
      35: aload_1
      36: areturn

  retrofit2.Response<T> parseResponse(okhttp3.Response) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #139                // Method okhttp3/Response.body:()Lokhttp3/ResponseBody;
       4: astore_2
       5: aload_1
       6: invokevirtual #145                // Method okhttp3/Response.newBuilder:()Lokhttp3/Response$Builder;
       9: new           #149                // class retrofit2/OkHttpCall$NoContentResponseBody
      12: dup
      13: aload_2
      14: invokevirtual #151                // Method okhttp3/ResponseBody.contentType:()Lokhttp3/MediaType;
      17: aload_2
      18: invokevirtual #157                // Method okhttp3/ResponseBody.contentLength:()J
      21: invokespecial #161                // Method retrofit2/OkHttpCall$NoContentResponseBody."<init>":(Lokhttp3/MediaType;J)V
      24: invokevirtual #164                // Method okhttp3/Response$Builder.body:(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;
      27: invokevirtual #169                // Method okhttp3/Response$Builder.build:()Lokhttp3/Response;
      30: astore_1
      31: aload_1
      32: invokevirtual #172                // Method okhttp3/Response.code:()I
      35: istore_3
      36: iload_3
      37: sipush        200
      40: if_icmplt     50
      43: iload_3
      44: sipush        300
      47: if_icmplt     80
      50: aload_2
      51: invokestatic  #176                // Method retrofit2/Utils.buffer:(Lokhttp3/ResponseBody;)Lokhttp3/ResponseBody;
      54: astore        4
      56: aload         4
      58: aload_1
      59: invokestatic  #180                // Method retrofit2/Response.error:(Lokhttp3/ResponseBody;Lokhttp3/Response;)Lretrofit2/Response;
      62: astore        5
      64: aload_2
      65: invokevirtual #186                // Method okhttp3/ResponseBody.close:()V
      68: aload         5
      70: areturn
      71: astore        6
      73: aload_2
      74: invokevirtual #186                // Method okhttp3/ResponseBody.close:()V
      77: aload         6
      79: athrow
      80: iload_3
      81: sipush        204
      84: if_icmpeq     94
      87: iload_3
      88: sipush        205
      91: if_icmpne     104
      94: aload_2
      95: invokevirtual #186                // Method okhttp3/ResponseBody.close:()V
      98: aconst_null
      99: aload_1
     100: invokestatic  #189                // Method retrofit2/Response.success:(Ljava/lang/Object;Lokhttp3/Response;)Lretrofit2/Response;
     103: areturn
     104: new           #193                // class retrofit2/OkHttpCall$ExceptionCatchingResponseBody
     107: dup
     108: aload_2
     109: invokespecial #195                // Method retrofit2/OkHttpCall$ExceptionCatchingResponseBody."<init>":(Lokhttp3/ResponseBody;)V
     112: astore        4
     114: aload_0
     115: getfield      #21                 // Field responseConverter:Lretrofit2/Converter;
     118: aload         4
     120: invokeinterface #198,  2          // InterfaceMethod retrofit2/Converter.convert:(Ljava/lang/Object;)Ljava/lang/Object;
     125: astore        5
     127: aload         5
     129: aload_1
     130: invokestatic  #189                // Method retrofit2/Response.success:(Ljava/lang/Object;Lokhttp3/Response;)Lretrofit2/Response;
     133: areturn
     134: astore        5
     136: aload         4
     138: invokevirtual #204                // Method retrofit2/OkHttpCall$ExceptionCatchingResponseBody.throwIfCaught:()V
     141: aload         5
     143: athrow
    Exception table:
       from    to  target type
          50    64    71   any
          71    73    71   any
         114   133   134   Class java/lang/RuntimeException

  public void cancel();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #99                 // Field canceled:Z
       5: aload_0
       6: dup
       7: astore_2
       8: monitorenter
       9: aload_0
      10: getfield      #53                 // Field rawCall:Lokhttp3/Call;
      13: astore_1
      14: aload_2
      15: monitorexit
      16: goto          24
      19: astore_3
      20: aload_2
      21: monitorexit
      22: aload_3
      23: athrow
      24: aload_1
      25: ifnull        34
      28: aload_1
      29: invokeinterface #102,  1          // InterfaceMethod okhttp3/Call.cancel:()V
      34: return
    Exception table:
       from    to  target type
           9    16    19   any
          19    22    19   any

  public boolean isCanceled();
    Code:
       0: aload_0
       1: getfield      #99                 // Field canceled:Z
       4: ifeq          9
       7: iconst_1
       8: ireturn
       9: aload_0
      10: dup
      11: astore_1
      12: monitorenter
      13: aload_0
      14: getfield      #53                 // Field rawCall:Lokhttp3/Call;
      17: ifnull        36
      20: aload_0
      21: getfield      #53                 // Field rawCall:Lokhttp3/Call;
      24: invokeinterface #207,  1          // InterfaceMethod okhttp3/Call.isCanceled:()Z
      29: ifeq          36
      32: iconst_1
      33: goto          37
      36: iconst_0
      37: aload_1
      38: monitorexit
      39: ireturn
      40: astore_2
      41: aload_1
      42: monitorexit
      43: aload_2
      44: athrow
    Exception table:
       from    to  target type
          13    39    40   any
          40    43    40   any

  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    Code:
       0: aload_0
       1: invokevirtual #211                // Method clone:()Lretrofit2/OkHttpCall;
       4: areturn

  public retrofit2.Call clone();
    Code:
       0: aload_0
       1: invokevirtual #211                // Method clone:()Lretrofit2/OkHttpCall;
       4: areturn
}

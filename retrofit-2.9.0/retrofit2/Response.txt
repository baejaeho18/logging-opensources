Compiled from "Response.java"
public final class retrofit2.Response<T> {
  private final okhttp3.Response rawResponse;

  private final T body;

  private final okhttp3.ResponseBody errorBody;

  public static <T> retrofit2.Response<T> success(T);
    Code:
       0: aload_0
       1: new           #1                  // class okhttp3/Response$Builder
       4: dup
       5: invokespecial #3                  // Method okhttp3/Response$Builder."<init>":()V
       8: sipush        200
      11: invokevirtual #7                  // Method okhttp3/Response$Builder.code:(I)Lokhttp3/Response$Builder;
      14: ldc           #11                 // String OK
      16: invokevirtual #13                 // Method okhttp3/Response$Builder.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;
      19: getstatic     #17                 // Field okhttp3/Protocol.HTTP_1_1:Lokhttp3/Protocol;
      22: invokevirtual #23                 // Method okhttp3/Response$Builder.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;
      25: new           #27                 // class okhttp3/Request$Builder
      28: dup
      29: invokespecial #29                 // Method okhttp3/Request$Builder."<init>":()V
      32: ldc           #30                 // String http://localhost/
      34: invokevirtual #32                 // Method okhttp3/Request$Builder.url:(Ljava/lang/String;)Lokhttp3/Request$Builder;
      37: invokevirtual #36                 // Method okhttp3/Request$Builder.build:()Lokhttp3/Request;
      40: invokevirtual #40                 // Method okhttp3/Response$Builder.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;
      43: invokevirtual #44                 // Method okhttp3/Response$Builder.build:()Lokhttp3/Response;
      46: invokestatic  #47                 // Method success:(Ljava/lang/Object;Lokhttp3/Response;)Lretrofit2/Response;
      49: areturn

  public static <T> retrofit2.Response<T> success(int, T);
    Code:
       0: iload_0
       1: sipush        200
       4: if_icmplt     14
       7: iload_0
       8: sipush        300
      11: if_icmplt     41
      14: new           #53                 // class java/lang/IllegalArgumentException
      17: dup
      18: new           #55                 // class java/lang/StringBuilder
      21: dup
      22: invokespecial #57                 // Method java/lang/StringBuilder."<init>":()V
      25: ldc           #58                 // String code < 200 or >= 300:
      27: invokevirtual #60                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: iload_0
      31: invokevirtual #64                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      34: invokevirtual #67                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      37: invokespecial #71                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      40: athrow
      41: aload_1
      42: new           #1                  // class okhttp3/Response$Builder
      45: dup
      46: invokespecial #3                  // Method okhttp3/Response$Builder."<init>":()V
      49: iload_0
      50: invokevirtual #7                  // Method okhttp3/Response$Builder.code:(I)Lokhttp3/Response$Builder;
      53: ldc           #74                 // String Response.success()
      55: invokevirtual #13                 // Method okhttp3/Response$Builder.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;
      58: getstatic     #17                 // Field okhttp3/Protocol.HTTP_1_1:Lokhttp3/Protocol;
      61: invokevirtual #23                 // Method okhttp3/Response$Builder.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;
      64: new           #27                 // class okhttp3/Request$Builder
      67: dup
      68: invokespecial #29                 // Method okhttp3/Request$Builder."<init>":()V
      71: ldc           #30                 // String http://localhost/
      73: invokevirtual #32                 // Method okhttp3/Request$Builder.url:(Ljava/lang/String;)Lokhttp3/Request$Builder;
      76: invokevirtual #36                 // Method okhttp3/Request$Builder.build:()Lokhttp3/Request;
      79: invokevirtual #40                 // Method okhttp3/Response$Builder.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;
      82: invokevirtual #44                 // Method okhttp3/Response$Builder.build:()Lokhttp3/Response;
      85: invokestatic  #47                 // Method success:(Ljava/lang/Object;Lokhttp3/Response;)Lretrofit2/Response;
      88: areturn

  public static <T> retrofit2.Response<T> success(T, okhttp3.Headers);
    Code:
       0: aload_1
       1: ldc           #76                 // String headers == null
       3: invokestatic  #78                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: new           #1                  // class okhttp3/Response$Builder
      11: dup
      12: invokespecial #3                  // Method okhttp3/Response$Builder."<init>":()V
      15: sipush        200
      18: invokevirtual #7                  // Method okhttp3/Response$Builder.code:(I)Lokhttp3/Response$Builder;
      21: ldc           #11                 // String OK
      23: invokevirtual #13                 // Method okhttp3/Response$Builder.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;
      26: getstatic     #17                 // Field okhttp3/Protocol.HTTP_1_1:Lokhttp3/Protocol;
      29: invokevirtual #23                 // Method okhttp3/Response$Builder.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;
      32: aload_1
      33: invokevirtual #84                 // Method okhttp3/Response$Builder.headers:(Lokhttp3/Headers;)Lokhttp3/Response$Builder;
      36: new           #27                 // class okhttp3/Request$Builder
      39: dup
      40: invokespecial #29                 // Method okhttp3/Request$Builder."<init>":()V
      43: ldc           #30                 // String http://localhost/
      45: invokevirtual #32                 // Method okhttp3/Request$Builder.url:(Ljava/lang/String;)Lokhttp3/Request$Builder;
      48: invokevirtual #36                 // Method okhttp3/Request$Builder.build:()Lokhttp3/Request;
      51: invokevirtual #40                 // Method okhttp3/Response$Builder.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;
      54: invokevirtual #44                 // Method okhttp3/Response$Builder.build:()Lokhttp3/Response;
      57: invokestatic  #47                 // Method success:(Ljava/lang/Object;Lokhttp3/Response;)Lretrofit2/Response;
      60: areturn

  public static <T> retrofit2.Response<T> success(T, okhttp3.Response);
    Code:
       0: aload_1
       1: ldc           #88                 // String rawResponse == null
       3: invokestatic  #78                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_1
       8: invokevirtual #90                 // Method okhttp3/Response.isSuccessful:()Z
      11: ifne          24
      14: new           #53                 // class java/lang/IllegalArgumentException
      17: dup
      18: ldc           #96                 // String rawResponse must be successful response
      20: invokespecial #71                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      23: athrow
      24: new           #48                 // class retrofit2/Response
      27: dup
      28: aload_1
      29: aload_0
      30: aconst_null
      31: invokespecial #98                 // Method "<init>":(Lokhttp3/Response;Ljava/lang/Object;Lokhttp3/ResponseBody;)V
      34: areturn

  public static <T> retrofit2.Response<T> error(int, okhttp3.ResponseBody);
    Code:
       0: aload_1
       1: ldc           #101                // String body == null
       3: invokestatic  #78                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: iload_0
       8: sipush        400
      11: if_icmpge     41
      14: new           #53                 // class java/lang/IllegalArgumentException
      17: dup
      18: new           #55                 // class java/lang/StringBuilder
      21: dup
      22: invokespecial #57                 // Method java/lang/StringBuilder."<init>":()V
      25: ldc           #103                // String code < 400:
      27: invokevirtual #60                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: iload_0
      31: invokevirtual #64                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      34: invokevirtual #67                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      37: invokespecial #71                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      40: athrow
      41: aload_1
      42: new           #1                  // class okhttp3/Response$Builder
      45: dup
      46: invokespecial #3                  // Method okhttp3/Response$Builder."<init>":()V
      49: new           #105                // class retrofit2/OkHttpCall$NoContentResponseBody
      52: dup
      53: aload_1
      54: invokevirtual #107                // Method okhttp3/ResponseBody.contentType:()Lokhttp3/MediaType;
      57: aload_1
      58: invokevirtual #113                // Method okhttp3/ResponseBody.contentLength:()J
      61: invokespecial #117                // Method retrofit2/OkHttpCall$NoContentResponseBody."<init>":(Lokhttp3/MediaType;J)V
      64: invokevirtual #120                // Method okhttp3/Response$Builder.body:(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;
      67: iload_0
      68: invokevirtual #7                  // Method okhttp3/Response$Builder.code:(I)Lokhttp3/Response$Builder;
      71: ldc           #124                // String Response.error()
      73: invokevirtual #13                 // Method okhttp3/Response$Builder.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;
      76: getstatic     #17                 // Field okhttp3/Protocol.HTTP_1_1:Lokhttp3/Protocol;
      79: invokevirtual #23                 // Method okhttp3/Response$Builder.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;
      82: new           #27                 // class okhttp3/Request$Builder
      85: dup
      86: invokespecial #29                 // Method okhttp3/Request$Builder."<init>":()V
      89: ldc           #30                 // String http://localhost/
      91: invokevirtual #32                 // Method okhttp3/Request$Builder.url:(Ljava/lang/String;)Lokhttp3/Request$Builder;
      94: invokevirtual #36                 // Method okhttp3/Request$Builder.build:()Lokhttp3/Request;
      97: invokevirtual #40                 // Method okhttp3/Response$Builder.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;
     100: invokevirtual #44                 // Method okhttp3/Response$Builder.build:()Lokhttp3/Response;
     103: invokestatic  #126                // Method error:(Lokhttp3/ResponseBody;Lokhttp3/Response;)Lretrofit2/Response;
     106: areturn

  public static <T> retrofit2.Response<T> error(okhttp3.ResponseBody, okhttp3.Response);
    Code:
       0: aload_0
       1: ldc           #101                // String body == null
       3: invokestatic  #78                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_1
       8: ldc           #88                 // String rawResponse == null
      10: invokestatic  #78                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      13: pop
      14: aload_1
      15: invokevirtual #90                 // Method okhttp3/Response.isSuccessful:()Z
      18: ifeq          31
      21: new           #53                 // class java/lang/IllegalArgumentException
      24: dup
      25: ldc           #130                // String rawResponse should not be successful response
      27: invokespecial #71                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      30: athrow
      31: new           #48                 // class retrofit2/Response
      34: dup
      35: aload_1
      36: aconst_null
      37: aload_0
      38: invokespecial #98                 // Method "<init>":(Lokhttp3/Response;Ljava/lang/Object;Lokhttp3/ResponseBody;)V
      41: areturn

  private retrofit2.Response(okhttp3.Response, T, okhttp3.ResponseBody);
    Code:
       0: aload_0
       1: invokespecial #132                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #135                // Field rawResponse:Lokhttp3/Response;
       9: aload_0
      10: aload_2
      11: putfield      #139                // Field body:Ljava/lang/Object;
      14: aload_0
      15: aload_3
      16: putfield      #142                // Field errorBody:Lokhttp3/ResponseBody;
      19: return

  public okhttp3.Response raw();
    Code:
       0: aload_0
       1: getfield      #135                // Field rawResponse:Lokhttp3/Response;
       4: areturn

  public int code();
    Code:
       0: aload_0
       1: getfield      #135                // Field rawResponse:Lokhttp3/Response;
       4: invokevirtual #146                // Method okhttp3/Response.code:()I
       7: ireturn

  public java.lang.String message();
    Code:
       0: aload_0
       1: getfield      #135                // Field rawResponse:Lokhttp3/Response;
       4: invokevirtual #149                // Method okhttp3/Response.message:()Ljava/lang/String;
       7: areturn

  public okhttp3.Headers headers();
    Code:
       0: aload_0
       1: getfield      #135                // Field rawResponse:Lokhttp3/Response;
       4: invokevirtual #151                // Method okhttp3/Response.headers:()Lokhttp3/Headers;
       7: areturn

  public boolean isSuccessful();
    Code:
       0: aload_0
       1: getfield      #135                // Field rawResponse:Lokhttp3/Response;
       4: invokevirtual #90                 // Method okhttp3/Response.isSuccessful:()Z
       7: ireturn

  public T body();
    Code:
       0: aload_0
       1: getfield      #139                // Field body:Ljava/lang/Object;
       4: areturn

  public okhttp3.ResponseBody errorBody();
    Code:
       0: aload_0
       1: getfield      #142                // Field errorBody:Lokhttp3/ResponseBody;
       4: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #135                // Field rawResponse:Lokhttp3/Response;
       4: invokevirtual #154                // Method okhttp3/Response.toString:()Ljava/lang/String;
       7: areturn
}
